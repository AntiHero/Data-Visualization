(()=>{var __webpack_modules__={757:(module,__unused_webpack_exports,__webpack_require__)=>{eval("module.exports = __webpack_require__(666);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLXZpc3VhbGl6YXRpb24vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanM/YTM0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5Q0FBK0MiLCJmaWxlIjoiNzU3LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///757\n")},980:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\nfunction _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\n\n\n\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/superPropBase.js\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/get.js\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== "undefined" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nfunction _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\n\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === "object" || typeof call === "function")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf("[native code]") !== -1;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/construct.js\n\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\n\n\n\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === "function" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== "function") {\n      throw new TypeError("Super expression must either be null or a function");\n    }\n\n    if (typeof _cache !== "undefined") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(757);\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n;// CONCATENATED MODULE: ./d3.min.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = d3_min_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction d3_min_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = d3_min_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e38) { throw _e38; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e39) { didErr = true; err = _e39; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction d3_min_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return d3_min_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return d3_min_arrayLikeToArray(o, minLen); }\n\nfunction d3_min_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// https://d3js.org v6.6.1 Copyright 2021 Mike Bostock\n!function (t, n) {\n  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != "object" ? n(exports) : "function" == typeof define && __webpack_require__.amdO ? define(["exports"], n) : n((t = "undefined" != typeof globalThis ? globalThis : t || self).d3 = t.d3 || {});\n}(undefined, function (t) {\n  "use strict";\n\n  function n(t, n) {\n    return t < n ? -1 : t > n ? 1 : t >= n ? 0 : NaN;\n  }\n\n  function e(t) {\n    var e = t,\n        r = t;\n\n    function i(t, n, e, i) {\n      for (null == e && (e = 0), null == i && (i = t.length); e < i;) {\n        var _o2 = e + i >>> 1;\n\n        r(t[_o2], n) < 0 ? e = _o2 + 1 : i = _o2;\n      }\n\n      return e;\n    }\n\n    return 1 === t.length && (e = function e(n, _e2) {\n      return t(n) - _e2;\n    }, r = function (t) {\n      return function (e, r) {\n        return n(t(e), r);\n      };\n    }(t)), {\n      left: i,\n      center: function center(t, n, r, o) {\n        null == r && (r = 0), null == o && (o = t.length);\n        var a = i(t, n, r, o - 1);\n        return a > r && e(t[a - 1], n) > -e(t[a], n) ? a - 1 : a;\n      },\n      right: function right(t, n, e, i) {\n        for (null == e && (e = 0), null == i && (i = t.length); e < i;) {\n          var _o3 = e + i >>> 1;\n\n          r(t[_o3], n) > 0 ? i = _o3 : e = _o3 + 1;\n        }\n\n        return e;\n      }\n    };\n  }\n\n  function r(t) {\n    return null === t ? NaN : +t;\n  }\n\n  var i = e(n),\n      o = i.right,\n      a = i.left,\n      u = e(r).center;\n\n  function c(t, n) {\n    var e = 0;\n\n    if (void 0 === n) {\n      var _iterator = _createForOfIteratorHelper(t),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _n2 = _step.value;\n          null != _n2 && (_n2 = +_n2) >= _n2 && ++e;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } else {\n      var _r2 = -1;\n\n      var _iterator2 = _createForOfIteratorHelper(t),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _i2 = _step2.value;\n          null != (_i2 = n(_i2, ++_r2, t)) && (_i2 = +_i2) >= _i2 && ++e;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    return e;\n  }\n\n  function f(t) {\n    return 0 | t.length;\n  }\n\n  function s(t) {\n    return !(t > 0);\n  }\n\n  function l(t) {\n    return "object" != _typeof(t) || "length" in t ? t : Array.from(t);\n  }\n\n  function h(t, n) {\n    var e,\n        r = 0,\n        i = 0,\n        o = 0;\n\n    if (void 0 === n) {\n      var _iterator3 = _createForOfIteratorHelper(t),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _n3 = _step3.value;\n          null != _n3 && (_n3 = +_n3) >= _n3 && (e = _n3 - i, i += e / ++r, o += e * (_n3 - i));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    } else {\n      var _a2 = -1;\n\n      var _iterator4 = _createForOfIteratorHelper(t),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _u2 = _step4.value;\n          null != (_u2 = n(_u2, ++_a2, t)) && (_u2 = +_u2) >= _u2 && (e = _u2 - i, i += e / ++r, o += e * (_u2 - i));\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n\n    if (r > 1) return o / (r - 1);\n  }\n\n  function d(t, n) {\n    var e = h(t, n);\n    return e ? Math.sqrt(e) : e;\n  }\n\n  function p(t, n) {\n    var e, r;\n\n    if (void 0 === n) {\n      var _iterator5 = _createForOfIteratorHelper(t),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _n4 = _step5.value;\n          null != _n4 && (void 0 === e ? _n4 >= _n4 && (e = r = _n4) : (e > _n4 && (e = _n4), r < _n4 && (r = _n4)));\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    } else {\n      var _i3 = -1;\n\n      var _iterator6 = _createForOfIteratorHelper(t),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _o4 = _step6.value;\n          null != (_o4 = n(_o4, ++_i3, t)) && (void 0 === e ? _o4 >= _o4 && (e = r = _o4) : (e > _o4 && (e = _o4), r < _o4 && (r = _o4)));\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n\n    return [e, r];\n  }\n\n  var g = /*#__PURE__*/function () {\n    function g() {\n      _classCallCheck(this, g);\n\n      this._partials = new Float64Array(32), this._n = 0;\n    }\n\n    _createClass(g, [{\n      key: "add",\n      value: function add(t) {\n        var n = this._partials;\n        var e = 0;\n\n        for (var _r3 = 0; _r3 < this._n && _r3 < 32; _r3++) {\n          var _i4 = n[_r3],\n              _o5 = t + _i4,\n              _a3 = Math.abs(t) < Math.abs(_i4) ? t - (_o5 - _i4) : _i4 - (_o5 - t);\n\n          _a3 && (n[e++] = _a3), t = _o5;\n        }\n\n        return n[e] = t, this._n = e + 1, this;\n      }\n    }, {\n      key: "valueOf",\n      value: function valueOf() {\n        var t = this._partials;\n        var n,\n            e,\n            r,\n            i = this._n,\n            o = 0;\n\n        if (i > 0) {\n          for (o = t[--i]; i > 0 && (n = o, e = t[--i], o = n + e, r = e - (o - n), !r);) {\n            ;\n          }\n\n          i > 0 && (r < 0 && t[i - 1] < 0 || r > 0 && t[i - 1] > 0) && (e = 2 * r, n = o + e, e == n - o && (o = n));\n        }\n\n        return o;\n      }\n    }]);\n\n    return g;\n  }();\n\n  var y = /*#__PURE__*/function (_Map) {\n    _inherits(y, _Map);\n\n    var _super = _createSuper(y);\n\n    function y(t) {\n      var _this;\n\n      var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n\n      _classCallCheck(this, y);\n\n      if (_this = _super.call(this), Object.defineProperties(_assertThisInitialized(_this), {\n        _intern: {\n          value: new Map()\n        },\n        _key: {\n          value: n\n        }\n      }), null != t) {\n        var _iterator7 = _createForOfIteratorHelper(t),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var _step7$value = _slicedToArray(_step7.value, 2),\n                _n5 = _step7$value[0],\n                _e3 = _step7$value[1];\n\n            _this.set(_n5, _e3);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n\n      return _possibleConstructorReturn(_this);\n    }\n\n    _createClass(y, [{\n      key: "get",\n      value: function get(t) {\n        return _get(_getPrototypeOf(y.prototype), "get", this).call(this, _(this, t));\n      }\n    }, {\n      key: "has",\n      value: function has(t) {\n        return _get(_getPrototypeOf(y.prototype), "has", this).call(this, _(this, t));\n      }\n    }, {\n      key: "set",\n      value: function set(t, n) {\n        return _get(_getPrototypeOf(y.prototype), "set", this).call(this, b(this, t), n);\n      }\n    }, {\n      key: "delete",\n      value: function _delete(t) {\n        return _get(_getPrototypeOf(y.prototype), "delete", this).call(this, m(this, t));\n      }\n    }]);\n\n    return y;\n  }( /*#__PURE__*/_wrapNativeSuper(Map));\n\n  var v = /*#__PURE__*/function (_Set) {\n    _inherits(v, _Set);\n\n    var _super2 = _createSuper(v);\n\n    function v(t) {\n      var _this2;\n\n      var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n\n      _classCallCheck(this, v);\n\n      if (_this2 = _super2.call(this), Object.defineProperties(_assertThisInitialized(_this2), {\n        _intern: {\n          value: new Map()\n        },\n        _key: {\n          value: n\n        }\n      }), null != t) {\n        var _iterator8 = _createForOfIteratorHelper(t),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var _n6 = _step8.value;\n\n            _this2.add(_n6);\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      }\n\n      return _possibleConstructorReturn(_this2);\n    }\n\n    _createClass(v, [{\n      key: "has",\n      value: function has(t) {\n        return _get(_getPrototypeOf(v.prototype), "has", this).call(this, _(this, t));\n      }\n    }, {\n      key: "add",\n      value: function add(t) {\n        return _get(_getPrototypeOf(v.prototype), "add", this).call(this, b(this, t));\n      }\n    }, {\n      key: "delete",\n      value: function _delete(t) {\n        return _get(_getPrototypeOf(v.prototype), "delete", this).call(this, m(this, t));\n      }\n    }]);\n\n    return v;\n  }( /*#__PURE__*/_wrapNativeSuper(Set));\n\n  function _(_ref, e) {\n    var t = _ref._intern,\n        n = _ref._key;\n    var r = n(e);\n    return t.has(r) ? t.get(r) : e;\n  }\n\n  function b(_ref2, e) {\n    var t = _ref2._intern,\n        n = _ref2._key;\n    var r = n(e);\n    return t.has(r) ? t.get(r) : (t.set(r, e), e);\n  }\n\n  function m(_ref3, e) {\n    var t = _ref3._intern,\n        n = _ref3._key;\n    var r = n(e);\n    return t.has(r) && (e = t.get(e), t["delete"](r)), e;\n  }\n\n  function x(t) {\n    return null !== t && "object" == _typeof(t) ? t.valueOf() : t;\n  }\n\n  function w(t) {\n    return t;\n  }\n\n  function M(t) {\n    for (var _len = arguments.length, n = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      n[_key - 1] = arguments[_key];\n    }\n\n    return S(t, w, w, n);\n  }\n\n  function A(t, n) {\n    for (var _len2 = arguments.length, e = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      e[_key2 - 2] = arguments[_key2];\n    }\n\n    return S(t, w, n, e);\n  }\n\n  function T(t) {\n    if (1 !== t.length) throw new Error("duplicate key");\n    return t[0];\n  }\n\n  function S(t, n, e, r) {\n    return function t(i, o) {\n      if (o >= r.length) return e(i);\n      var a = new y(),\n          u = r[o++];\n      var c = -1;\n\n      var _iterator9 = _createForOfIteratorHelper(i),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _t2 = _step9.value;\n\n          var _n7 = u(_t2, ++c, i),\n              _e4 = a.get(_n7);\n\n          _e4 ? _e4.push(_t2) : a.set(_n7, [_t2]);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      var _iterator10 = _createForOfIteratorHelper(a),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var _step10$value = _slicedToArray(_step10.value, 2),\n              _n8 = _step10$value[0],\n              _e5 = _step10$value[1];\n\n          a.set(_n8, t(_e5, o));\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      return n(a);\n    }(t, 0);\n  }\n\n  function E(t, n) {\n    return Array.from(n, function (n) {\n      return t[n];\n    });\n  }\n\n  function k(t) {\n    for (var _len3 = arguments.length, e = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      e[_key3 - 1] = arguments[_key3];\n    }\n\n    if ("function" != typeof t[Symbol.iterator]) throw new TypeError("values is not iterable");\n    t = Array.from(t);\n\n    var _e6 = e,\n        _e7 = _slicedToArray(_e6, 1),\n        _e7$ = _e7[0],\n        r = _e7$ === void 0 ? n : _e7$;\n\n    if (1 === r.length || e.length > 1) {\n      var _i5 = Uint32Array.from(t, function (t, n) {\n        return n;\n      });\n\n      return e.length > 1 ? (e = e.map(function (n) {\n        return t.map(n);\n      }), _i5.sort(function (t, r) {\n        var _iterator11 = _createForOfIteratorHelper(e),\n            _step11;\n\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var _i6 = _step11.value;\n\n            var _e8 = n(_i6[t], _i6[r]);\n\n            if (_e8) return _e8;\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      })) : (r = t.map(r), _i5.sort(function (t, e) {\n        return n(r[t], r[e]);\n      })), E(t, _i5);\n    }\n\n    return t.sort(r);\n  }\n\n  var N = Array.prototype.slice;\n\n  function C(t) {\n    return function () {\n      return t;\n    };\n  }\n\n  var P = Math.sqrt(50),\n      z = Math.sqrt(10),\n      D = Math.sqrt(2);\n\n  function q(t, n, e) {\n    var r,\n        i,\n        o,\n        a,\n        u = -1;\n    if (e = +e, (t = +t) === (n = +n) && e > 0) return [t];\n    if ((r = n < t) && (i = t, t = n, n = i), 0 === (a = R(t, n, e)) || !isFinite(a)) return [];\n\n    if (a > 0) {\n      var _e9 = Math.round(t / a),\n          _r4 = Math.round(n / a);\n\n      for (_e9 * a < t && ++_e9, _r4 * a > n && --_r4, o = new Array(i = _r4 - _e9 + 1); ++u < i;) {\n        o[u] = (_e9 + u) * a;\n      }\n    } else {\n      a = -a;\n\n      var _e10 = Math.round(t * a),\n          _r5 = Math.round(n * a);\n\n      for (_e10 / a < t && ++_e10, _r5 / a > n && --_r5, o = new Array(i = _r5 - _e10 + 1); ++u < i;) {\n        o[u] = (_e10 + u) / a;\n      }\n    }\n\n    return r && o.reverse(), o;\n  }\n\n  function R(t, n, e) {\n    var r = (n - t) / Math.max(0, e),\n        i = Math.floor(Math.log(r) / Math.LN10),\n        o = r / Math.pow(10, i);\n    return i >= 0 ? (o >= P ? 10 : o >= z ? 5 : o >= D ? 2 : 1) * Math.pow(10, i) : -Math.pow(10, -i) / (o >= P ? 10 : o >= z ? 5 : o >= D ? 2 : 1);\n  }\n\n  function F(t, n, e) {\n    var r = Math.abs(n - t) / Math.max(0, e),\n        i = Math.pow(10, Math.floor(Math.log(r) / Math.LN10)),\n        o = r / i;\n    return o >= P ? i *= 10 : o >= z ? i *= 5 : o >= D && (i *= 2), n < t ? -i : i;\n  }\n\n  function O(t, n, e) {\n    var r;\n\n    for (;;) {\n      var _i7 = R(t, n, e);\n\n      if (_i7 === r || 0 === _i7 || !isFinite(_i7)) return [t, n];\n      _i7 > 0 ? (t = Math.floor(t / _i7) * _i7, n = Math.ceil(n / _i7) * _i7) : _i7 < 0 && (t = Math.ceil(t * _i7) / _i7, n = Math.floor(n * _i7) / _i7), r = _i7;\n    }\n  }\n\n  function U(t) {\n    return Math.ceil(Math.log(c(t)) / Math.LN2) + 1;\n  }\n\n  function I() {\n    var t = w,\n        n = p,\n        e = U;\n\n    function r(r) {\n      Array.isArray(r) || (r = Array.from(r));\n      var i,\n          a,\n          u = r.length,\n          c = new Array(u);\n\n      for (i = 0; i < u; ++i) {\n        c[i] = t(r[i], i, r);\n      }\n\n      var f = n(c),\n          s = f[0],\n          l = f[1],\n          h = e(c, s, l);\n\n      if (!Array.isArray(h)) {\n        var _O, _O2;\n\n        var _t3 = l,\n            _e11 = +h;\n\n        if (n === p && (_O = O(s, l, _e11), _O2 = _slicedToArray(_O, 2), s = _O2[0], l = _O2[1], _O), (h = q(s, l, _e11))[h.length - 1] >= l) if (_t3 >= l && n === p) {\n          var _t4 = R(s, l, _e11);\n\n          isFinite(_t4) && (_t4 > 0 ? l = (Math.floor(l / _t4) + 1) * _t4 : _t4 < 0 && (l = (Math.ceil(l * -_t4) + 1) / -_t4));\n        } else h.pop();\n      }\n\n      for (var d = h.length; h[0] <= s;) {\n        h.shift(), --d;\n      }\n\n      for (; h[d - 1] > l;) {\n        h.pop(), --d;\n      }\n\n      var g,\n          y = new Array(d + 1);\n\n      for (i = 0; i <= d; ++i) {\n        (g = y[i] = []).x0 = i > 0 ? h[i - 1] : s, g.x1 = i < d ? h[i] : l;\n      }\n\n      for (i = 0; i < u; ++i) {\n        s <= (a = c[i]) && a <= l && y[o(h, a, 0, d)].push(r[i]);\n      }\n\n      return y;\n    }\n\n    return r.value = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : C(n), r) : t;\n    }, r.domain = function (t) {\n      return arguments.length ? (n = "function" == typeof t ? t : C([t[0], t[1]]), r) : n;\n    }, r.thresholds = function (t) {\n      return arguments.length ? (e = "function" == typeof t ? t : Array.isArray(t) ? C(N.call(t)) : C(t), r) : e;\n    }, r;\n  }\n\n  function B(t, n) {\n    var e;\n\n    if (void 0 === n) {\n      var _iterator12 = _createForOfIteratorHelper(t),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var _n9 = _step12.value;\n          null != _n9 && (e < _n9 || void 0 === e && _n9 >= _n9) && (e = _n9);\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n    } else {\n      var _r6 = -1;\n\n      var _iterator13 = _createForOfIteratorHelper(t),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _i8 = _step13.value;\n          null != (_i8 = n(_i8, ++_r6, t)) && (e < _i8 || void 0 === e && _i8 >= _i8) && (e = _i8);\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n    }\n\n    return e;\n  }\n\n  function Y(t, n) {\n    var e;\n\n    if (void 0 === n) {\n      var _iterator14 = _createForOfIteratorHelper(t),\n          _step14;\n\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var _n10 = _step14.value;\n          null != _n10 && (e > _n10 || void 0 === e && _n10 >= _n10) && (e = _n10);\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n    } else {\n      var _r7 = -1;\n\n      var _iterator15 = _createForOfIteratorHelper(t),\n          _step15;\n\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var _i9 = _step15.value;\n          null != (_i9 = n(_i9, ++_r7, t)) && (e > _i9 || void 0 === e && _i9 >= _i9) && (e = _i9);\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n    }\n\n    return e;\n  }\n\n  function L(t, e) {\n    var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : t.length - 1;\n    var o = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : n;\n\n    for (; i > r;) {\n      if (i - r > 600) {\n        var _n12 = i - r + 1,\n            _a5 = e - r + 1,\n            _u4 = Math.log(_n12),\n            _c2 = .5 * Math.exp(2 * _u4 / 3),\n            _f2 = .5 * Math.sqrt(_u4 * _c2 * (_n12 - _c2) / _n12) * (_a5 - _n12 / 2 < 0 ? -1 : 1);\n\n        L(t, e, Math.max(r, Math.floor(e - _a5 * _c2 / _n12 + _f2)), Math.min(i, Math.floor(e + (_n12 - _a5) * _c2 / _n12 + _f2)), o);\n      }\n\n      var _n11 = t[e];\n      var _a4 = r,\n          _u3 = i;\n\n      for (j(t, r, e), o(t[i], _n11) > 0 && j(t, r, i); _a4 < _u3;) {\n        for (j(t, _a4, _u3), ++_a4, --_u3; o(t[_a4], _n11) < 0;) {\n          ++_a4;\n        }\n\n        for (; o(t[_u3], _n11) > 0;) {\n          --_u3;\n        }\n      }\n\n      0 === o(t[r], _n11) ? j(t, r, _u3) : (++_u3, j(t, _u3, i)), _u3 <= e && (r = _u3 + 1), e <= _u3 && (i = _u3 - 1);\n    }\n\n    return t;\n  }\n\n  function j(t, n, e) {\n    var r = t[n];\n    t[n] = t[e], t[e] = r;\n  }\n\n  function H(t, n, e) {\n    if (r = (t = Float64Array.from( /*#__PURE__*/regenerator_default().mark(function _callee(t, n) {\n      var _iterator16, _step16, _n13, _e12, _iterator17, _step17, _r8;\n\n      return regenerator_default().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(void 0 === n)) {\n                _context.next = 22;\n                break;\n              }\n\n              _iterator16 = _createForOfIteratorHelper(t);\n              _context.prev = 2;\n\n              _iterator16.s();\n\n            case 4:\n              if ((_step16 = _iterator16.n()).done) {\n                _context.next = 12;\n                break;\n              }\n\n              _n13 = _step16.value;\n              _context.t0 = null != _n13 && (_n13 = +_n13) >= _n13;\n\n              if (!_context.t0) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 10;\n              return _n13;\n\n            case 10:\n              _context.next = 4;\n              break;\n\n            case 12:\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t1 = _context["catch"](2);\n\n              _iterator16.e(_context.t1);\n\n            case 17:\n              _context.prev = 17;\n\n              _iterator16.f();\n\n              return _context.finish(17);\n\n            case 20:\n              _context.next = 42;\n              break;\n\n            case 22:\n              _e12 = -1;\n              _iterator17 = _createForOfIteratorHelper(t);\n              _context.prev = 24;\n\n              _iterator17.s();\n\n            case 26:\n              if ((_step17 = _iterator17.n()).done) {\n                _context.next = 34;\n                break;\n              }\n\n              _r8 = _step17.value;\n              _context.t2 = null != (_r8 = n(_r8, ++_e12, t)) && (_r8 = +_r8) >= _r8;\n\n              if (!_context.t2) {\n                _context.next = 32;\n                break;\n              }\n\n              _context.next = 32;\n              return _r8;\n\n            case 32:\n              _context.next = 26;\n              break;\n\n            case 34:\n              _context.next = 39;\n              break;\n\n            case 36:\n              _context.prev = 36;\n              _context.t3 = _context["catch"](24);\n\n              _iterator17.e(_context.t3);\n\n            case 39:\n              _context.prev = 39;\n\n              _iterator17.f();\n\n              return _context.finish(39);\n\n            case 42:\n            case "end":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 14, 17, 20], [24, 36, 39, 42]]);\n    })(t, e))).length) {\n      if ((n = +n) <= 0 || r < 2) return Y(t);\n      if (n >= 1) return B(t);\n      var r,\n          i = (r - 1) * n,\n          o = Math.floor(i),\n          a = B(L(t, o).subarray(0, o + 1));\n      return a + (Y(t.subarray(o + 1)) - a) * (i - o);\n    }\n  }\n\n  function X(t, n) {\n    var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : r;\n\n    if (i = t.length) {\n      if ((n = +n) <= 0 || i < 2) return +e(t[0], 0, t);\n      if (n >= 1) return +e(t[i - 1], i - 1, t);\n      var i,\n          o = (i - 1) * n,\n          a = Math.floor(o),\n          u = +e(t[a], a, t);\n      return u + (+e(t[a + 1], a + 1, t) - u) * (o - a);\n    }\n  }\n\n  function G(t, n) {\n    var e,\n        r = -1,\n        i = -1;\n\n    if (void 0 === n) {\n      var _iterator18 = _createForOfIteratorHelper(t),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var _n14 = _step18.value;\n          ++i, null != _n14 && (e < _n14 || void 0 === e && _n14 >= _n14) && (e = _n14, r = i);\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n    } else {\n      var _iterator19 = _createForOfIteratorHelper(t),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var _o6 = _step19.value;\n          null != (_o6 = n(_o6, ++i, t)) && (e < _o6 || void 0 === e && _o6 >= _o6) && (e = _o6, r = i);\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n    }\n\n    return r;\n  }\n\n  function V(t) {\n    return Array.from( /*#__PURE__*/regenerator_default().mark(function _callee2(t) {\n      var _iterator20, _step20, _n15;\n\n      return regenerator_default().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iterator20 = _createForOfIteratorHelper(t);\n              _context2.prev = 1;\n\n              _iterator20.s();\n\n            case 3:\n              if ((_step20 = _iterator20.n()).done) {\n                _context2.next = 8;\n                break;\n              }\n\n              _n15 = _step20.value;\n              return _context2.delegateYield(_n15, "t0", 6);\n\n            case 6:\n              _context2.next = 3;\n              break;\n\n            case 8:\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t1 = _context2["catch"](1);\n\n              _iterator20.e(_context2.t1);\n\n            case 13:\n              _context2.prev = 13;\n\n              _iterator20.f();\n\n              return _context2.finish(13);\n\n            case 16:\n            case "end":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 10, 13, 16]]);\n    })(t));\n  }\n\n  function $(t, n) {\n    var e,\n        r = -1,\n        i = -1;\n\n    if (void 0 === n) {\n      var _iterator21 = _createForOfIteratorHelper(t),\n          _step21;\n\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n          var _n16 = _step21.value;\n          ++i, null != _n16 && (e > _n16 || void 0 === e && _n16 >= _n16) && (e = _n16, r = i);\n        }\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n    } else {\n      var _iterator22 = _createForOfIteratorHelper(t),\n          _step22;\n\n      try {\n        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n          var _o7 = _step22.value;\n          null != (_o7 = n(_o7, ++i, t)) && (e > _o7 || void 0 === e && _o7 >= _o7) && (e = _o7, r = i);\n        }\n      } catch (err) {\n        _iterator22.e(err);\n      } finally {\n        _iterator22.f();\n      }\n    }\n\n    return r;\n  }\n\n  function W(t, n) {\n    return [t, n];\n  }\n\n  function Z(t, n, e) {\n    t = +t, n = +n, e = (i = arguments.length) < 2 ? (n = t, t = 0, 1) : i < 3 ? 1 : +e;\n\n    for (var r = -1, i = 0 | Math.max(0, Math.ceil((n - t) / e)), o = new Array(i); ++r < i;) {\n      o[r] = t + r * e;\n    }\n\n    return o;\n  }\n\n  function K(t) {\n    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : n;\n    if (1 === e.length) return $(t, e);\n    var r,\n        i = -1,\n        o = -1;\n\n    var _iterator23 = _createForOfIteratorHelper(t),\n        _step23;\n\n    try {\n      for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n        var _n17 = _step23.value;\n        ++o, (i < 0 ? 0 === e(_n17, _n17) : e(_n17, r) < 0) && (r = _n17, i = o);\n      }\n    } catch (err) {\n      _iterator23.e(err);\n    } finally {\n      _iterator23.f();\n    }\n\n    return i;\n  }\n\n  var Q = J(Math.random);\n\n  function J(t) {\n    return function (n) {\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : n.length;\n      var i = r - (e = +e);\n\n      for (; i;) {\n        var _r9 = t() * i-- | 0,\n            _o8 = n[i + e];\n\n        n[i + e] = n[_r9 + e], n[_r9 + e] = _o8;\n      }\n\n      return n;\n    };\n  }\n\n  function tt(t) {\n    if (!(i = t.length)) return [];\n\n    for (var n = -1, e = Y(t, nt), r = new Array(e); ++n < e;) {\n      for (var i, o = -1, a = r[n] = new Array(i); ++o < i;) {\n        a[o] = t[o][n];\n      }\n    }\n\n    return r;\n  }\n\n  function nt(t) {\n    return t.length;\n  }\n\n  function et(t) {\n    return t instanceof Set ? t : new Set(t);\n  }\n\n  function rt(t, n) {\n    var e = t[Symbol.iterator](),\n        r = new Set();\n\n    var _iterator24 = _createForOfIteratorHelper(n),\n        _step24;\n\n    try {\n      for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n        var _t5 = _step24.value;\n        if (r.has(_t5)) continue;\n\n        var _n18 = void 0,\n            _i10 = void 0;\n\n        for (; _e$next = e.next(), _n18 = _e$next.value, _i10 = _e$next.done, _e$next;) {\n          var _e$next;\n\n          if (_i10) return !1;\n          if (r.add(_n18), Object.is(_t5, _n18)) break;\n        }\n      }\n    } catch (err) {\n      _iterator24.e(err);\n    } finally {\n      _iterator24.f();\n    }\n\n    return !0;\n  }\n\n  var it = Array.prototype.slice;\n\n  function ot(t) {\n    return t;\n  }\n\n  var at = 1e-6;\n\n  function ut(t) {\n    return "translate(" + t + ",0)";\n  }\n\n  function ct(t) {\n    return "translate(0," + t + ")";\n  }\n\n  function ft(t) {\n    return function (n) {\n      return +t(n);\n    };\n  }\n\n  function st(t, n) {\n    return n = Math.max(0, t.bandwidth() - 2 * n) / 2, t.round() && (n = Math.round(n)), function (e) {\n      return +t(e) + n;\n    };\n  }\n\n  function lt() {\n    return !this.__axis;\n  }\n\n  function ht(t, n) {\n    var e = [],\n        r = null,\n        i = null,\n        o = 6,\n        a = 6,\n        u = 3,\n        c = "undefined" != typeof window && window.devicePixelRatio > 1 ? 0 : .5,\n        f = 1 === t || 4 === t ? -1 : 1,\n        s = 4 === t || 2 === t ? "x" : "y",\n        l = 1 === t || 3 === t ? ut : ct;\n\n    function h(h) {\n      var d = null == r ? n.ticks ? n.ticks.apply(n, e) : n.domain() : r,\n          p = null == i ? n.tickFormat ? n.tickFormat.apply(n, e) : ot : i,\n          g = Math.max(o, 0) + u,\n          y = n.range(),\n          v = +y[0] + c,\n          _ = +y[y.length - 1] + c,\n          b = (n.bandwidth ? st : ft)(n.copy(), c),\n          m = h.selection ? h.selection() : h,\n          x = m.selectAll(".domain").data([null]),\n          w = m.selectAll(".tick").data(d, n).order(),\n          M = w.exit(),\n          A = w.enter().append("g").attr("class", "tick"),\n          T = w.select("line"),\n          S = w.select("text");\n\n      x = x.merge(x.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor")), w = w.merge(A), T = T.merge(A.append("line").attr("stroke", "currentColor").attr(s + "2", f * o)), S = S.merge(A.append("text").attr("fill", "currentColor").attr(s, f * g).attr("dy", 1 === t ? "0em" : 3 === t ? "0.71em" : "0.32em")), h !== m && (x = x.transition(h), w = w.transition(h), T = T.transition(h), S = S.transition(h), M = M.transition(h).attr("opacity", at).attr("transform", function (t) {\n        return isFinite(t = b(t)) ? l(t + c) : this.getAttribute("transform");\n      }), A.attr("opacity", at).attr("transform", function (t) {\n        var n = this.parentNode.__axis;\n        return l((n && isFinite(n = n(t)) ? n : b(t)) + c);\n      })), M.remove(), x.attr("d", 4 === t || 2 === t ? a ? "M" + f * a + "," + v + "H" + c + "V" + _ + "H" + f * a : "M" + c + "," + v + "V" + _ : a ? "M" + v + "," + f * a + "V" + c + "H" + _ + "V" + f * a : "M" + v + "," + c + "H" + _), w.attr("opacity", 1).attr("transform", function (t) {\n        return l(b(t) + c);\n      }), T.attr(s + "2", f * o), S.attr(s, f * g).text(p), m.filter(lt).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", 2 === t ? "start" : 4 === t ? "end" : "middle"), m.each(function () {\n        this.__axis = b;\n      });\n    }\n\n    return h.scale = function (t) {\n      return arguments.length ? (n = t, h) : n;\n    }, h.ticks = function () {\n      return e = it.call(arguments), h;\n    }, h.tickArguments = function (t) {\n      return arguments.length ? (e = null == t ? [] : it.call(t), h) : e.slice();\n    }, h.tickValues = function (t) {\n      return arguments.length ? (r = null == t ? null : it.call(t), h) : r && r.slice();\n    }, h.tickFormat = function (t) {\n      return arguments.length ? (i = t, h) : i;\n    }, h.tickSize = function (t) {\n      return arguments.length ? (o = a = +t, h) : o;\n    }, h.tickSizeInner = function (t) {\n      return arguments.length ? (o = +t, h) : o;\n    }, h.tickSizeOuter = function (t) {\n      return arguments.length ? (a = +t, h) : a;\n    }, h.tickPadding = function (t) {\n      return arguments.length ? (u = +t, h) : u;\n    }, h.offset = function (t) {\n      return arguments.length ? (c = +t, h) : c;\n    }, h;\n  }\n\n  var dt = {\n    value: function value() {}\n  };\n\n  function pt() {\n    for (var t, n = 0, e = arguments.length, r = {}; n < e; ++n) {\n      if (!(t = arguments[n] + "") || t in r || /[\\s.]/.test(t)) throw new Error("illegal type: " + t);\n      r[t] = [];\n    }\n\n    return new gt(r);\n  }\n\n  function gt(t) {\n    this._ = t;\n  }\n\n  function yt(t, n) {\n    return t.trim().split(/^|\\s+/).map(function (t) {\n      var e = "",\n          r = t.indexOf(".");\n      if (r >= 0 && (e = t.slice(r + 1), t = t.slice(0, r)), t && !n.hasOwnProperty(t)) throw new Error("unknown type: " + t);\n      return {\n        type: t,\n        name: e\n      };\n    });\n  }\n\n  function vt(t, n) {\n    for (var e, r = 0, i = t.length; r < i; ++r) {\n      if ((e = t[r]).name === n) return e.value;\n    }\n  }\n\n  function _t(t, n, e) {\n    for (var r = 0, i = t.length; r < i; ++r) {\n      if (t[r].name === n) {\n        t[r] = dt, t = t.slice(0, r).concat(t.slice(r + 1));\n        break;\n      }\n    }\n\n    return null != e && t.push({\n      name: n,\n      value: e\n    }), t;\n  }\n\n  gt.prototype = pt.prototype = {\n    constructor: gt,\n    on: function on(t, n) {\n      var e,\n          r = this._,\n          i = yt(t + "", r),\n          o = -1,\n          a = i.length;\n\n      if (!(arguments.length < 2)) {\n        if (null != n && "function" != typeof n) throw new Error("invalid callback: " + n);\n\n        for (; ++o < a;) {\n          if (e = (t = i[o]).type) r[e] = _t(r[e], t.name, n);else if (null == n) for (e in r) {\n            r[e] = _t(r[e], t.name, null);\n          }\n        }\n\n        return this;\n      }\n\n      for (; ++o < a;) {\n        if ((e = (t = i[o]).type) && (e = vt(r[e], t.name))) return e;\n      }\n    },\n    copy: function copy() {\n      var t = {},\n          n = this._;\n\n      for (var e in n) {\n        t[e] = n[e].slice();\n      }\n\n      return new gt(t);\n    },\n    call: function call(t, n) {\n      if ((e = arguments.length - 2) > 0) for (var e, r, i = new Array(e), o = 0; o < e; ++o) {\n        i[o] = arguments[o + 2];\n      }\n      if (!this._.hasOwnProperty(t)) throw new Error("unknown type: " + t);\n\n      for (o = 0, e = (r = this._[t]).length; o < e; ++o) {\n        r[o].value.apply(n, i);\n      }\n    },\n    apply: function apply(t, n, e) {\n      if (!this._.hasOwnProperty(t)) throw new Error("unknown type: " + t);\n\n      for (var r = this._[t], i = 0, o = r.length; i < o; ++i) {\n        r[i].value.apply(n, e);\n      }\n    }\n  };\n  var bt = "http://www.w3.org/1999/xhtml",\n      mt = {\n    svg: "http://www.w3.org/2000/svg",\n    xhtml: bt,\n    xlink: "http://www.w3.org/1999/xlink",\n    xml: "http://www.w3.org/XML/1998/namespace",\n    xmlns: "http://www.w3.org/2000/xmlns/"\n  };\n\n  function xt(t) {\n    var n = t += "",\n        e = n.indexOf(":");\n    return e >= 0 && "xmlns" !== (n = t.slice(0, e)) && (t = t.slice(e + 1)), mt.hasOwnProperty(n) ? {\n      space: mt[n],\n      local: t\n    } : t;\n  }\n\n  function wt(t) {\n    return function () {\n      var n = this.ownerDocument,\n          e = this.namespaceURI;\n      return e === bt && n.documentElement.namespaceURI === bt ? n.createElement(t) : n.createElementNS(e, t);\n    };\n  }\n\n  function Mt(t) {\n    return function () {\n      return this.ownerDocument.createElementNS(t.space, t.local);\n    };\n  }\n\n  function At(t) {\n    var n = xt(t);\n    return (n.local ? Mt : wt)(n);\n  }\n\n  function Tt() {}\n\n  function St(t) {\n    return null == t ? Tt : function () {\n      return this.querySelector(t);\n    };\n  }\n\n  function Et(t) {\n    return "object" == _typeof(t) && "length" in t ? t : Array.from(t);\n  }\n\n  function kt() {\n    return [];\n  }\n\n  function Nt(t) {\n    return null == t ? kt : function () {\n      return this.querySelectorAll(t);\n    };\n  }\n\n  function Ct(t) {\n    return function () {\n      return this.matches(t);\n    };\n  }\n\n  function Pt(t) {\n    return function (n) {\n      return n.matches(t);\n    };\n  }\n\n  var zt = Array.prototype.find;\n\n  function Dt() {\n    return this.firstElementChild;\n  }\n\n  var qt = Array.prototype.filter;\n\n  function Rt() {\n    return this.children;\n  }\n\n  function Ft(t) {\n    return new Array(t.length);\n  }\n\n  function Ot(t, n) {\n    this.ownerDocument = t.ownerDocument, this.namespaceURI = t.namespaceURI, this._next = null, this._parent = t, this.__data__ = n;\n  }\n\n  function Ut(t) {\n    return function () {\n      return t;\n    };\n  }\n\n  function It(t, n, e, r, i, o) {\n    for (var a, u = 0, c = n.length, f = o.length; u < f; ++u) {\n      (a = n[u]) ? (a.__data__ = o[u], r[u] = a) : e[u] = new Ot(t, o[u]);\n    }\n\n    for (; u < c; ++u) {\n      (a = n[u]) && (i[u] = a);\n    }\n  }\n\n  function Bt(t, n, e, r, i, o, a) {\n    var u,\n        c,\n        f,\n        s = new Map(),\n        l = n.length,\n        h = o.length,\n        d = new Array(l);\n\n    for (u = 0; u < l; ++u) {\n      (c = n[u]) && (d[u] = f = a.call(c, c.__data__, u, n) + "", s.has(f) ? i[u] = c : s.set(f, c));\n    }\n\n    for (u = 0; u < h; ++u) {\n      f = a.call(t, o[u], u, o) + "", (c = s.get(f)) ? (r[u] = c, c.__data__ = o[u], s["delete"](f)) : e[u] = new Ot(t, o[u]);\n    }\n\n    for (u = 0; u < l; ++u) {\n      (c = n[u]) && s.get(d[u]) === c && (i[u] = c);\n    }\n  }\n\n  function Yt(t) {\n    return t.__data__;\n  }\n\n  function Lt(t, n) {\n    return t < n ? -1 : t > n ? 1 : t >= n ? 0 : NaN;\n  }\n\n  function jt(t) {\n    return function () {\n      this.removeAttribute(t);\n    };\n  }\n\n  function Ht(t) {\n    return function () {\n      this.removeAttributeNS(t.space, t.local);\n    };\n  }\n\n  function Xt(t, n) {\n    return function () {\n      this.setAttribute(t, n);\n    };\n  }\n\n  function Gt(t, n) {\n    return function () {\n      this.setAttributeNS(t.space, t.local, n);\n    };\n  }\n\n  function Vt(t, n) {\n    return function () {\n      var e = n.apply(this, arguments);\n      null == e ? this.removeAttribute(t) : this.setAttribute(t, e);\n    };\n  }\n\n  function $t(t, n) {\n    return function () {\n      var e = n.apply(this, arguments);\n      null == e ? this.removeAttributeNS(t.space, t.local) : this.setAttributeNS(t.space, t.local, e);\n    };\n  }\n\n  function Wt(t) {\n    return t.ownerDocument && t.ownerDocument.defaultView || t.document && t || t.defaultView;\n  }\n\n  function Zt(t) {\n    return function () {\n      this.style.removeProperty(t);\n    };\n  }\n\n  function Kt(t, n, e) {\n    return function () {\n      this.style.setProperty(t, n, e);\n    };\n  }\n\n  function Qt(t, n, e) {\n    return function () {\n      var r = n.apply(this, arguments);\n      null == r ? this.style.removeProperty(t) : this.style.setProperty(t, r, e);\n    };\n  }\n\n  function Jt(t, n) {\n    return t.style.getPropertyValue(n) || Wt(t).getComputedStyle(t, null).getPropertyValue(n);\n  }\n\n  function tn(t) {\n    return function () {\n      delete this[t];\n    };\n  }\n\n  function nn(t, n) {\n    return function () {\n      this[t] = n;\n    };\n  }\n\n  function en(t, n) {\n    return function () {\n      var e = n.apply(this, arguments);\n      null == e ? delete this[t] : this[t] = e;\n    };\n  }\n\n  function rn(t) {\n    return t.trim().split(/^|\\s+/);\n  }\n\n  function on(t) {\n    return t.classList || new an(t);\n  }\n\n  function an(t) {\n    this._node = t, this._names = rn(t.getAttribute("class") || "");\n  }\n\n  function un(t, n) {\n    for (var e = on(t), r = -1, i = n.length; ++r < i;) {\n      e.add(n[r]);\n    }\n  }\n\n  function cn(t, n) {\n    for (var e = on(t), r = -1, i = n.length; ++r < i;) {\n      e.remove(n[r]);\n    }\n  }\n\n  function fn(t) {\n    return function () {\n      un(this, t);\n    };\n  }\n\n  function sn(t) {\n    return function () {\n      cn(this, t);\n    };\n  }\n\n  function ln(t, n) {\n    return function () {\n      (n.apply(this, arguments) ? un : cn)(this, t);\n    };\n  }\n\n  function hn() {\n    this.textContent = "";\n  }\n\n  function dn(t) {\n    return function () {\n      this.textContent = t;\n    };\n  }\n\n  function pn(t) {\n    return function () {\n      var n = t.apply(this, arguments);\n      this.textContent = null == n ? "" : n;\n    };\n  }\n\n  function gn() {\n    this.innerHTML = "";\n  }\n\n  function yn(t) {\n    return function () {\n      this.innerHTML = t;\n    };\n  }\n\n  function vn(t) {\n    return function () {\n      var n = t.apply(this, arguments);\n      this.innerHTML = null == n ? "" : n;\n    };\n  }\n\n  function _n() {\n    this.nextSibling && this.parentNode.appendChild(this);\n  }\n\n  function bn() {\n    this.previousSibling && this.parentNode.insertBefore(this, this.parentNode.firstChild);\n  }\n\n  function mn() {\n    return null;\n  }\n\n  function xn() {\n    var t = this.parentNode;\n    t && t.removeChild(this);\n  }\n\n  function wn() {\n    var t = this.cloneNode(!1),\n        n = this.parentNode;\n    return n ? n.insertBefore(t, this.nextSibling) : t;\n  }\n\n  function Mn() {\n    var t = this.cloneNode(!0),\n        n = this.parentNode;\n    return n ? n.insertBefore(t, this.nextSibling) : t;\n  }\n\n  function An(t) {\n    return t.trim().split(/^|\\s+/).map(function (t) {\n      var n = "",\n          e = t.indexOf(".");\n      return e >= 0 && (n = t.slice(e + 1), t = t.slice(0, e)), {\n        type: t,\n        name: n\n      };\n    });\n  }\n\n  function Tn(t) {\n    return function () {\n      var n = this.__on;\n\n      if (n) {\n        for (var e, r = 0, i = -1, o = n.length; r < o; ++r) {\n          e = n[r], t.type && e.type !== t.type || e.name !== t.name ? n[++i] = e : this.removeEventListener(e.type, e.listener, e.options);\n        }\n\n        ++i ? n.length = i : delete this.__on;\n      }\n    };\n  }\n\n  function Sn(t, n, e) {\n    return function () {\n      var r,\n          i = this.__on,\n          o = function (t) {\n        return function (n) {\n          t.call(this, n, this.__data__);\n        };\n      }(n);\n\n      if (i) for (var a = 0, u = i.length; a < u; ++a) {\n        if ((r = i[a]).type === t.type && r.name === t.name) return this.removeEventListener(r.type, r.listener, r.options), this.addEventListener(r.type, r.listener = o, r.options = e), void (r.value = n);\n      }\n      this.addEventListener(t.type, o, e), r = {\n        type: t.type,\n        name: t.name,\n        value: n,\n        listener: o,\n        options: e\n      }, i ? i.push(r) : this.__on = [r];\n    };\n  }\n\n  function En(t, n, e) {\n    var r = Wt(t),\n        i = r.CustomEvent;\n    "function" == typeof i ? i = new i(n, e) : (i = r.document.createEvent("Event"), e ? (i.initEvent(n, e.bubbles, e.cancelable), i.detail = e.detail) : i.initEvent(n, !1, !1)), t.dispatchEvent(i);\n  }\n\n  function kn(t, n) {\n    return function () {\n      return En(this, t, n);\n    };\n  }\n\n  function Nn(t, n) {\n    return function () {\n      return En(this, t, n.apply(this, arguments));\n    };\n  }\n\n  Ot.prototype = {\n    constructor: Ot,\n    appendChild: function appendChild(t) {\n      return this._parent.insertBefore(t, this._next);\n    },\n    insertBefore: function insertBefore(t, n) {\n      return this._parent.insertBefore(t, n);\n    },\n    querySelector: function querySelector(t) {\n      return this._parent.querySelector(t);\n    },\n    querySelectorAll: function querySelectorAll(t) {\n      return this._parent.querySelectorAll(t);\n    }\n  }, an.prototype = {\n    add: function add(t) {\n      this._names.indexOf(t) < 0 && (this._names.push(t), this._node.setAttribute("class", this._names.join(" ")));\n    },\n    remove: function remove(t) {\n      var n = this._names.indexOf(t);\n\n      n >= 0 && (this._names.splice(n, 1), this._node.setAttribute("class", this._names.join(" ")));\n    },\n    contains: function contains(t) {\n      return this._names.indexOf(t) >= 0;\n    }\n  };\n  var Cn = [null];\n\n  function Pn(t, n) {\n    this._groups = t, this._parents = n;\n  }\n\n  function zn() {\n    return new Pn([[document.documentElement]], Cn);\n  }\n\n  function Dn(t) {\n    return "string" == typeof t ? new Pn([[document.querySelector(t)]], [document.documentElement]) : new Pn([[t]], Cn);\n  }\n\n  Pn.prototype = zn.prototype = _defineProperty({\n    constructor: Pn,\n    select: function select(t) {\n      "function" != typeof t && (t = St(t));\n\n      for (var n = this._groups, e = n.length, r = new Array(e), i = 0; i < e; ++i) {\n        for (var o, a, u = n[i], c = u.length, f = r[i] = new Array(c), s = 0; s < c; ++s) {\n          (o = u[s]) && (a = t.call(o, o.__data__, s, u)) && ("__data__" in o && (a.__data__ = o.__data__), f[s] = a);\n        }\n      }\n\n      return new Pn(r, this._parents);\n    },\n    selectAll: function selectAll(t) {\n      t = "function" == typeof t ? function (t) {\n        return function () {\n          var n = t.apply(this, arguments);\n          return null == n ? [] : Et(n);\n        };\n      }(t) : Nt(t);\n\n      for (var n = this._groups, e = n.length, r = [], i = [], o = 0; o < e; ++o) {\n        for (var a, u = n[o], c = u.length, f = 0; f < c; ++f) {\n          (a = u[f]) && (r.push(t.call(a, a.__data__, f, u)), i.push(a));\n        }\n      }\n\n      return new Pn(r, i);\n    },\n    selectChild: function selectChild(t) {\n      return this.select(null == t ? Dt : function (t) {\n        return function () {\n          return zt.call(this.children, t);\n        };\n      }("function" == typeof t ? t : Pt(t)));\n    },\n    selectChildren: function selectChildren(t) {\n      return this.selectAll(null == t ? Rt : function (t) {\n        return function () {\n          return qt.call(this.children, t);\n        };\n      }("function" == typeof t ? t : Pt(t)));\n    },\n    filter: function filter(t) {\n      "function" != typeof t && (t = Ct(t));\n\n      for (var n = this._groups, e = n.length, r = new Array(e), i = 0; i < e; ++i) {\n        for (var o, a = n[i], u = a.length, c = r[i] = [], f = 0; f < u; ++f) {\n          (o = a[f]) && t.call(o, o.__data__, f, a) && c.push(o);\n        }\n      }\n\n      return new Pn(r, this._parents);\n    },\n    data: function data(t, n) {\n      if (!arguments.length) return Array.from(this, Yt);\n      var e = n ? Bt : It,\n          r = this._parents,\n          i = this._groups;\n      "function" != typeof t && (t = Ut(t));\n\n      for (var o = i.length, a = new Array(o), u = new Array(o), c = new Array(o), f = 0; f < o; ++f) {\n        var s = r[f],\n            l = i[f],\n            h = l.length,\n            d = Et(t.call(s, s && s.__data__, f, r)),\n            p = d.length,\n            g = u[f] = new Array(p),\n            y = a[f] = new Array(p),\n            v = c[f] = new Array(h);\n        e(s, l, g, y, v, d, n);\n\n        for (var _, b, m = 0, x = 0; m < p; ++m) {\n          if (_ = g[m]) {\n            for (m >= x && (x = m + 1); !(b = y[x]) && ++x < p;) {\n              ;\n            }\n\n            _._next = b || null;\n          }\n        }\n      }\n\n      return (a = new Pn(a, r))._enter = u, a._exit = c, a;\n    },\n    enter: function enter() {\n      return new Pn(this._enter || this._groups.map(Ft), this._parents);\n    },\n    exit: function exit() {\n      return new Pn(this._exit || this._groups.map(Ft), this._parents);\n    },\n    join: function join(t, n, e) {\n      var r = this.enter(),\n          i = this,\n          o = this.exit();\n      return r = "function" == typeof t ? t(r) : r.append(t + ""), null != n && (i = n(i)), null == e ? o.remove() : e(o), r && i ? r.merge(i).order() : i;\n    },\n    merge: function merge(t) {\n      if (!(t instanceof Pn)) throw new Error("invalid merge");\n\n      for (var n = this._groups, e = t._groups, r = n.length, i = e.length, o = Math.min(r, i), a = new Array(r), u = 0; u < o; ++u) {\n        for (var c, f = n[u], s = e[u], l = f.length, h = a[u] = new Array(l), d = 0; d < l; ++d) {\n          (c = f[d] || s[d]) && (h[d] = c);\n        }\n      }\n\n      for (; u < r; ++u) {\n        a[u] = n[u];\n      }\n\n      return new Pn(a, this._parents);\n    },\n    selection: function selection() {\n      return this;\n    },\n    order: function order() {\n      for (var t = this._groups, n = -1, e = t.length; ++n < e;) {\n        for (var r, i = t[n], o = i.length - 1, a = i[o]; --o >= 0;) {\n          (r = i[o]) && (a && 4 ^ r.compareDocumentPosition(a) && a.parentNode.insertBefore(r, a), a = r);\n        }\n      }\n\n      return this;\n    },\n    sort: function sort(t) {\n      function n(n, e) {\n        return n && e ? t(n.__data__, e.__data__) : !n - !e;\n      }\n\n      t || (t = Lt);\n\n      for (var e = this._groups, r = e.length, i = new Array(r), o = 0; o < r; ++o) {\n        for (var a, u = e[o], c = u.length, f = i[o] = new Array(c), s = 0; s < c; ++s) {\n          (a = u[s]) && (f[s] = a);\n        }\n\n        f.sort(n);\n      }\n\n      return new Pn(i, this._parents).order();\n    },\n    call: function call() {\n      var t = arguments[0];\n      return arguments[0] = this, t.apply(null, arguments), this;\n    },\n    nodes: function nodes() {\n      return Array.from(this);\n    },\n    node: function node() {\n      for (var t = this._groups, n = 0, e = t.length; n < e; ++n) {\n        for (var r = t[n], i = 0, o = r.length; i < o; ++i) {\n          var a = r[i];\n          if (a) return a;\n        }\n      }\n\n      return null;\n    },\n    size: function size() {\n      var t = 0;\n\n      var _iterator25 = _createForOfIteratorHelper(this),\n          _step25;\n\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var _n19 = _step25.value;\n          ++t;\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n\n      return t;\n    },\n    empty: function empty() {\n      return !this.node();\n    },\n    each: function each(t) {\n      for (var n = this._groups, e = 0, r = n.length; e < r; ++e) {\n        for (var i, o = n[e], a = 0, u = o.length; a < u; ++a) {\n          (i = o[a]) && t.call(i, i.__data__, a, o);\n        }\n      }\n\n      return this;\n    },\n    attr: function attr(t, n) {\n      var e = xt(t);\n\n      if (arguments.length < 2) {\n        var r = this.node();\n        return e.local ? r.getAttributeNS(e.space, e.local) : r.getAttribute(e);\n      }\n\n      return this.each((null == n ? e.local ? Ht : jt : "function" == typeof n ? e.local ? $t : Vt : e.local ? Gt : Xt)(e, n));\n    },\n    style: function style(t, n, e) {\n      return arguments.length > 1 ? this.each((null == n ? Zt : "function" == typeof n ? Qt : Kt)(t, n, null == e ? "" : e)) : Jt(this.node(), t);\n    },\n    property: function property(t, n) {\n      return arguments.length > 1 ? this.each((null == n ? tn : "function" == typeof n ? en : nn)(t, n)) : this.node()[t];\n    },\n    classed: function classed(t, n) {\n      var e = rn(t + "");\n\n      if (arguments.length < 2) {\n        for (var r = on(this.node()), i = -1, o = e.length; ++i < o;) {\n          if (!r.contains(e[i])) return !1;\n        }\n\n        return !0;\n      }\n\n      return this.each(("function" == typeof n ? ln : n ? fn : sn)(e, n));\n    },\n    text: function text(t) {\n      return arguments.length ? this.each(null == t ? hn : ("function" == typeof t ? pn : dn)(t)) : this.node().textContent;\n    },\n    html: function html(t) {\n      return arguments.length ? this.each(null == t ? gn : ("function" == typeof t ? vn : yn)(t)) : this.node().innerHTML;\n    },\n    raise: function raise() {\n      return this.each(_n);\n    },\n    lower: function lower() {\n      return this.each(bn);\n    },\n    append: function append(t) {\n      var n = "function" == typeof t ? t : At(t);\n      return this.select(function () {\n        return this.appendChild(n.apply(this, arguments));\n      });\n    },\n    insert: function insert(t, n) {\n      var e = "function" == typeof t ? t : At(t),\n          r = null == n ? mn : "function" == typeof n ? n : St(n);\n      return this.select(function () {\n        return this.insertBefore(e.apply(this, arguments), r.apply(this, arguments) || null);\n      });\n    },\n    remove: function remove() {\n      return this.each(xn);\n    },\n    clone: function clone(t) {\n      return this.select(t ? Mn : wn);\n    },\n    datum: function datum(t) {\n      return arguments.length ? this.property("__data__", t) : this.node().__data__;\n    },\n    on: function on(t, n, e) {\n      var r,\n          i,\n          o = An(t + ""),\n          a = o.length;\n\n      if (!(arguments.length < 2)) {\n        for (u = n ? Sn : Tn, r = 0; r < a; ++r) {\n          this.each(u(o[r], n, e));\n        }\n\n        return this;\n      }\n\n      var u = this.node().__on;\n\n      if (u) for (var c, f = 0, s = u.length; f < s; ++f) {\n        for (r = 0, c = u[f]; r < a; ++r) {\n          if ((i = o[r]).type === c.type && i.name === c.name) return c.value;\n        }\n      }\n    },\n    dispatch: function dispatch(t, n) {\n      return this.each(("function" == typeof n ? Nn : kn)(t, n));\n    }\n  }, Symbol.iterator, /*#__PURE__*/regenerator_default().mark(function _callee3() {\n    var t, n, e, r, i, o, a;\n    return regenerator_default().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            t = this._groups, n = 0, e = t.length;\n\n          case 1:\n            if (!(n < e)) {\n              _context3.next = 14;\n              break;\n            }\n\n            i = t[n], o = 0, a = i.length;\n\n          case 3:\n            if (!(o < a)) {\n              _context3.next = 11;\n              break;\n            }\n\n            _context3.t0 = r = i[o];\n\n            if (!_context3.t0) {\n              _context3.next = 8;\n              break;\n            }\n\n            _context3.next = 8;\n            return r;\n\n          case 8:\n            ++o;\n            _context3.next = 3;\n            break;\n\n          case 11:\n            ++n;\n            _context3.next = 1;\n            break;\n\n          case 14:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n  var qn = 0;\n\n  function Rn() {\n    return new Fn();\n  }\n\n  function Fn() {\n    this._ = "@" + (++qn).toString(36);\n  }\n\n  function On(t) {\n    var n;\n\n    for (; n = t.sourceEvent;) {\n      t = n;\n    }\n\n    return t;\n  }\n\n  function Un(t, n) {\n    if (t = On(t), void 0 === n && (n = t.currentTarget), n) {\n      var e = n.ownerSVGElement || n;\n\n      if (e.createSVGPoint) {\n        var r = e.createSVGPoint();\n        return r.x = t.clientX, r.y = t.clientY, [(r = r.matrixTransform(n.getScreenCTM().inverse())).x, r.y];\n      }\n\n      if (n.getBoundingClientRect) {\n        var i = n.getBoundingClientRect();\n        return [t.clientX - i.left - n.clientLeft, t.clientY - i.top - n.clientTop];\n      }\n    }\n\n    return [t.pageX, t.pageY];\n  }\n\n  function In(t) {\n    t.stopImmediatePropagation();\n  }\n\n  function Bn(t) {\n    t.preventDefault(), t.stopImmediatePropagation();\n  }\n\n  function Yn(t) {\n    var n = t.document.documentElement,\n        e = Dn(t).on("dragstart.drag", Bn, !0);\n    "onselectstart" in n ? e.on("selectstart.drag", Bn, !0) : (n.__noselect = n.style.MozUserSelect, n.style.MozUserSelect = "none");\n  }\n\n  function Ln(t, n) {\n    var e = t.document.documentElement,\n        r = Dn(t).on("dragstart.drag", null);\n    n && (r.on("click.drag", Bn, !0), setTimeout(function () {\n      r.on("click.drag", null);\n    }, 0)), "onselectstart" in e ? r.on("selectstart.drag", null) : (e.style.MozUserSelect = e.__noselect, delete e.__noselect);\n  }\n\n  Fn.prototype = Rn.prototype = {\n    constructor: Fn,\n    get: function get(t) {\n      for (var n = this._; !(n in t);) {\n        if (!(t = t.parentNode)) return;\n      }\n\n      return t[n];\n    },\n    set: function set(t, n) {\n      return t[this._] = n;\n    },\n    remove: function remove(t) {\n      return this._ in t && delete t[this._];\n    },\n    toString: function toString() {\n      return this._;\n    }\n  };\n\n  var jn = function jn(t) {\n    return function () {\n      return t;\n    };\n  };\n\n  function Hn(t, _ref4) {\n    var n = _ref4.sourceEvent,\n        e = _ref4.subject,\n        r = _ref4.target,\n        i = _ref4.identifier,\n        o = _ref4.active,\n        a = _ref4.x,\n        u = _ref4.y,\n        c = _ref4.dx,\n        f = _ref4.dy,\n        s = _ref4.dispatch;\n    Object.defineProperties(this, {\n      type: {\n        value: t,\n        enumerable: !0,\n        configurable: !0\n      },\n      sourceEvent: {\n        value: n,\n        enumerable: !0,\n        configurable: !0\n      },\n      subject: {\n        value: e,\n        enumerable: !0,\n        configurable: !0\n      },\n      target: {\n        value: r,\n        enumerable: !0,\n        configurable: !0\n      },\n      identifier: {\n        value: i,\n        enumerable: !0,\n        configurable: !0\n      },\n      active: {\n        value: o,\n        enumerable: !0,\n        configurable: !0\n      },\n      x: {\n        value: a,\n        enumerable: !0,\n        configurable: !0\n      },\n      y: {\n        value: u,\n        enumerable: !0,\n        configurable: !0\n      },\n      dx: {\n        value: c,\n        enumerable: !0,\n        configurable: !0\n      },\n      dy: {\n        value: f,\n        enumerable: !0,\n        configurable: !0\n      },\n      _: {\n        value: s\n      }\n    });\n  }\n\n  function Xn(t) {\n    return !t.ctrlKey && !t.button;\n  }\n\n  function Gn() {\n    return this.parentNode;\n  }\n\n  function Vn(t, n) {\n    return null == n ? {\n      x: t.x,\n      y: t.y\n    } : n;\n  }\n\n  function $n() {\n    return navigator.maxTouchPoints || "ontouchstart" in this;\n  }\n\n  function Wn(t, n, e) {\n    t.prototype = n.prototype = e, e.constructor = t;\n  }\n\n  function Zn(t, n) {\n    var e = Object.create(t.prototype);\n\n    for (var r in n) {\n      e[r] = n[r];\n    }\n\n    return e;\n  }\n\n  function Kn() {}\n\n  Hn.prototype.on = function () {\n    var t = this._.on.apply(this._, arguments);\n\n    return t === this._ ? this : t;\n  };\n\n  var Qn = .7,\n      Jn = 1 / Qn,\n      te = "\\\\s*([+-]?\\\\d+)\\\\s*",\n      ne = "\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*",\n      ee = "\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*",\n      re = /^#([0-9a-f]{3,8})$/,\n      ie = new RegExp("^rgb\\\\(" + [te, te, te] + "\\\\)$"),\n      oe = new RegExp("^rgb\\\\(" + [ee, ee, ee] + "\\\\)$"),\n      ae = new RegExp("^rgba\\\\(" + [te, te, te, ne] + "\\\\)$"),\n      ue = new RegExp("^rgba\\\\(" + [ee, ee, ee, ne] + "\\\\)$"),\n      ce = new RegExp("^hsl\\\\(" + [ne, ee, ee] + "\\\\)$"),\n      fe = new RegExp("^hsla\\\\(" + [ne, ee, ee, ne] + "\\\\)$"),\n      se = {\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  };\n\n  function le() {\n    return this.rgb().formatHex();\n  }\n\n  function he() {\n    return this.rgb().formatRgb();\n  }\n\n  function de(t) {\n    var n, e;\n    return t = (t + "").trim().toLowerCase(), (n = re.exec(t)) ? (e = n[1].length, n = parseInt(n[1], 16), 6 === e ? pe(n) : 3 === e ? new _e(n >> 8 & 15 | n >> 4 & 240, n >> 4 & 15 | 240 & n, (15 & n) << 4 | 15 & n, 1) : 8 === e ? ge(n >> 24 & 255, n >> 16 & 255, n >> 8 & 255, (255 & n) / 255) : 4 === e ? ge(n >> 12 & 15 | n >> 8 & 240, n >> 8 & 15 | n >> 4 & 240, n >> 4 & 15 | 240 & n, ((15 & n) << 4 | 15 & n) / 255) : null) : (n = ie.exec(t)) ? new _e(n[1], n[2], n[3], 1) : (n = oe.exec(t)) ? new _e(255 * n[1] / 100, 255 * n[2] / 100, 255 * n[3] / 100, 1) : (n = ae.exec(t)) ? ge(n[1], n[2], n[3], n[4]) : (n = ue.exec(t)) ? ge(255 * n[1] / 100, 255 * n[2] / 100, 255 * n[3] / 100, n[4]) : (n = ce.exec(t)) ? we(n[1], n[2] / 100, n[3] / 100, 1) : (n = fe.exec(t)) ? we(n[1], n[2] / 100, n[3] / 100, n[4]) : se.hasOwnProperty(t) ? pe(se[t]) : "transparent" === t ? new _e(NaN, NaN, NaN, 0) : null;\n  }\n\n  function pe(t) {\n    return new _e(t >> 16 & 255, t >> 8 & 255, 255 & t, 1);\n  }\n\n  function ge(t, n, e, r) {\n    return r <= 0 && (t = n = e = NaN), new _e(t, n, e, r);\n  }\n\n  function ye(t) {\n    return t instanceof Kn || (t = de(t)), t ? new _e((t = t.rgb()).r, t.g, t.b, t.opacity) : new _e();\n  }\n\n  function ve(t, n, e, r) {\n    return 1 === arguments.length ? ye(t) : new _e(t, n, e, null == r ? 1 : r);\n  }\n\n  function _e(t, n, e, r) {\n    this.r = +t, this.g = +n, this.b = +e, this.opacity = +r;\n  }\n\n  function be() {\n    return "#" + xe(this.r) + xe(this.g) + xe(this.b);\n  }\n\n  function me() {\n    var t = this.opacity;\n    return (1 === (t = isNaN(t) ? 1 : Math.max(0, Math.min(1, t))) ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (1 === t ? ")" : ", " + t + ")");\n  }\n\n  function xe(t) {\n    return ((t = Math.max(0, Math.min(255, Math.round(t) || 0))) < 16 ? "0" : "") + t.toString(16);\n  }\n\n  function we(t, n, e, r) {\n    return r <= 0 ? t = n = e = NaN : e <= 0 || e >= 1 ? t = n = NaN : n <= 0 && (t = NaN), new Te(t, n, e, r);\n  }\n\n  function Me(t) {\n    if (t instanceof Te) return new Te(t.h, t.s, t.l, t.opacity);\n    if (t instanceof Kn || (t = de(t)), !t) return new Te();\n    if (t instanceof Te) return t;\n    var n = (t = t.rgb()).r / 255,\n        e = t.g / 255,\n        r = t.b / 255,\n        i = Math.min(n, e, r),\n        o = Math.max(n, e, r),\n        a = NaN,\n        u = o - i,\n        c = (o + i) / 2;\n    return u ? (a = n === o ? (e - r) / u + 6 * (e < r) : e === o ? (r - n) / u + 2 : (n - e) / u + 4, u /= c < .5 ? o + i : 2 - o - i, a *= 60) : u = c > 0 && c < 1 ? 0 : a, new Te(a, u, c, t.opacity);\n  }\n\n  function Ae(t, n, e, r) {\n    return 1 === arguments.length ? Me(t) : new Te(t, n, e, null == r ? 1 : r);\n  }\n\n  function Te(t, n, e, r) {\n    this.h = +t, this.s = +n, this.l = +e, this.opacity = +r;\n  }\n\n  function Se(t, n, e) {\n    return 255 * (t < 60 ? n + (e - n) * t / 60 : t < 180 ? e : t < 240 ? n + (e - n) * (240 - t) / 60 : n);\n  }\n\n  Wn(Kn, de, {\n    copy: function copy(t) {\n      return Object.assign(new this.constructor(), this, t);\n    },\n    displayable: function displayable() {\n      return this.rgb().displayable();\n    },\n    hex: le,\n    formatHex: le,\n    formatHsl: function formatHsl() {\n      return Me(this).formatHsl();\n    },\n    formatRgb: he,\n    toString: he\n  }), Wn(_e, ve, Zn(Kn, {\n    brighter: function brighter(t) {\n      return t = null == t ? Jn : Math.pow(Jn, t), new _e(this.r * t, this.g * t, this.b * t, this.opacity);\n    },\n    darker: function darker(t) {\n      return t = null == t ? Qn : Math.pow(Qn, t), new _e(this.r * t, this.g * t, this.b * t, this.opacity);\n    },\n    rgb: function rgb() {\n      return this;\n    },\n    displayable: function displayable() {\n      return -.5 <= this.r && this.r < 255.5 && -.5 <= this.g && this.g < 255.5 && -.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;\n    },\n    hex: be,\n    formatHex: be,\n    formatRgb: me,\n    toString: me\n  })), Wn(Te, Ae, Zn(Kn, {\n    brighter: function brighter(t) {\n      return t = null == t ? Jn : Math.pow(Jn, t), new Te(this.h, this.s, this.l * t, this.opacity);\n    },\n    darker: function darker(t) {\n      return t = null == t ? Qn : Math.pow(Qn, t), new Te(this.h, this.s, this.l * t, this.opacity);\n    },\n    rgb: function rgb() {\n      var t = this.h % 360 + 360 * (this.h < 0),\n          n = isNaN(t) || isNaN(this.s) ? 0 : this.s,\n          e = this.l,\n          r = e + (e < .5 ? e : 1 - e) * n,\n          i = 2 * e - r;\n      return new _e(Se(t >= 240 ? t - 240 : t + 120, i, r), Se(t, i, r), Se(t < 120 ? t + 240 : t - 120, i, r), this.opacity);\n    },\n    displayable: function displayable() {\n      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;\n    },\n    formatHsl: function formatHsl() {\n      var t = this.opacity;\n      return (1 === (t = isNaN(t) ? 1 : Math.max(0, Math.min(1, t))) ? "hsl(" : "hsla(") + (this.h || 0) + ", " + 100 * (this.s || 0) + "%, " + 100 * (this.l || 0) + "%" + (1 === t ? ")" : ", " + t + ")");\n    }\n  }));\n  var Ee = Math.PI / 180,\n      ke = 180 / Math.PI,\n      Ne = .96422,\n      Ce = .82521,\n      Pe = 4 / 29,\n      ze = 6 / 29,\n      De = 3 * ze * ze;\n\n  function qe(t) {\n    if (t instanceof Fe) return new Fe(t.l, t.a, t.b, t.opacity);\n    if (t instanceof je) return He(t);\n    t instanceof _e || (t = ye(t));\n    var n,\n        e,\n        r = Be(t.r),\n        i = Be(t.g),\n        o = Be(t.b),\n        a = Oe((.2225045 * r + .7168786 * i + .0606169 * o) / 1);\n    return r === i && i === o ? n = e = a : (n = Oe((.4360747 * r + .3850649 * i + .1430804 * o) / Ne), e = Oe((.0139322 * r + .0971045 * i + .7141733 * o) / Ce)), new Fe(116 * a - 16, 500 * (n - a), 200 * (a - e), t.opacity);\n  }\n\n  function Re(t, n, e, r) {\n    return 1 === arguments.length ? qe(t) : new Fe(t, n, e, null == r ? 1 : r);\n  }\n\n  function Fe(t, n, e, r) {\n    this.l = +t, this.a = +n, this.b = +e, this.opacity = +r;\n  }\n\n  function Oe(t) {\n    return t > .008856451679035631 ? Math.pow(t, 1 / 3) : t / De + Pe;\n  }\n\n  function Ue(t) {\n    return t > ze ? t * t * t : De * (t - Pe);\n  }\n\n  function Ie(t) {\n    return 255 * (t <= .0031308 ? 12.92 * t : 1.055 * Math.pow(t, 1 / 2.4) - .055);\n  }\n\n  function Be(t) {\n    return (t /= 255) <= .04045 ? t / 12.92 : Math.pow((t + .055) / 1.055, 2.4);\n  }\n\n  function Ye(t) {\n    if (t instanceof je) return new je(t.h, t.c, t.l, t.opacity);\n    if (t instanceof Fe || (t = qe(t)), 0 === t.a && 0 === t.b) return new je(NaN, 0 < t.l && t.l < 100 ? 0 : NaN, t.l, t.opacity);\n    var n = Math.atan2(t.b, t.a) * ke;\n    return new je(n < 0 ? n + 360 : n, Math.sqrt(t.a * t.a + t.b * t.b), t.l, t.opacity);\n  }\n\n  function Le(t, n, e, r) {\n    return 1 === arguments.length ? Ye(t) : new je(t, n, e, null == r ? 1 : r);\n  }\n\n  function je(t, n, e, r) {\n    this.h = +t, this.c = +n, this.l = +e, this.opacity = +r;\n  }\n\n  function He(t) {\n    if (isNaN(t.h)) return new Fe(t.l, 0, 0, t.opacity);\n    var n = t.h * Ee;\n    return new Fe(t.l, Math.cos(n) * t.c, Math.sin(n) * t.c, t.opacity);\n  }\n\n  Wn(Fe, Re, Zn(Kn, {\n    brighter: function brighter(t) {\n      return new Fe(this.l + 18 * (null == t ? 1 : t), this.a, this.b, this.opacity);\n    },\n    darker: function darker(t) {\n      return new Fe(this.l - 18 * (null == t ? 1 : t), this.a, this.b, this.opacity);\n    },\n    rgb: function rgb() {\n      var t = (this.l + 16) / 116,\n          n = isNaN(this.a) ? t : t + this.a / 500,\n          e = isNaN(this.b) ? t : t - this.b / 200;\n      return new _e(Ie(3.1338561 * (n = Ne * Ue(n)) - 1.6168667 * (t = 1 * Ue(t)) - .4906146 * (e = Ce * Ue(e))), Ie(-.9787684 * n + 1.9161415 * t + .033454 * e), Ie(.0719453 * n - .2289914 * t + 1.4052427 * e), this.opacity);\n    }\n  })), Wn(je, Le, Zn(Kn, {\n    brighter: function brighter(t) {\n      return new je(this.h, this.c, this.l + 18 * (null == t ? 1 : t), this.opacity);\n    },\n    darker: function darker(t) {\n      return new je(this.h, this.c, this.l - 18 * (null == t ? 1 : t), this.opacity);\n    },\n    rgb: function rgb() {\n      return He(this).rgb();\n    }\n  }));\n  var Xe = -.14861,\n      Ge = 1.78277,\n      Ve = -.29227,\n      $e = -.90649,\n      We = 1.97294,\n      Ze = We * $e,\n      Ke = We * Ge,\n      Qe = Ge * Ve - $e * Xe;\n\n  function Je(t) {\n    if (t instanceof nr) return new nr(t.h, t.s, t.l, t.opacity);\n    t instanceof _e || (t = ye(t));\n    var n = t.r / 255,\n        e = t.g / 255,\n        r = t.b / 255,\n        i = (Qe * r + Ze * n - Ke * e) / (Qe + Ze - Ke),\n        o = r - i,\n        a = (We * (e - i) - Ve * o) / $e,\n        u = Math.sqrt(a * a + o * o) / (We * i * (1 - i)),\n        c = u ? Math.atan2(a, o) * ke - 120 : NaN;\n    return new nr(c < 0 ? c + 360 : c, u, i, t.opacity);\n  }\n\n  function tr(t, n, e, r) {\n    return 1 === arguments.length ? Je(t) : new nr(t, n, e, null == r ? 1 : r);\n  }\n\n  function nr(t, n, e, r) {\n    this.h = +t, this.s = +n, this.l = +e, this.opacity = +r;\n  }\n\n  function er(t, n, e, r, i) {\n    var o = t * t,\n        a = o * t;\n    return ((1 - 3 * t + 3 * o - a) * n + (4 - 6 * o + 3 * a) * e + (1 + 3 * t + 3 * o - 3 * a) * r + a * i) / 6;\n  }\n\n  function rr(t) {\n    var n = t.length - 1;\n    return function (e) {\n      var r = e <= 0 ? e = 0 : e >= 1 ? (e = 1, n - 1) : Math.floor(e * n),\n          i = t[r],\n          o = t[r + 1],\n          a = r > 0 ? t[r - 1] : 2 * i - o,\n          u = r < n - 1 ? t[r + 2] : 2 * o - i;\n      return er((e - r / n) * n, a, i, o, u);\n    };\n  }\n\n  function ir(t) {\n    var n = t.length;\n    return function (e) {\n      var r = Math.floor(((e %= 1) < 0 ? ++e : e) * n),\n          i = t[(r + n - 1) % n],\n          o = t[r % n],\n          a = t[(r + 1) % n],\n          u = t[(r + 2) % n];\n      return er((e - r / n) * n, i, o, a, u);\n    };\n  }\n\n  Wn(nr, tr, Zn(Kn, {\n    brighter: function brighter(t) {\n      return t = null == t ? Jn : Math.pow(Jn, t), new nr(this.h, this.s, this.l * t, this.opacity);\n    },\n    darker: function darker(t) {\n      return t = null == t ? Qn : Math.pow(Qn, t), new nr(this.h, this.s, this.l * t, this.opacity);\n    },\n    rgb: function rgb() {\n      var t = isNaN(this.h) ? 0 : (this.h + 120) * Ee,\n          n = +this.l,\n          e = isNaN(this.s) ? 0 : this.s * n * (1 - n),\n          r = Math.cos(t),\n          i = Math.sin(t);\n      return new _e(255 * (n + e * (Xe * r + Ge * i)), 255 * (n + e * (Ve * r + $e * i)), 255 * (n + e * (We * r)), this.opacity);\n    }\n  }));\n\n  var or = function or(t) {\n    return function () {\n      return t;\n    };\n  };\n\n  function ar(t, n) {\n    return function (e) {\n      return t + e * n;\n    };\n  }\n\n  function ur(t, n) {\n    var e = n - t;\n    return e ? ar(t, e > 180 || e < -180 ? e - 360 * Math.round(e / 360) : e) : or(isNaN(t) ? n : t);\n  }\n\n  function cr(t) {\n    return 1 == (t = +t) ? fr : function (n, e) {\n      return e - n ? function (t, n, e) {\n        return t = Math.pow(t, e), n = Math.pow(n, e) - t, e = 1 / e, function (r) {\n          return Math.pow(t + r * n, e);\n        };\n      }(n, e, t) : or(isNaN(n) ? e : n);\n    };\n  }\n\n  function fr(t, n) {\n    var e = n - t;\n    return e ? ar(t, e) : or(isNaN(t) ? n : t);\n  }\n\n  var sr = function t(n) {\n    var e = cr(n);\n\n    function r(t, n) {\n      var r = e((t = ve(t)).r, (n = ve(n)).r),\n          i = e(t.g, n.g),\n          o = e(t.b, n.b),\n          a = fr(t.opacity, n.opacity);\n      return function (n) {\n        return t.r = r(n), t.g = i(n), t.b = o(n), t.opacity = a(n), t + "";\n      };\n    }\n\n    return r.gamma = t, r;\n  }(1);\n\n  function lr(t) {\n    return function (n) {\n      var e,\n          r,\n          i = n.length,\n          o = new Array(i),\n          a = new Array(i),\n          u = new Array(i);\n\n      for (e = 0; e < i; ++e) {\n        r = ve(n[e]), o[e] = r.r || 0, a[e] = r.g || 0, u[e] = r.b || 0;\n      }\n\n      return o = t(o), a = t(a), u = t(u), r.opacity = 1, function (t) {\n        return r.r = o(t), r.g = a(t), r.b = u(t), r + "";\n      };\n    };\n  }\n\n  var hr = lr(rr),\n      dr = lr(ir);\n\n  function pr(t, n) {\n    n || (n = []);\n    var e,\n        r = t ? Math.min(n.length, t.length) : 0,\n        i = n.slice();\n    return function (o) {\n      for (e = 0; e < r; ++e) {\n        i[e] = t[e] * (1 - o) + n[e] * o;\n      }\n\n      return i;\n    };\n  }\n\n  function gr(t) {\n    return ArrayBuffer.isView(t) && !(t instanceof DataView);\n  }\n\n  function yr(t, n) {\n    var e,\n        r = n ? n.length : 0,\n        i = t ? Math.min(r, t.length) : 0,\n        o = new Array(i),\n        a = new Array(r);\n\n    for (e = 0; e < i; ++e) {\n      o[e] = Mr(t[e], n[e]);\n    }\n\n    for (; e < r; ++e) {\n      a[e] = n[e];\n    }\n\n    return function (t) {\n      for (e = 0; e < i; ++e) {\n        a[e] = o[e](t);\n      }\n\n      return a;\n    };\n  }\n\n  function vr(t, n) {\n    var e = new Date();\n    return t = +t, n = +n, function (r) {\n      return e.setTime(t * (1 - r) + n * r), e;\n    };\n  }\n\n  function _r(t, n) {\n    return t = +t, n = +n, function (e) {\n      return t * (1 - e) + n * e;\n    };\n  }\n\n  function br(t, n) {\n    var e,\n        r = {},\n        i = {};\n\n    for (e in null !== t && "object" == _typeof(t) || (t = {}), null !== n && "object" == _typeof(n) || (n = {}), n) {\n      e in t ? r[e] = Mr(t[e], n[e]) : i[e] = n[e];\n    }\n\n    return function (t) {\n      for (e in r) {\n        i[e] = r[e](t);\n      }\n\n      return i;\n    };\n  }\n\n  var mr = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n      xr = new RegExp(mr.source, "g");\n\n  function wr(t, n) {\n    var e,\n        r,\n        i,\n        o = mr.lastIndex = xr.lastIndex = 0,\n        a = -1,\n        u = [],\n        c = [];\n\n    for (t += "", n += ""; (e = mr.exec(t)) && (r = xr.exec(n));) {\n      (i = r.index) > o && (i = n.slice(o, i), u[a] ? u[a] += i : u[++a] = i), (e = e[0]) === (r = r[0]) ? u[a] ? u[a] += r : u[++a] = r : (u[++a] = null, c.push({\n        i: a,\n        x: _r(e, r)\n      })), o = xr.lastIndex;\n    }\n\n    return o < n.length && (i = n.slice(o), u[a] ? u[a] += i : u[++a] = i), u.length < 2 ? c[0] ? function (t) {\n      return function (n) {\n        return t(n) + "";\n      };\n    }(c[0].x) : function (t) {\n      return function () {\n        return t;\n      };\n    }(n) : (n = c.length, function (t) {\n      for (var e, r = 0; r < n; ++r) {\n        u[(e = c[r]).i] = e.x(t);\n      }\n\n      return u.join("");\n    });\n  }\n\n  function Mr(t, n) {\n    var e,\n        r = _typeof(n);\n\n    return null == n || "boolean" === r ? or(n) : ("number" === r ? _r : "string" === r ? (e = de(n)) ? (n = e, sr) : wr : n instanceof de ? sr : n instanceof Date ? vr : gr(n) ? pr : Array.isArray(n) ? yr : "function" != typeof n.valueOf && "function" != typeof n.toString || isNaN(n) ? br : _r)(t, n);\n  }\n\n  function Ar(t, n) {\n    return t = +t, n = +n, function (e) {\n      return Math.round(t * (1 - e) + n * e);\n    };\n  }\n\n  var Tr,\n      Sr = 180 / Math.PI,\n      Er = {\n    translateX: 0,\n    translateY: 0,\n    rotate: 0,\n    skewX: 0,\n    scaleX: 1,\n    scaleY: 1\n  };\n\n  function kr(t, n, e, r, i, o) {\n    var a, u, c;\n    return (a = Math.sqrt(t * t + n * n)) && (t /= a, n /= a), (c = t * e + n * r) && (e -= t * c, r -= n * c), (u = Math.sqrt(e * e + r * r)) && (e /= u, r /= u, c /= u), t * r < n * e && (t = -t, n = -n, c = -c, a = -a), {\n      translateX: i,\n      translateY: o,\n      rotate: Math.atan2(n, t) * Sr,\n      skewX: Math.atan(c) * Sr,\n      scaleX: a,\n      scaleY: u\n    };\n  }\n\n  function Nr(t, n, e, r) {\n    function i(t) {\n      return t.length ? t.pop() + " " : "";\n    }\n\n    return function (o, a) {\n      var u = [],\n          c = [];\n      return o = t(o), a = t(a), function (t, r, i, o, a, u) {\n        if (t !== i || r !== o) {\n          var c = a.push("translate(", null, n, null, e);\n          u.push({\n            i: c - 4,\n            x: _r(t, i)\n          }, {\n            i: c - 2,\n            x: _r(r, o)\n          });\n        } else (i || o) && a.push("translate(" + i + n + o + e);\n      }(o.translateX, o.translateY, a.translateX, a.translateY, u, c), function (t, n, e, o) {\n        t !== n ? (t - n > 180 ? n += 360 : n - t > 180 && (t += 360), o.push({\n          i: e.push(i(e) + "rotate(", null, r) - 2,\n          x: _r(t, n)\n        })) : n && e.push(i(e) + "rotate(" + n + r);\n      }(o.rotate, a.rotate, u, c), function (t, n, e, o) {\n        t !== n ? o.push({\n          i: e.push(i(e) + "skewX(", null, r) - 2,\n          x: _r(t, n)\n        }) : n && e.push(i(e) + "skewX(" + n + r);\n      }(o.skewX, a.skewX, u, c), function (t, n, e, r, o, a) {\n        if (t !== e || n !== r) {\n          var u = o.push(i(o) + "scale(", null, ",", null, ")");\n          a.push({\n            i: u - 4,\n            x: _r(t, e)\n          }, {\n            i: u - 2,\n            x: _r(n, r)\n          });\n        } else 1 === e && 1 === r || o.push(i(o) + "scale(" + e + "," + r + ")");\n      }(o.scaleX, o.scaleY, a.scaleX, a.scaleY, u, c), o = a = null, function (t) {\n        for (var n, e = -1, r = c.length; ++e < r;) {\n          u[(n = c[e]).i] = n.x(t);\n        }\n\n        return u.join("");\n      };\n    };\n  }\n\n  var Cr = Nr(function (t) {\n    var n = new ("function" == typeof DOMMatrix ? DOMMatrix : WebKitCSSMatrix)(t + "");\n    return n.isIdentity ? Er : kr(n.a, n.b, n.c, n.d, n.e, n.f);\n  }, "px, ", "px)", "deg)"),\n      Pr = Nr(function (t) {\n    return null == t ? Er : (Tr || (Tr = document.createElementNS("http://www.w3.org/2000/svg", "g")), Tr.setAttribute("transform", t), (t = Tr.transform.baseVal.consolidate()) ? kr((t = t.matrix).a, t.b, t.c, t.d, t.e, t.f) : Er);\n  }, ", ", ")", ")");\n\n  function zr(t) {\n    return ((t = Math.exp(t)) + 1 / t) / 2;\n  }\n\n  var Dr = function t(n, e, r) {\n    function i(t, i) {\n      var o,\n          a,\n          u = t[0],\n          c = t[1],\n          f = t[2],\n          s = i[0],\n          l = i[1],\n          h = i[2],\n          d = s - u,\n          p = l - c,\n          g = d * d + p * p;\n      if (g < 1e-12) a = Math.log(h / f) / n, o = function o(t) {\n        return [u + t * d, c + t * p, f * Math.exp(n * t * a)];\n      };else {\n        var y = Math.sqrt(g),\n            v = (h * h - f * f + r * g) / (2 * f * e * y),\n            _ = (h * h - f * f - r * g) / (2 * h * e * y),\n            b = Math.log(Math.sqrt(v * v + 1) - v),\n            m = Math.log(Math.sqrt(_ * _ + 1) - _);\n\n        a = (m - b) / n, o = function o(t) {\n          var r = t * a,\n              i = zr(b),\n              o = f / (e * y) * (i * function (t) {\n            return ((t = Math.exp(2 * t)) - 1) / (t + 1);\n          }(n * r + b) - function (t) {\n            return ((t = Math.exp(t)) - 1 / t) / 2;\n          }(b));\n\n          return [u + o * d, c + o * p, f * i / zr(n * r + b)];\n        };\n      }\n      return o.duration = 1e3 * a * n / Math.SQRT2, o;\n    }\n\n    return i.rho = function (n) {\n      var e = Math.max(.001, +n),\n          r = e * e;\n      return t(e, r, r * r);\n    }, i;\n  }(Math.SQRT2, 2, 4);\n\n  function qr(t) {\n    return function (n, e) {\n      var r = t((n = Ae(n)).h, (e = Ae(e)).h),\n          i = fr(n.s, e.s),\n          o = fr(n.l, e.l),\n          a = fr(n.opacity, e.opacity);\n      return function (t) {\n        return n.h = r(t), n.s = i(t), n.l = o(t), n.opacity = a(t), n + "";\n      };\n    };\n  }\n\n  var Rr = qr(ur),\n      Fr = qr(fr);\n\n  function Or(t) {\n    return function (n, e) {\n      var r = t((n = Le(n)).h, (e = Le(e)).h),\n          i = fr(n.c, e.c),\n          o = fr(n.l, e.l),\n          a = fr(n.opacity, e.opacity);\n      return function (t) {\n        return n.h = r(t), n.c = i(t), n.l = o(t), n.opacity = a(t), n + "";\n      };\n    };\n  }\n\n  var Ur = Or(ur),\n      Ir = Or(fr);\n\n  function Br(t) {\n    return function n(e) {\n      function r(n, r) {\n        var i = t((n = tr(n)).h, (r = tr(r)).h),\n            o = fr(n.s, r.s),\n            a = fr(n.l, r.l),\n            u = fr(n.opacity, r.opacity);\n        return function (t) {\n          return n.h = i(t), n.s = o(t), n.l = a(Math.pow(t, e)), n.opacity = u(t), n + "";\n        };\n      }\n\n      return e = +e, r.gamma = n, r;\n    }(1);\n  }\n\n  var Yr = Br(ur),\n      Lr = Br(fr);\n\n  function jr(t, n) {\n    void 0 === n && (n = t, t = Mr);\n\n    for (var e = 0, r = n.length - 1, i = n[0], o = new Array(r < 0 ? 0 : r); e < r;) {\n      o[e] = t(i, i = n[++e]);\n    }\n\n    return function (t) {\n      var n = Math.max(0, Math.min(r - 1, Math.floor(t *= r)));\n      return o[n](t - n);\n    };\n  }\n\n  var Hr,\n      Xr,\n      Gr = 0,\n      Vr = 0,\n      $r = 0,\n      Wr = 0,\n      Zr = 0,\n      Kr = 0,\n      Qr = "object" == (typeof performance === "undefined" ? "undefined" : _typeof(performance)) && performance.now ? performance : Date,\n      Jr = "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (t) {\n    setTimeout(t, 17);\n  };\n\n  function ti() {\n    return Zr || (Jr(ni), Zr = Qr.now() + Kr);\n  }\n\n  function ni() {\n    Zr = 0;\n  }\n\n  function ei() {\n    this._call = this._time = this._next = null;\n  }\n\n  function ri(t, n, e) {\n    var r = new ei();\n    return r.restart(t, n, e), r;\n  }\n\n  function ii() {\n    ti(), ++Gr;\n\n    for (var t, n = Hr; n;) {\n      (t = Zr - n._time) >= 0 && n._call.call(null, t), n = n._next;\n    }\n\n    --Gr;\n  }\n\n  function oi() {\n    Zr = (Wr = Qr.now()) + Kr, Gr = Vr = 0;\n\n    try {\n      ii();\n    } finally {\n      Gr = 0, function () {\n        var t,\n            n,\n            e = Hr,\n            r = 1 / 0;\n\n        for (; e;) {\n          e._call ? (r > e._time && (r = e._time), t = e, e = e._next) : (n = e._next, e._next = null, e = t ? t._next = n : Hr = n);\n        }\n\n        Xr = t, ui(r);\n      }(), Zr = 0;\n    }\n  }\n\n  function ai() {\n    var t = Qr.now(),\n        n = t - Wr;\n    n > 1e3 && (Kr -= n, Wr = t);\n  }\n\n  function ui(t) {\n    Gr || (Vr && (Vr = clearTimeout(Vr)), t - Zr > 24 ? (t < 1 / 0 && (Vr = setTimeout(oi, t - Qr.now() - Kr)), $r && ($r = clearInterval($r))) : ($r || (Wr = Qr.now(), $r = setInterval(ai, 1e3)), Gr = 1, Jr(oi)));\n  }\n\n  function ci(t, n, e) {\n    var r = new ei();\n    return n = null == n ? 0 : +n, r.restart(function (e) {\n      r.stop(), t(e + n);\n    }, n, e), r;\n  }\n\n  ei.prototype = ri.prototype = {\n    constructor: ei,\n    restart: function restart(t, n, e) {\n      if ("function" != typeof t) throw new TypeError("callback is not a function");\n      e = (null == e ? ti() : +e) + (null == n ? 0 : +n), this._next || Xr === this || (Xr ? Xr._next = this : Hr = this, Xr = this), this._call = t, this._time = e, ui();\n    },\n    stop: function stop() {\n      this._call && (this._call = null, this._time = 1 / 0, ui());\n    }\n  };\n  var fi = pt("start", "end", "cancel", "interrupt"),\n      si = [];\n\n  function li(t, n, e, r, i, o) {\n    var a = t.__transition;\n\n    if (a) {\n      if (e in a) return;\n    } else t.__transition = {};\n\n    !function (t, n, e) {\n      var r,\n          i = t.__transition;\n\n      function o(t) {\n        e.state = 1, e.timer.restart(a, e.delay, e.time), e.delay <= t && a(t - e.delay);\n      }\n\n      function a(o) {\n        var f, s, l, h;\n        if (1 !== e.state) return c();\n\n        for (f in i) {\n          if ((h = i[f]).name === e.name) {\n            if (3 === h.state) return ci(a);\n            4 === h.state ? (h.state = 6, h.timer.stop(), h.on.call("interrupt", t, t.__data__, h.index, h.group), delete i[f]) : +f < n && (h.state = 6, h.timer.stop(), h.on.call("cancel", t, t.__data__, h.index, h.group), delete i[f]);\n          }\n        }\n\n        if (ci(function () {\n          3 === e.state && (e.state = 4, e.timer.restart(u, e.delay, e.time), u(o));\n        }), e.state = 2, e.on.call("start", t, t.__data__, e.index, e.group), 2 === e.state) {\n          for (e.state = 3, r = new Array(l = e.tween.length), f = 0, s = -1; f < l; ++f) {\n            (h = e.tween[f].value.call(t, t.__data__, e.index, e.group)) && (r[++s] = h);\n          }\n\n          r.length = s + 1;\n        }\n      }\n\n      function u(n) {\n        for (var i = n < e.duration ? e.ease.call(null, n / e.duration) : (e.timer.restart(c), e.state = 5, 1), o = -1, a = r.length; ++o < a;) {\n          r[o].call(t, i);\n        }\n\n        5 === e.state && (e.on.call("end", t, t.__data__, e.index, e.group), c());\n      }\n\n      function c() {\n        for (var r in e.state = 6, e.timer.stop(), delete i[n], i) {\n          return;\n        }\n\n        delete t.__transition;\n      }\n\n      i[n] = e, e.timer = ri(o, 0, e.time);\n    }(t, e, {\n      name: n,\n      index: r,\n      group: i,\n      on: fi,\n      tween: si,\n      time: o.time,\n      delay: o.delay,\n      duration: o.duration,\n      ease: o.ease,\n      timer: null,\n      state: 0\n    });\n  }\n\n  function hi(t, n) {\n    var e = pi(t, n);\n    if (e.state > 0) throw new Error("too late; already scheduled");\n    return e;\n  }\n\n  function di(t, n) {\n    var e = pi(t, n);\n    if (e.state > 3) throw new Error("too late; already running");\n    return e;\n  }\n\n  function pi(t, n) {\n    var e = t.__transition;\n    if (!e || !(e = e[n])) throw new Error("transition not found");\n    return e;\n  }\n\n  function gi(t, n) {\n    var e,\n        r,\n        i,\n        o = t.__transition,\n        a = !0;\n\n    if (o) {\n      for (i in n = null == n ? null : n + "", o) {\n        (e = o[i]).name === n ? (r = e.state > 2 && e.state < 5, e.state = 6, e.timer.stop(), e.on.call(r ? "interrupt" : "cancel", t, t.__data__, e.index, e.group), delete o[i]) : a = !1;\n      }\n\n      a && delete t.__transition;\n    }\n  }\n\n  function yi(t, n) {\n    var e, r;\n    return function () {\n      var i = di(this, t),\n          o = i.tween;\n      if (o !== e) for (var a = 0, u = (r = e = o).length; a < u; ++a) {\n        if (r[a].name === n) {\n          (r = r.slice()).splice(a, 1);\n          break;\n        }\n      }\n      i.tween = r;\n    };\n  }\n\n  function vi(t, n, e) {\n    var r, i;\n    if ("function" != typeof e) throw new Error();\n    return function () {\n      var o = di(this, t),\n          a = o.tween;\n\n      if (a !== r) {\n        i = (r = a).slice();\n\n        for (var u = {\n          name: n,\n          value: e\n        }, c = 0, f = i.length; c < f; ++c) {\n          if (i[c].name === n) {\n            i[c] = u;\n            break;\n          }\n        }\n\n        c === f && i.push(u);\n      }\n\n      o.tween = i;\n    };\n  }\n\n  function _i(t, n, e) {\n    var r = t._id;\n    return t.each(function () {\n      var t = di(this, r);\n      (t.value || (t.value = {}))[n] = e.apply(this, arguments);\n    }), function (t) {\n      return pi(t, r).value[n];\n    };\n  }\n\n  function bi(t, n) {\n    var e;\n    return ("number" == typeof n ? _r : n instanceof de ? sr : (e = de(n)) ? (n = e, sr) : wr)(t, n);\n  }\n\n  function mi(t) {\n    return function () {\n      this.removeAttribute(t);\n    };\n  }\n\n  function xi(t) {\n    return function () {\n      this.removeAttributeNS(t.space, t.local);\n    };\n  }\n\n  function wi(t, n, e) {\n    var r,\n        i,\n        o = e + "";\n    return function () {\n      var a = this.getAttribute(t);\n      return a === o ? null : a === r ? i : i = n(r = a, e);\n    };\n  }\n\n  function Mi(t, n, e) {\n    var r,\n        i,\n        o = e + "";\n    return function () {\n      var a = this.getAttributeNS(t.space, t.local);\n      return a === o ? null : a === r ? i : i = n(r = a, e);\n    };\n  }\n\n  function Ai(t, n, e) {\n    var r, i, o;\n    return function () {\n      var a,\n          u,\n          c = e(this);\n      if (null != c) return (a = this.getAttribute(t)) === (u = c + "") ? null : a === r && u === i ? o : (i = u, o = n(r = a, c));\n      this.removeAttribute(t);\n    };\n  }\n\n  function Ti(t, n, e) {\n    var r, i, o;\n    return function () {\n      var a,\n          u,\n          c = e(this);\n      if (null != c) return (a = this.getAttributeNS(t.space, t.local)) === (u = c + "") ? null : a === r && u === i ? o : (i = u, o = n(r = a, c));\n      this.removeAttributeNS(t.space, t.local);\n    };\n  }\n\n  function Si(t, n) {\n    return function (e) {\n      this.setAttribute(t, n.call(this, e));\n    };\n  }\n\n  function Ei(t, n) {\n    return function (e) {\n      this.setAttributeNS(t.space, t.local, n.call(this, e));\n    };\n  }\n\n  function ki(t, n) {\n    var e, r;\n\n    function i() {\n      var i = n.apply(this, arguments);\n      return i !== r && (e = (r = i) && Ei(t, i)), e;\n    }\n\n    return i._value = n, i;\n  }\n\n  function Ni(t, n) {\n    var e, r;\n\n    function i() {\n      var i = n.apply(this, arguments);\n      return i !== r && (e = (r = i) && Si(t, i)), e;\n    }\n\n    return i._value = n, i;\n  }\n\n  function Ci(t, n) {\n    return function () {\n      hi(this, t).delay = +n.apply(this, arguments);\n    };\n  }\n\n  function Pi(t, n) {\n    return n = +n, function () {\n      hi(this, t).delay = n;\n    };\n  }\n\n  function zi(t, n) {\n    return function () {\n      di(this, t).duration = +n.apply(this, arguments);\n    };\n  }\n\n  function Di(t, n) {\n    return n = +n, function () {\n      di(this, t).duration = n;\n    };\n  }\n\n  function qi(t, n) {\n    if ("function" != typeof n) throw new Error();\n    return function () {\n      di(this, t).ease = n;\n    };\n  }\n\n  function Ri(t, n, e) {\n    var r,\n        i,\n        o = function (t) {\n      return (t + "").trim().split(/^|\\s+/).every(function (t) {\n        var n = t.indexOf(".");\n        return n >= 0 && (t = t.slice(0, n)), !t || "start" === t;\n      });\n    }(n) ? hi : di;\n    return function () {\n      var a = o(this, t),\n          u = a.on;\n      u !== r && (i = (r = u).copy()).on(n, e), a.on = i;\n    };\n  }\n\n  var Fi = zn.prototype.constructor;\n\n  function Oi(t) {\n    return function () {\n      this.style.removeProperty(t);\n    };\n  }\n\n  function Ui(t, n, e) {\n    return function (r) {\n      this.style.setProperty(t, n.call(this, r), e);\n    };\n  }\n\n  function Ii(t, n, e) {\n    var r, i;\n\n    function o() {\n      var o = n.apply(this, arguments);\n      return o !== i && (r = (i = o) && Ui(t, o, e)), r;\n    }\n\n    return o._value = n, o;\n  }\n\n  function Bi(t) {\n    return function (n) {\n      this.textContent = t.call(this, n);\n    };\n  }\n\n  function Yi(t) {\n    var n, e;\n\n    function r() {\n      var r = t.apply(this, arguments);\n      return r !== e && (n = (e = r) && Bi(r)), n;\n    }\n\n    return r._value = t, r;\n  }\n\n  var Li = 0;\n\n  function ji(t, n, e, r) {\n    this._groups = t, this._parents = n, this._name = e, this._id = r;\n  }\n\n  function Hi(t) {\n    return zn().transition(t);\n  }\n\n  function Xi() {\n    return ++Li;\n  }\n\n  var Gi = zn.prototype;\n  ji.prototype = Hi.prototype = _defineProperty({\n    constructor: ji,\n    select: function select(t) {\n      var n = this._name,\n          e = this._id;\n      "function" != typeof t && (t = St(t));\n\n      for (var r = this._groups, i = r.length, o = new Array(i), a = 0; a < i; ++a) {\n        for (var u, c, f = r[a], s = f.length, l = o[a] = new Array(s), h = 0; h < s; ++h) {\n          (u = f[h]) && (c = t.call(u, u.__data__, h, f)) && ("__data__" in u && (c.__data__ = u.__data__), l[h] = c, li(l[h], n, e, h, l, pi(u, e)));\n        }\n      }\n\n      return new ji(o, this._parents, n, e);\n    },\n    selectAll: function selectAll(t) {\n      var n = this._name,\n          e = this._id;\n      "function" != typeof t && (t = Nt(t));\n\n      for (var r = this._groups, i = r.length, o = [], a = [], u = 0; u < i; ++u) {\n        for (var c, f = r[u], s = f.length, l = 0; l < s; ++l) {\n          if (c = f[l]) {\n            for (var h, d = t.call(c, c.__data__, l, f), p = pi(c, e), g = 0, y = d.length; g < y; ++g) {\n              (h = d[g]) && li(h, n, e, g, d, p);\n            }\n\n            o.push(d), a.push(c);\n          }\n        }\n      }\n\n      return new ji(o, a, n, e);\n    },\n    filter: function filter(t) {\n      "function" != typeof t && (t = Ct(t));\n\n      for (var n = this._groups, e = n.length, r = new Array(e), i = 0; i < e; ++i) {\n        for (var o, a = n[i], u = a.length, c = r[i] = [], f = 0; f < u; ++f) {\n          (o = a[f]) && t.call(o, o.__data__, f, a) && c.push(o);\n        }\n      }\n\n      return new ji(r, this._parents, this._name, this._id);\n    },\n    merge: function merge(t) {\n      if (t._id !== this._id) throw new Error();\n\n      for (var n = this._groups, e = t._groups, r = n.length, i = e.length, o = Math.min(r, i), a = new Array(r), u = 0; u < o; ++u) {\n        for (var c, f = n[u], s = e[u], l = f.length, h = a[u] = new Array(l), d = 0; d < l; ++d) {\n          (c = f[d] || s[d]) && (h[d] = c);\n        }\n      }\n\n      for (; u < r; ++u) {\n        a[u] = n[u];\n      }\n\n      return new ji(a, this._parents, this._name, this._id);\n    },\n    selection: function selection() {\n      return new Fi(this._groups, this._parents);\n    },\n    transition: function transition() {\n      for (var t = this._name, n = this._id, e = Xi(), r = this._groups, i = r.length, o = 0; o < i; ++o) {\n        for (var a, u = r[o], c = u.length, f = 0; f < c; ++f) {\n          if (a = u[f]) {\n            var s = pi(a, n);\n            li(a, t, e, f, u, {\n              time: s.time + s.delay + s.duration,\n              delay: 0,\n              duration: s.duration,\n              ease: s.ease\n            });\n          }\n        }\n      }\n\n      return new ji(r, this._parents, t, e);\n    },\n    call: Gi.call,\n    nodes: Gi.nodes,\n    node: Gi.node,\n    size: Gi.size,\n    empty: Gi.empty,\n    each: Gi.each,\n    on: function on(t, n) {\n      var e = this._id;\n      return arguments.length < 2 ? pi(this.node(), e).on.on(t) : this.each(Ri(e, t, n));\n    },\n    attr: function attr(t, n) {\n      var e = xt(t),\n          r = "transform" === e ? Pr : bi;\n      return this.attrTween(t, "function" == typeof n ? (e.local ? Ti : Ai)(e, r, _i(this, "attr." + t, n)) : null == n ? (e.local ? xi : mi)(e) : (e.local ? Mi : wi)(e, r, n));\n    },\n    attrTween: function attrTween(t, n) {\n      var e = "attr." + t;\n      if (arguments.length < 2) return (e = this.tween(e)) && e._value;\n      if (null == n) return this.tween(e, null);\n      if ("function" != typeof n) throw new Error();\n      var r = xt(t);\n      return this.tween(e, (r.local ? ki : Ni)(r, n));\n    },\n    style: function style(t, n, e) {\n      var r = "transform" == (t += "") ? Cr : bi;\n      return null == n ? this.styleTween(t, function (t, n) {\n        var e, r, i;\n        return function () {\n          var o = Jt(this, t),\n              a = (this.style.removeProperty(t), Jt(this, t));\n          return o === a ? null : o === e && a === r ? i : i = n(e = o, r = a);\n        };\n      }(t, r)).on("end.style." + t, Oi(t)) : "function" == typeof n ? this.styleTween(t, function (t, n, e) {\n        var r, i, o;\n        return function () {\n          var a = Jt(this, t),\n              u = e(this),\n              c = u + "";\n          return null == u && (this.style.removeProperty(t), c = u = Jt(this, t)), a === c ? null : a === r && c === i ? o : (i = c, o = n(r = a, u));\n        };\n      }(t, r, _i(this, "style." + t, n))).each(function (t, n) {\n        var e,\n            r,\n            i,\n            o,\n            a = "style." + n,\n            u = "end." + a;\n        return function () {\n          var c = di(this, t),\n              f = c.on,\n              s = null == c.value[a] ? o || (o = Oi(n)) : void 0;\n          f === e && i === s || (r = (e = f).copy()).on(u, i = s), c.on = r;\n        };\n      }(this._id, t)) : this.styleTween(t, function (t, n, e) {\n        var r,\n            i,\n            o = e + "";\n        return function () {\n          var a = Jt(this, t);\n          return a === o ? null : a === r ? i : i = n(r = a, e);\n        };\n      }(t, r, n), e).on("end.style." + t, null);\n    },\n    styleTween: function styleTween(t, n, e) {\n      var r = "style." + (t += "");\n      if (arguments.length < 2) return (r = this.tween(r)) && r._value;\n      if (null == n) return this.tween(r, null);\n      if ("function" != typeof n) throw new Error();\n      return this.tween(r, Ii(t, n, null == e ? "" : e));\n    },\n    text: function text(t) {\n      return this.tween("text", "function" == typeof t ? function (t) {\n        return function () {\n          var n = t(this);\n          this.textContent = null == n ? "" : n;\n        };\n      }(_i(this, "text", t)) : function (t) {\n        return function () {\n          this.textContent = t;\n        };\n      }(null == t ? "" : t + ""));\n    },\n    textTween: function textTween(t) {\n      var n = "text";\n      if (arguments.length < 1) return (n = this.tween(n)) && n._value;\n      if (null == t) return this.tween(n, null);\n      if ("function" != typeof t) throw new Error();\n      return this.tween(n, Yi(t));\n    },\n    remove: function remove() {\n      return this.on("end.remove", function (t) {\n        return function () {\n          var n = this.parentNode;\n\n          for (var e in this.__transition) {\n            if (+e !== t) return;\n          }\n\n          n && n.removeChild(this);\n        };\n      }(this._id));\n    },\n    tween: function tween(t, n) {\n      var e = this._id;\n\n      if (t += "", arguments.length < 2) {\n        for (var r, i = pi(this.node(), e).tween, o = 0, a = i.length; o < a; ++o) {\n          if ((r = i[o]).name === t) return r.value;\n        }\n\n        return null;\n      }\n\n      return this.each((null == n ? yi : vi)(e, t, n));\n    },\n    delay: function delay(t) {\n      var n = this._id;\n      return arguments.length ? this.each(("function" == typeof t ? Ci : Pi)(n, t)) : pi(this.node(), n).delay;\n    },\n    duration: function duration(t) {\n      var n = this._id;\n      return arguments.length ? this.each(("function" == typeof t ? zi : Di)(n, t)) : pi(this.node(), n).duration;\n    },\n    ease: function ease(t) {\n      var n = this._id;\n      return arguments.length ? this.each(qi(n, t)) : pi(this.node(), n).ease;\n    },\n    easeVarying: function easeVarying(t) {\n      if ("function" != typeof t) throw new Error();\n      return this.each(function (t, n) {\n        return function () {\n          var e = n.apply(this, arguments);\n          if ("function" != typeof e) throw new Error();\n          di(this, t).ease = e;\n        };\n      }(this._id, t));\n    },\n    end: function end() {\n      var t,\n          n,\n          e = this,\n          r = e._id,\n          i = e.size();\n      return new Promise(function (o, a) {\n        var u = {\n          value: a\n        },\n            c = {\n          value: function value() {\n            0 == --i && o();\n          }\n        };\n        e.each(function () {\n          var e = di(this, r),\n              i = e.on;\n          i !== t && ((n = (t = i).copy())._.cancel.push(u), n._.interrupt.push(u), n._.end.push(c)), e.on = n;\n        }), 0 === i && o();\n      });\n    }\n  }, Symbol.iterator, Gi[Symbol.iterator]);\n\n  function Vi(t) {\n    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\n  }\n\n  function $i(t) {\n    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n  }\n\n  var Wi = function t(n) {\n    function e(t) {\n      return Math.pow(t, n);\n    }\n\n    return n = +n, e.exponent = t, e;\n  }(3),\n      Zi = function t(n) {\n    function e(t) {\n      return 1 - Math.pow(1 - t, n);\n    }\n\n    return n = +n, e.exponent = t, e;\n  }(3),\n      Ki = function t(n) {\n    function e(t) {\n      return ((t *= 2) <= 1 ? Math.pow(t, n) : 2 - Math.pow(2 - t, n)) / 2;\n    }\n\n    return n = +n, e.exponent = t, e;\n  }(3),\n      Qi = Math.PI,\n      Ji = Qi / 2;\n\n  function to(t) {\n    return (1 - Math.cos(Qi * t)) / 2;\n  }\n\n  function no(t) {\n    return 1.0009775171065494 * (Math.pow(2, -10 * t) - .0009765625);\n  }\n\n  function eo(t) {\n    return ((t *= 2) <= 1 ? no(1 - t) : 2 - no(t - 1)) / 2;\n  }\n\n  function ro(t) {\n    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\n  }\n\n  var io = 4 / 11,\n      oo = 7.5625;\n\n  function ao(t) {\n    return (t = +t) < io ? oo * t * t : t < .7272727272727273 ? oo * (t -= .5454545454545454) * t + .75 : t < .9090909090909091 ? oo * (t -= .8181818181818182) * t + .9375 : oo * (t -= .9545454545454546) * t + .984375;\n  }\n\n  var uo = 1.70158,\n      co = function t(n) {\n    function e(t) {\n      return (t = +t) * t * (n * (t - 1) + t);\n    }\n\n    return n = +n, e.overshoot = t, e;\n  }(uo),\n      fo = function t(n) {\n    function e(t) {\n      return --t * t * ((t + 1) * n + t) + 1;\n    }\n\n    return n = +n, e.overshoot = t, e;\n  }(uo),\n      so = function t(n) {\n    function e(t) {\n      return ((t *= 2) < 1 ? t * t * ((n + 1) * t - n) : (t -= 2) * t * ((n + 1) * t + n) + 2) / 2;\n    }\n\n    return n = +n, e.overshoot = t, e;\n  }(uo),\n      lo = 2 * Math.PI,\n      ho = function t(n, e) {\n    var r = Math.asin(1 / (n = Math.max(1, n))) * (e /= lo);\n\n    function i(t) {\n      return n * no(- --t) * Math.sin((r - t) / e);\n    }\n\n    return i.amplitude = function (n) {\n      return t(n, e * lo);\n    }, i.period = function (e) {\n      return t(n, e);\n    }, i;\n  }(1, .3),\n      po = function t(n, e) {\n    var r = Math.asin(1 / (n = Math.max(1, n))) * (e /= lo);\n\n    function i(t) {\n      return 1 - n * no(t = +t) * Math.sin((t + r) / e);\n    }\n\n    return i.amplitude = function (n) {\n      return t(n, e * lo);\n    }, i.period = function (e) {\n      return t(n, e);\n    }, i;\n  }(1, .3),\n      go = function t(n, e) {\n    var r = Math.asin(1 / (n = Math.max(1, n))) * (e /= lo);\n\n    function i(t) {\n      return ((t = 2 * t - 1) < 0 ? n * no(-t) * Math.sin((r - t) / e) : 2 - n * no(t) * Math.sin((r + t) / e)) / 2;\n    }\n\n    return i.amplitude = function (n) {\n      return t(n, e * lo);\n    }, i.period = function (e) {\n      return t(n, e);\n    }, i;\n  }(1, .3),\n      yo = {\n    time: null,\n    delay: 0,\n    duration: 250,\n    ease: $i\n  };\n\n  function vo(t, n) {\n    for (var e; !(e = t.__transition) || !(e = e[n]);) {\n      if (!(t = t.parentNode)) throw new Error("transition ".concat(n, " not found"));\n    }\n\n    return e;\n  }\n\n  zn.prototype.interrupt = function (t) {\n    return this.each(function () {\n      gi(this, t);\n    });\n  }, zn.prototype.transition = function (t) {\n    var n, e;\n    t instanceof ji ? (n = t._id, t = t._name) : (n = Xi(), (e = yo).time = ti(), t = null == t ? null : t + "");\n\n    for (var r = this._groups, i = r.length, o = 0; o < i; ++o) {\n      for (var a, u = r[o], c = u.length, f = 0; f < c; ++f) {\n        (a = u[f]) && li(a, t, n, f, u, e || vo(a, n));\n      }\n    }\n\n    return new ji(r, this._parents, t, n);\n  };\n  var _o = [null];\n\n  var bo = function bo(t) {\n    return function () {\n      return t;\n    };\n  };\n\n  function mo(t, _ref5) {\n    var n = _ref5.sourceEvent,\n        e = _ref5.target,\n        r = _ref5.selection,\n        i = _ref5.mode,\n        o = _ref5.dispatch;\n    Object.defineProperties(this, {\n      type: {\n        value: t,\n        enumerable: !0,\n        configurable: !0\n      },\n      sourceEvent: {\n        value: n,\n        enumerable: !0,\n        configurable: !0\n      },\n      target: {\n        value: e,\n        enumerable: !0,\n        configurable: !0\n      },\n      selection: {\n        value: r,\n        enumerable: !0,\n        configurable: !0\n      },\n      mode: {\n        value: i,\n        enumerable: !0,\n        configurable: !0\n      },\n      _: {\n        value: o\n      }\n    });\n  }\n\n  function xo(t) {\n    t.stopImmediatePropagation();\n  }\n\n  function wo(t) {\n    t.preventDefault(), t.stopImmediatePropagation();\n  }\n\n  var Mo = {\n    name: "drag"\n  },\n      Ao = {\n    name: "space"\n  },\n      To = {\n    name: "handle"\n  },\n      So = {\n    name: "center"\n  };\n  var Eo = Math.abs,\n      ko = Math.max,\n      No = Math.min;\n\n  function Co(t) {\n    return [+t[0], +t[1]];\n  }\n\n  function Po(t) {\n    return [Co(t[0]), Co(t[1])];\n  }\n\n  var zo = {\n    name: "x",\n    handles: ["w", "e"].map(Bo),\n    input: function input(t, n) {\n      return null == t ? null : [[+t[0], n[0][1]], [+t[1], n[1][1]]];\n    },\n    output: function output(t) {\n      return t && [t[0][0], t[1][0]];\n    }\n  },\n      Do = {\n    name: "y",\n    handles: ["n", "s"].map(Bo),\n    input: function input(t, n) {\n      return null == t ? null : [[n[0][0], +t[0]], [n[1][0], +t[1]]];\n    },\n    output: function output(t) {\n      return t && [t[0][1], t[1][1]];\n    }\n  },\n      qo = {\n    name: "xy",\n    handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(Bo),\n    input: function input(t) {\n      return null == t ? null : Po(t);\n    },\n    output: function output(t) {\n      return t;\n    }\n  },\n      Ro = {\n    overlay: "crosshair",\n    selection: "move",\n    n: "ns-resize",\n    e: "ew-resize",\n    s: "ns-resize",\n    w: "ew-resize",\n    nw: "nwse-resize",\n    ne: "nesw-resize",\n    se: "nwse-resize",\n    sw: "nesw-resize"\n  },\n      Fo = {\n    e: "w",\n    w: "e",\n    nw: "ne",\n    ne: "nw",\n    se: "sw",\n    sw: "se"\n  },\n      Oo = {\n    n: "s",\n    s: "n",\n    nw: "sw",\n    ne: "se",\n    se: "ne",\n    sw: "nw"\n  },\n      Uo = {\n    overlay: 1,\n    selection: 1,\n    n: null,\n    e: 1,\n    s: null,\n    w: -1,\n    nw: -1,\n    ne: 1,\n    se: 1,\n    sw: -1\n  },\n      Io = {\n    overlay: 1,\n    selection: 1,\n    n: -1,\n    e: null,\n    s: 1,\n    w: null,\n    nw: -1,\n    ne: -1,\n    se: 1,\n    sw: 1\n  };\n\n  function Bo(t) {\n    return {\n      type: t\n    };\n  }\n\n  function Yo(t) {\n    return !t.ctrlKey && !t.button;\n  }\n\n  function Lo() {\n    var t = this.ownerSVGElement || this;\n    return t.hasAttribute("viewBox") ? [[(t = t.viewBox.baseVal).x, t.y], [t.x + t.width, t.y + t.height]] : [[0, 0], [t.width.baseVal.value, t.height.baseVal.value]];\n  }\n\n  function jo() {\n    return navigator.maxTouchPoints || "ontouchstart" in this;\n  }\n\n  function Ho(t) {\n    for (; !t.__brush;) {\n      if (!(t = t.parentNode)) return;\n    }\n\n    return t.__brush;\n  }\n\n  function Xo(t) {\n    return t[0][0] === t[1][0] || t[0][1] === t[1][1];\n  }\n\n  function Go(t) {\n    var n,\n        e = Lo,\n        r = Yo,\n        i = jo,\n        o = !0,\n        a = pt("start", "brush", "end"),\n        u = 6;\n\n    function c(n) {\n      var e = n.property("__brush", g).selectAll(".overlay").data([Bo("overlay")]);\n      e.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", Ro.overlay).merge(e).each(function () {\n        var t = Ho(this).extent;\n        Dn(this).attr("x", t[0][0]).attr("y", t[0][1]).attr("width", t[1][0] - t[0][0]).attr("height", t[1][1] - t[0][1]);\n      }), n.selectAll(".selection").data([Bo("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", Ro.selection).attr("fill", "#777").attr("fill-opacity", .3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");\n      var r = n.selectAll(".handle").data(t.handles, function (t) {\n        return t.type;\n      });\n      r.exit().remove(), r.enter().append("rect").attr("class", function (t) {\n        return "handle handle--" + t.type;\n      }).attr("cursor", function (t) {\n        return Ro[t.type];\n      }), n.each(f).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", h).filter(i).on("touchstart.brush", h).on("touchmove.brush", d).on("touchend.brush touchcancel.brush", p).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");\n    }\n\n    function f() {\n      var t = Dn(this),\n          n = Ho(this).selection;\n      n ? (t.selectAll(".selection").style("display", null).attr("x", n[0][0]).attr("y", n[0][1]).attr("width", n[1][0] - n[0][0]).attr("height", n[1][1] - n[0][1]), t.selectAll(".handle").style("display", null).attr("x", function (t) {\n        return "e" === t.type[t.type.length - 1] ? n[1][0] - u / 2 : n[0][0] - u / 2;\n      }).attr("y", function (t) {\n        return "s" === t.type[0] ? n[1][1] - u / 2 : n[0][1] - u / 2;\n      }).attr("width", function (t) {\n        return "n" === t.type || "s" === t.type ? n[1][0] - n[0][0] + u : u;\n      }).attr("height", function (t) {\n        return "e" === t.type || "w" === t.type ? n[1][1] - n[0][1] + u : u;\n      })) : t.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);\n    }\n\n    function s(t, n, e) {\n      var r = t.__brush.emitter;\n      return !r || e && r.clean ? new l(t, n, e) : r;\n    }\n\n    function l(t, n, e) {\n      this.that = t, this.args = n, this.state = t.__brush, this.active = 0, this.clean = e;\n    }\n\n    function h(e) {\n      if ((!n || e.touches) && r.apply(this, arguments)) {\n        var i,\n            a,\n            u,\n            c,\n            l,\n            h,\n            d,\n            p,\n            g,\n            y,\n            v,\n            _ = this,\n            b = e.target.__data__.type,\n            m = "selection" === (o && e.metaKey ? b = "overlay" : b) ? Mo : o && e.altKey ? So : To,\n            x = t === Do ? null : Uo[b],\n            w = t === zo ? null : Io[b],\n            M = Ho(_),\n            A = M.extent,\n            T = M.selection,\n            S = A[0][0],\n            E = A[0][1],\n            k = A[1][0],\n            N = A[1][1],\n            C = 0,\n            P = 0,\n            z = x && w && o && e.shiftKey,\n            D = Array.from(e.touches || [e], function (t) {\n          var n = t.identifier;\n          return (t = Un(t, _)).point0 = t.slice(), t.identifier = n, t;\n        });\n\n        if ("overlay" === b) {\n          T && (g = !0);\n          var _n20 = [D[0], D[1] || D[0]];\n          M.selection = T = [[i = t === Do ? S : No(_n20[0][0], _n20[1][0]), u = t === zo ? E : No(_n20[0][1], _n20[1][1])], [l = t === Do ? k : ko(_n20[0][0], _n20[1][0]), d = t === zo ? N : ko(_n20[0][1], _n20[1][1])]], D.length > 1 && I();\n        } else i = T[0][0], u = T[0][1], l = T[1][0], d = T[1][1];\n\n        a = i, c = u, h = l, p = d;\n        var q = Dn(_).attr("pointer-events", "none"),\n            R = q.selectAll(".overlay").attr("cursor", Ro[b]);\n        gi(_);\n        var F = s(_, arguments, !0).beforestart();\n        if (e.touches) F.moved = U, F.ended = B;else {\n          var O = Dn(e.view).on("mousemove.brush", U, !0).on("mouseup.brush", B, !0);\n          o && O.on("keydown.brush", Y, !0).on("keyup.brush", L, !0), Yn(e.view);\n        }\n        f.call(_), F.start(e, m.name);\n      }\n\n      function U(t) {\n        var _iterator26 = _createForOfIteratorHelper(t.changedTouches || [t]),\n            _step26;\n\n        try {\n          for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n            var _n21 = _step26.value;\n\n            var _iterator28 = _createForOfIteratorHelper(D),\n                _step28;\n\n            try {\n              for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n                var _t7 = _step28.value;\n                _t7.identifier === _n21.identifier && (_t7.cur = Un(_n21, _));\n              }\n            } catch (err) {\n              _iterator28.e(err);\n            } finally {\n              _iterator28.f();\n            }\n          }\n        } catch (err) {\n          _iterator26.e(err);\n        } finally {\n          _iterator26.f();\n        }\n\n        if (z && !y && !v && 1 === D.length) {\n          var _t6 = D[0];\n          Eo(_t6.cur[0] - _t6[0]) > Eo(_t6.cur[1] - _t6[1]) ? v = !0 : y = !0;\n        }\n\n        var _iterator27 = _createForOfIteratorHelper(D),\n            _step27;\n\n        try {\n          for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n            var _t8 = _step27.value;\n            _t8.cur && (_t8[0] = _t8.cur[0], _t8[1] = _t8.cur[1]);\n          }\n        } catch (err) {\n          _iterator27.e(err);\n        } finally {\n          _iterator27.f();\n        }\n\n        g = !0, wo(t), I(t);\n      }\n\n      function I(t) {\n        var n = D[0],\n            e = n.point0;\n        var r;\n\n        switch (C = n[0] - e[0], P = n[1] - e[1], m) {\n          case Ao:\n          case Mo:\n            x && (C = ko(S - i, No(k - l, C)), a = i + C, h = l + C), w && (P = ko(E - u, No(N - d, P)), c = u + P, p = d + P);\n            break;\n\n          case To:\n            D[1] ? (x && (a = ko(S, No(k, D[0][0])), h = ko(S, No(k, D[1][0])), x = 1), w && (c = ko(E, No(N, D[0][1])), p = ko(E, No(N, D[1][1])), w = 1)) : (x < 0 ? (C = ko(S - i, No(k - i, C)), a = i + C, h = l) : x > 0 && (C = ko(S - l, No(k - l, C)), a = i, h = l + C), w < 0 ? (P = ko(E - u, No(N - u, P)), c = u + P, p = d) : w > 0 && (P = ko(E - d, No(N - d, P)), c = u, p = d + P));\n            break;\n\n          case So:\n            x && (a = ko(S, No(k, i - C * x)), h = ko(S, No(k, l + C * x))), w && (c = ko(E, No(N, u - P * w)), p = ko(E, No(N, d + P * w)));\n        }\n\n        h < a && (x *= -1, r = i, i = l, l = r, r = a, a = h, h = r, b in Fo && R.attr("cursor", Ro[b = Fo[b]])), p < c && (w *= -1, r = u, u = d, d = r, r = c, c = p, p = r, b in Oo && R.attr("cursor", Ro[b = Oo[b]])), M.selection && (T = M.selection), y && (a = T[0][0], h = T[1][0]), v && (c = T[0][1], p = T[1][1]), T[0][0] === a && T[0][1] === c && T[1][0] === h && T[1][1] === p || (M.selection = [[a, c], [h, p]], f.call(_), F.brush(t, m.name));\n      }\n\n      function B(t) {\n        if (xo(t), t.touches) {\n          if (t.touches.length) return;\n          n && clearTimeout(n), n = setTimeout(function () {\n            n = null;\n          }, 500);\n        } else Ln(t.view, g), O.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);\n\n        q.attr("pointer-events", "all"), R.attr("cursor", Ro.overlay), M.selection && (T = M.selection), Xo(T) && (M.selection = null, f.call(_)), F.end(t, m.name);\n      }\n\n      function Y(t) {\n        switch (t.keyCode) {\n          case 16:\n            z = x && w;\n            break;\n\n          case 18:\n            m === To && (x && (l = h - C * x, i = a + C * x), w && (d = p - P * w, u = c + P * w), m = So, I());\n            break;\n\n          case 32:\n            m !== To && m !== So || (x < 0 ? l = h - C : x > 0 && (i = a - C), w < 0 ? d = p - P : w > 0 && (u = c - P), m = Ao, R.attr("cursor", Ro.selection), I());\n            break;\n\n          default:\n            return;\n        }\n\n        wo(t);\n      }\n\n      function L(t) {\n        switch (t.keyCode) {\n          case 16:\n            z && (y = v = z = !1, I());\n            break;\n\n          case 18:\n            m === So && (x < 0 ? l = h : x > 0 && (i = a), w < 0 ? d = p : w > 0 && (u = c), m = To, I());\n            break;\n\n          case 32:\n            m === Ao && (t.altKey ? (x && (l = h - C * x, i = a + C * x), w && (d = p - P * w, u = c + P * w), m = So) : (x < 0 ? l = h : x > 0 && (i = a), w < 0 ? d = p : w > 0 && (u = c), m = To), R.attr("cursor", Ro[b]), I());\n            break;\n\n          default:\n            return;\n        }\n\n        wo(t);\n      }\n    }\n\n    function d(t) {\n      s(this, arguments).moved(t);\n    }\n\n    function p(t) {\n      s(this, arguments).ended(t);\n    }\n\n    function g() {\n      var n = this.__brush || {\n        selection: null\n      };\n      return n.extent = Po(e.apply(this, arguments)), n.dim = t, n;\n    }\n\n    return c.move = function (n, e) {\n      n.tween ? n.on("start.brush", function (t) {\n        s(this, arguments).beforestart().start(t);\n      }).on("interrupt.brush end.brush", function (t) {\n        s(this, arguments).end(t);\n      }).tween("brush", function () {\n        var n = this,\n            r = n.__brush,\n            i = s(n, arguments),\n            o = r.selection,\n            a = t.input("function" == typeof e ? e.apply(this, arguments) : e, r.extent),\n            u = Mr(o, a);\n\n        function c(t) {\n          r.selection = 1 === t && null === a ? null : u(t), f.call(n), i.brush();\n        }\n\n        return null !== o && null !== a ? c : c(1);\n      }) : n.each(function () {\n        var n = this,\n            r = arguments,\n            i = n.__brush,\n            o = t.input("function" == typeof e ? e.apply(n, r) : e, i.extent),\n            a = s(n, r).beforestart();\n        gi(n), i.selection = null === o ? null : o, f.call(n), a.start().brush().end();\n      });\n    }, c.clear = function (t) {\n      c.move(t, null);\n    }, l.prototype = {\n      beforestart: function beforestart() {\n        return 1 == ++this.active && (this.state.emitter = this, this.starting = !0), this;\n      },\n      start: function start(t, n) {\n        return this.starting ? (this.starting = !1, this.emit("start", t, n)) : this.emit("brush", t), this;\n      },\n      brush: function brush(t, n) {\n        return this.emit("brush", t, n), this;\n      },\n      end: function end(t, n) {\n        return 0 == --this.active && (delete this.state.emitter, this.emit("end", t, n)), this;\n      },\n      emit: function emit(n, e, r) {\n        var i = Dn(this.that).datum();\n        a.call(n, this.that, new mo(n, {\n          sourceEvent: e,\n          target: c,\n          selection: t.output(this.state.selection),\n          mode: r,\n          dispatch: a\n        }), i);\n      }\n    }, c.extent = function (t) {\n      return arguments.length ? (e = "function" == typeof t ? t : bo(Po(t)), c) : e;\n    }, c.filter = function (t) {\n      return arguments.length ? (r = "function" == typeof t ? t : bo(!!t), c) : r;\n    }, c.touchable = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : bo(!!t), c) : i;\n    }, c.handleSize = function (t) {\n      return arguments.length ? (u = +t, c) : u;\n    }, c.keyModifiers = function (t) {\n      return arguments.length ? (o = !!t, c) : o;\n    }, c.on = function () {\n      var t = a.on.apply(a, arguments);\n      return t === a ? c : t;\n    }, c;\n  }\n\n  var Vo = Math.abs,\n      $o = Math.cos,\n      Wo = Math.sin,\n      Zo = Math.PI,\n      Ko = Zo / 2,\n      Qo = 2 * Zo,\n      Jo = Math.max,\n      ta = 1e-12;\n\n  function na(t, n) {\n    return Array.from({\n      length: n - t\n    }, function (n, e) {\n      return t + e;\n    });\n  }\n\n  function ea(t) {\n    return function (n, e) {\n      return t(n.source.value + n.target.value, e.source.value + e.target.value);\n    };\n  }\n\n  function ra(t, n) {\n    var e = 0,\n        r = null,\n        i = null,\n        o = null;\n\n    function a(a) {\n      var u,\n          c = a.length,\n          f = new Array(c),\n          s = na(0, c),\n          l = new Array(c * c),\n          h = new Array(c),\n          d = 0;\n      a = Float64Array.from({\n        length: c * c\n      }, n ? function (t, n) {\n        return a[n % c][n / c | 0];\n      } : function (t, n) {\n        return a[n / c | 0][n % c];\n      });\n\n      for (var _n22 = 0; _n22 < c; ++_n22) {\n        var _e13 = 0;\n\n        for (var _r10 = 0; _r10 < c; ++_r10) {\n          _e13 += a[_n22 * c + _r10] + t * a[_r10 * c + _n22];\n        }\n\n        d += f[_n22] = _e13;\n      }\n\n      u = (d = Jo(0, Qo - e * c) / d) ? e : Qo / c;\n      {\n        var _n23 = 0;\n        r && s.sort(function (t, n) {\n          return r(f[t], f[n]);\n        });\n\n        var _iterator29 = _createForOfIteratorHelper(s),\n            _step29;\n\n        try {\n          var _loop = function _loop() {\n            var e = _step29.value;\n            var r = _n23;\n\n            if (t) {\n              var _t9 = na(1 + ~c, c).filter(function (t) {\n                return t < 0 ? a[~t * c + e] : a[e * c + t];\n              });\n\n              i && _t9.sort(function (t, n) {\n                return i(t < 0 ? -a[~t * c + e] : a[e * c + t], n < 0 ? -a[~n * c + e] : a[e * c + n]);\n              });\n\n              var _iterator30 = _createForOfIteratorHelper(_t9),\n                  _step30;\n\n              try {\n                for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n                  var _r11 = _step30.value;\n\n                  if (_r11 < 0) {\n                    (l[~_r11 * c + e] || (l[~_r11 * c + e] = {\n                      source: null,\n                      target: null\n                    })).target = {\n                      index: e,\n                      startAngle: _n23,\n                      endAngle: _n23 += a[~_r11 * c + e] * d,\n                      value: a[~_r11 * c + e]\n                    };\n                  } else {\n                    (l[e * c + _r11] || (l[e * c + _r11] = {\n                      source: null,\n                      target: null\n                    })).source = {\n                      index: e,\n                      startAngle: _n23,\n                      endAngle: _n23 += a[e * c + _r11] * d,\n                      value: a[e * c + _r11]\n                    };\n                  }\n                }\n              } catch (err) {\n                _iterator30.e(err);\n              } finally {\n                _iterator30.f();\n              }\n\n              h[e] = {\n                index: e,\n                startAngle: r,\n                endAngle: _n23,\n                value: f[e]\n              };\n            } else {\n              var _t10 = na(0, c).filter(function (t) {\n                return a[e * c + t] || a[t * c + e];\n              });\n\n              i && _t10.sort(function (t, n) {\n                return i(a[e * c + t], a[e * c + n]);\n              });\n\n              var _iterator31 = _createForOfIteratorHelper(_t10),\n                  _step31;\n\n              try {\n                for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n                  var _r12 = _step31.value;\n\n                  var _t11 = void 0;\n\n                  if (e < _r12 ? (_t11 = l[e * c + _r12] || (l[e * c + _r12] = {\n                    source: null,\n                    target: null\n                  }), _t11.source = {\n                    index: e,\n                    startAngle: _n23,\n                    endAngle: _n23 += a[e * c + _r12] * d,\n                    value: a[e * c + _r12]\n                  }) : (_t11 = l[_r12 * c + e] || (l[_r12 * c + e] = {\n                    source: null,\n                    target: null\n                  }), _t11.target = {\n                    index: e,\n                    startAngle: _n23,\n                    endAngle: _n23 += a[e * c + _r12] * d,\n                    value: a[e * c + _r12]\n                  }, e === _r12 && (_t11.source = _t11.target)), _t11.source && _t11.target && _t11.source.value < _t11.target.value) {\n                    var _n24 = _t11.source;\n                    _t11.source = _t11.target, _t11.target = _n24;\n                  }\n                }\n              } catch (err) {\n                _iterator31.e(err);\n              } finally {\n                _iterator31.f();\n              }\n\n              h[e] = {\n                index: e,\n                startAngle: r,\n                endAngle: _n23,\n                value: f[e]\n              };\n            }\n\n            _n23 += u;\n          };\n\n          for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n            _loop();\n          }\n        } catch (err) {\n          _iterator29.e(err);\n        } finally {\n          _iterator29.f();\n        }\n      }\n      return (l = Object.values(l)).groups = h, o ? l.sort(o) : l;\n    }\n\n    return a.padAngle = function (t) {\n      return arguments.length ? (e = Jo(0, t), a) : e;\n    }, a.sortGroups = function (t) {\n      return arguments.length ? (r = t, a) : r;\n    }, a.sortSubgroups = function (t) {\n      return arguments.length ? (i = t, a) : i;\n    }, a.sortChords = function (t) {\n      return arguments.length ? (null == t ? o = null : (o = ea(t))._ = t, a) : o && o._;\n    }, a;\n  }\n\n  var ia = Math.PI,\n      oa = 2 * ia,\n      aa = 1e-6,\n      ua = oa - aa;\n\n  function ca() {\n    this._x0 = this._y0 = this._x1 = this._y1 = null, this._ = "";\n  }\n\n  function fa() {\n    return new ca();\n  }\n\n  ca.prototype = fa.prototype = {\n    constructor: ca,\n    moveTo: function moveTo(t, n) {\n      this._ += "M" + (this._x0 = this._x1 = +t) + "," + (this._y0 = this._y1 = +n);\n    },\n    closePath: function closePath() {\n      null !== this._x1 && (this._x1 = this._x0, this._y1 = this._y0, this._ += "Z");\n    },\n    lineTo: function lineTo(t, n) {\n      this._ += "L" + (this._x1 = +t) + "," + (this._y1 = +n);\n    },\n    quadraticCurveTo: function quadraticCurveTo(t, n, e, r) {\n      this._ += "Q" + +t + "," + +n + "," + (this._x1 = +e) + "," + (this._y1 = +r);\n    },\n    bezierCurveTo: function bezierCurveTo(t, n, e, r, i, o) {\n      this._ += "C" + +t + "," + +n + "," + +e + "," + +r + "," + (this._x1 = +i) + "," + (this._y1 = +o);\n    },\n    arcTo: function arcTo(t, n, e, r, i) {\n      t = +t, n = +n, e = +e, r = +r, i = +i;\n      var o = this._x1,\n          a = this._y1,\n          u = e - t,\n          c = r - n,\n          f = o - t,\n          s = a - n,\n          l = f * f + s * s;\n      if (i < 0) throw new Error("negative radius: " + i);\n      if (null === this._x1) this._ += "M" + (this._x1 = t) + "," + (this._y1 = n);else if (l > aa) {\n        if (Math.abs(s * u - c * f) > aa && i) {\n          var h = e - o,\n              d = r - a,\n              p = u * u + c * c,\n              g = h * h + d * d,\n              y = Math.sqrt(p),\n              v = Math.sqrt(l),\n              _ = i * Math.tan((ia - Math.acos((p + l - g) / (2 * y * v))) / 2),\n              b = _ / v,\n              m = _ / y;\n\n          Math.abs(b - 1) > aa && (this._ += "L" + (t + b * f) + "," + (n + b * s)), this._ += "A" + i + "," + i + ",0,0," + +(s * h > f * d) + "," + (this._x1 = t + m * u) + "," + (this._y1 = n + m * c);\n        } else this._ += "L" + (this._x1 = t) + "," + (this._y1 = n);\n      } else ;\n    },\n    arc: function arc(t, n, e, r, i, o) {\n      t = +t, n = +n, o = !!o;\n      var a = (e = +e) * Math.cos(r),\n          u = e * Math.sin(r),\n          c = t + a,\n          f = n + u,\n          s = 1 ^ o,\n          l = o ? r - i : i - r;\n      if (e < 0) throw new Error("negative radius: " + e);\n      null === this._x1 ? this._ += "M" + c + "," + f : (Math.abs(this._x1 - c) > aa || Math.abs(this._y1 - f) > aa) && (this._ += "L" + c + "," + f), e && (l < 0 && (l = l % oa + oa), l > ua ? this._ += "A" + e + "," + e + ",0,1," + s + "," + (t - a) + "," + (n - u) + "A" + e + "," + e + ",0,1," + s + "," + (this._x1 = c) + "," + (this._y1 = f) : l > aa && (this._ += "A" + e + "," + e + ",0," + +(l >= ia) + "," + s + "," + (this._x1 = t + e * Math.cos(i)) + "," + (this._y1 = n + e * Math.sin(i))));\n    },\n    rect: function rect(t, n, e, r) {\n      this._ += "M" + (this._x0 = this._x1 = +t) + "," + (this._y0 = this._y1 = +n) + "h" + +e + "v" + +r + "h" + -e + "Z";\n    },\n    toString: function toString() {\n      return this._;\n    }\n  };\n  var sa = Array.prototype.slice;\n\n  function la(t) {\n    return function () {\n      return t;\n    };\n  }\n\n  function ha(t) {\n    return t.source;\n  }\n\n  function da(t) {\n    return t.target;\n  }\n\n  function pa(t) {\n    return t.radius;\n  }\n\n  function ga(t) {\n    return t.startAngle;\n  }\n\n  function ya(t) {\n    return t.endAngle;\n  }\n\n  function va() {\n    return 0;\n  }\n\n  function _a() {\n    return 10;\n  }\n\n  function ba(t) {\n    var n = ha,\n        e = da,\n        r = pa,\n        i = pa,\n        o = ga,\n        a = ya,\n        u = va,\n        c = null;\n\n    function f() {\n      var f,\n          s = n.apply(this, arguments),\n          l = e.apply(this, arguments),\n          h = u.apply(this, arguments) / 2,\n          d = sa.call(arguments),\n          p = +r.apply(this, (d[0] = s, d)),\n          g = o.apply(this, d) - Ko,\n          y = a.apply(this, d) - Ko,\n          v = +i.apply(this, (d[0] = l, d)),\n          _ = o.apply(this, d) - Ko,\n          b = a.apply(this, d) - Ko;\n\n      if (c || (c = f = fa()), h > ta && (Vo(y - g) > 2 * h + ta ? y > g ? (g += h, y -= h) : (g -= h, y += h) : g = y = (g + y) / 2, Vo(b - _) > 2 * h + ta ? b > _ ? (_ += h, b -= h) : (_ -= h, b += h) : _ = b = (_ + b) / 2), c.moveTo(p * $o(g), p * Wo(g)), c.arc(0, 0, p, g, y), g !== _ || y !== b) if (t) {\n        var m = +t.apply(this, arguments),\n            x = v - m,\n            w = (_ + b) / 2;\n        c.quadraticCurveTo(0, 0, x * $o(_), x * Wo(_)), c.lineTo(v * $o(w), v * Wo(w)), c.lineTo(x * $o(b), x * Wo(b));\n      } else c.quadraticCurveTo(0, 0, v * $o(_), v * Wo(_)), c.arc(0, 0, v, _, b);\n      if (c.quadraticCurveTo(0, 0, p * $o(g), p * Wo(g)), c.closePath(), f) return c = null, f + "" || null;\n    }\n\n    return t && (f.headRadius = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : la(+n), f) : t;\n    }), f.radius = function (t) {\n      return arguments.length ? (r = i = "function" == typeof t ? t : la(+t), f) : r;\n    }, f.sourceRadius = function (t) {\n      return arguments.length ? (r = "function" == typeof t ? t : la(+t), f) : r;\n    }, f.targetRadius = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : la(+t), f) : i;\n    }, f.startAngle = function (t) {\n      return arguments.length ? (o = "function" == typeof t ? t : la(+t), f) : o;\n    }, f.endAngle = function (t) {\n      return arguments.length ? (a = "function" == typeof t ? t : la(+t), f) : a;\n    }, f.padAngle = function (t) {\n      return arguments.length ? (u = "function" == typeof t ? t : la(+t), f) : u;\n    }, f.source = function (t) {\n      return arguments.length ? (n = t, f) : n;\n    }, f.target = function (t) {\n      return arguments.length ? (e = t, f) : e;\n    }, f.context = function (t) {\n      return arguments.length ? (c = null == t ? null : t, f) : c;\n    }, f;\n  }\n\n  var ma = Array.prototype.slice;\n\n  function xa(t, n) {\n    return t - n;\n  }\n\n  var wa = function wa(t) {\n    return function () {\n      return t;\n    };\n  };\n\n  function Ma(t, n) {\n    for (var e, r = -1, i = n.length; ++r < i;) {\n      if (e = Aa(t, n[r])) return e;\n    }\n\n    return 0;\n  }\n\n  function Aa(t, n) {\n    for (var e = n[0], r = n[1], i = -1, o = 0, a = t.length, u = a - 1; o < a; u = o++) {\n      var c = t[o],\n          f = c[0],\n          s = c[1],\n          l = t[u],\n          h = l[0],\n          d = l[1];\n      if (Ta(c, l, n)) return 0;\n      s > r != d > r && e < (h - f) * (r - s) / (d - s) + f && (i = -i);\n    }\n\n    return i;\n  }\n\n  function Ta(t, n, e) {\n    var r, i, o, a;\n    return function (t, n, e) {\n      return (n[0] - t[0]) * (e[1] - t[1]) == (e[0] - t[0]) * (n[1] - t[1]);\n    }(t, n, e) && (i = t[r = +(t[0] === n[0])], o = e[r], a = n[r], i <= o && o <= a || a <= o && o <= i);\n  }\n\n  function Sa() {}\n\n  var Ea = [[], [[[1, 1.5], [.5, 1]]], [[[1.5, 1], [1, 1.5]]], [[[1.5, 1], [.5, 1]]], [[[1, .5], [1.5, 1]]], [[[1, 1.5], [.5, 1]], [[1, .5], [1.5, 1]]], [[[1, .5], [1, 1.5]]], [[[1, .5], [.5, 1]]], [[[.5, 1], [1, .5]]], [[[1, 1.5], [1, .5]]], [[[.5, 1], [1, .5]], [[1.5, 1], [1, 1.5]]], [[[1.5, 1], [1, .5]]], [[[.5, 1], [1.5, 1]]], [[[1, 1.5], [1.5, 1]]], [[[.5, 1], [1, 1.5]]], []];\n\n  function ka() {\n    var t = 1,\n        n = 1,\n        e = U,\n        r = u;\n\n    function i(t) {\n      var n = e(t);\n      if (Array.isArray(n)) n = n.slice().sort(xa);else {\n        var r = p(t),\n            i = r[0],\n            a = r[1];\n        n = F(i, a, n), n = Z(Math.floor(i / n) * n, Math.floor(a / n) * n, n);\n      }\n      return n.map(function (n) {\n        return o(t, n);\n      });\n    }\n\n    function o(e, i) {\n      var o = [],\n          u = [];\n      return function (e, r, i) {\n        var o,\n            u,\n            c,\n            f,\n            s,\n            l,\n            h = new Array(),\n            d = new Array();\n        o = u = -1, f = e[0] >= r, Ea[f << 1].forEach(p);\n\n        for (; ++o < t - 1;) {\n          c = f, f = e[o + 1] >= r, Ea[c | f << 1].forEach(p);\n        }\n\n        Ea[f << 0].forEach(p);\n\n        for (; ++u < n - 1;) {\n          for (o = -1, f = e[u * t + t] >= r, s = e[u * t] >= r, Ea[f << 1 | s << 2].forEach(p); ++o < t - 1;) {\n            c = f, f = e[u * t + t + o + 1] >= r, l = s, s = e[u * t + o + 1] >= r, Ea[c | f << 1 | s << 2 | l << 3].forEach(p);\n          }\n\n          Ea[f | s << 3].forEach(p);\n        }\n\n        o = -1, s = e[u * t] >= r, Ea[s << 2].forEach(p);\n\n        for (; ++o < t - 1;) {\n          l = s, s = e[u * t + o + 1] >= r, Ea[s << 2 | l << 3].forEach(p);\n        }\n\n        function p(t) {\n          var n,\n              e,\n              r = [t[0][0] + o, t[0][1] + u],\n              c = [t[1][0] + o, t[1][1] + u],\n              f = a(r),\n              s = a(c);\n          (n = d[f]) ? (e = h[s]) ? (delete d[n.end], delete h[e.start], n === e ? (n.ring.push(c), i(n.ring)) : h[n.start] = d[e.end] = {\n            start: n.start,\n            end: e.end,\n            ring: n.ring.concat(e.ring)\n          }) : (delete d[n.end], n.ring.push(c), d[n.end = s] = n) : (n = h[s]) ? (e = d[f]) ? (delete h[n.start], delete d[e.end], n === e ? (n.ring.push(c), i(n.ring)) : h[e.start] = d[n.end] = {\n            start: e.start,\n            end: n.end,\n            ring: e.ring.concat(n.ring)\n          }) : (delete h[n.start], n.ring.unshift(r), h[n.start = f] = n) : h[f] = d[s] = {\n            start: f,\n            end: s,\n            ring: [r, c]\n          };\n        }\n\n        Ea[s << 3].forEach(p);\n      }(e, i, function (t) {\n        r(t, e, i), function (t) {\n          for (var n = 0, e = t.length, r = t[e - 1][1] * t[0][0] - t[e - 1][0] * t[0][1]; ++n < e;) {\n            r += t[n - 1][1] * t[n][0] - t[n - 1][0] * t[n][1];\n          }\n\n          return r;\n        }(t) > 0 ? o.push([t]) : u.push(t);\n      }), u.forEach(function (t) {\n        for (var n, e = 0, r = o.length; e < r; ++e) {\n          if (-1 !== Ma((n = o[e])[0], t)) return void n.push(t);\n        }\n      }), {\n        type: "MultiPolygon",\n        value: i,\n        coordinates: o\n      };\n    }\n\n    function a(n) {\n      return 2 * n[0] + n[1] * (t + 1) * 4;\n    }\n\n    function u(e, r, i) {\n      e.forEach(function (e) {\n        var o,\n            a = e[0],\n            u = e[1],\n            c = 0 | a,\n            f = 0 | u,\n            s = r[f * t + c];\n        a > 0 && a < t && c === a && (o = r[f * t + c - 1], e[0] = a + (i - o) / (s - o) - .5), u > 0 && u < n && f === u && (o = r[(f - 1) * t + c], e[1] = u + (i - o) / (s - o) - .5);\n      });\n    }\n\n    return i.contour = o, i.size = function (e) {\n      if (!arguments.length) return [t, n];\n      var r = Math.floor(e[0]),\n          o = Math.floor(e[1]);\n      if (!(r >= 0 && o >= 0)) throw new Error("invalid size");\n      return t = r, n = o, i;\n    }, i.thresholds = function (t) {\n      return arguments.length ? (e = "function" == typeof t ? t : Array.isArray(t) ? wa(ma.call(t)) : wa(t), i) : e;\n    }, i.smooth = function (t) {\n      return arguments.length ? (r = t ? u : Sa, i) : r === u;\n    }, i;\n  }\n\n  function Na(t, n, e) {\n    for (var r = t.width, i = t.height, o = 1 + (e << 1), a = 0; a < i; ++a) {\n      for (var u = 0, c = 0; u < r + e; ++u) {\n        u < r && (c += t.data[u + a * r]), u >= e && (u >= o && (c -= t.data[u - o + a * r]), n.data[u - e + a * r] = c / Math.min(u + 1, r - 1 + o - u, o));\n      }\n    }\n  }\n\n  function Ca(t, n, e) {\n    for (var r = t.width, i = t.height, o = 1 + (e << 1), a = 0; a < r; ++a) {\n      for (var u = 0, c = 0; u < i + e; ++u) {\n        u < i && (c += t.data[a + u * r]), u >= e && (u >= o && (c -= t.data[a + (u - o) * r]), n.data[a + (u - e) * r] = c / Math.min(u + 1, i - 1 + o - u, o));\n      }\n    }\n  }\n\n  function Pa(t) {\n    return t[0];\n  }\n\n  function za(t) {\n    return t[1];\n  }\n\n  function Da() {\n    return 1;\n  }\n\n  var qa = Math.pow(2, -52),\n      Ra = new Uint32Array(512);\n\n  var Fa = /*#__PURE__*/function () {\n    function Fa(t) {\n      _classCallCheck(this, Fa);\n\n      var n = t.length >> 1;\n      if (n > 0 && "number" != typeof t[0]) throw new Error("Expected coords to contain numbers.");\n      this.coords = t;\n      var e = Math.max(2 * n - 5, 0);\n      this._triangles = new Uint32Array(3 * e), this._halfedges = new Int32Array(3 * e), this._hashSize = Math.ceil(Math.sqrt(n)), this._hullPrev = new Uint32Array(n), this._hullNext = new Uint32Array(n), this._hullTri = new Uint32Array(n), this._hullHash = new Int32Array(this._hashSize).fill(-1), this._ids = new Uint32Array(n), this._dists = new Float64Array(n), this.update();\n    }\n\n    _createClass(Fa, [{\n      key: "update",\n      value: function update() {\n        var t = this.coords,\n            n = this._hullPrev,\n            e = this._hullNext,\n            r = this._hullTri,\n            i = this._hullHash,\n            o = t.length >> 1;\n        var a = 1 / 0,\n            u = 1 / 0,\n            c = -1 / 0,\n            f = -1 / 0;\n\n        for (var _n25 = 0; _n25 < o; _n25++) {\n          var _e14 = t[2 * _n25],\n              _r13 = t[2 * _n25 + 1];\n          _e14 < a && (a = _e14), _r13 < u && (u = _r13), _e14 > c && (c = _e14), _r13 > f && (f = _r13), this._ids[_n25] = _n25;\n        }\n\n        var s = (a + c) / 2,\n            l = (u + f) / 2;\n        var h,\n            d,\n            p,\n            g = 1 / 0;\n\n        for (var _n26 = 0; _n26 < o; _n26++) {\n          var _e15 = Oa(s, l, t[2 * _n26], t[2 * _n26 + 1]);\n\n          _e15 < g && (h = _n26, g = _e15);\n        }\n\n        var y = t[2 * h],\n            v = t[2 * h + 1];\n        g = 1 / 0;\n\n        for (var _n27 = 0; _n27 < o; _n27++) {\n          if (_n27 === h) continue;\n\n          var _e16 = Oa(y, v, t[2 * _n27], t[2 * _n27 + 1]);\n\n          _e16 < g && _e16 > 0 && (d = _n27, g = _e16);\n        }\n\n        var _ = t[2 * d],\n            b = t[2 * d + 1],\n            m = 1 / 0;\n\n        for (var _n28 = 0; _n28 < o; _n28++) {\n          if (_n28 === h || _n28 === d) continue;\n\n          var _e17 = Ya(y, v, _, b, t[2 * _n28], t[2 * _n28 + 1]);\n\n          _e17 < m && (p = _n28, m = _e17);\n        }\n\n        var x = t[2 * p],\n            w = t[2 * p + 1];\n\n        if (m === 1 / 0) {\n          for (var _n30 = 0; _n30 < o; _n30++) {\n            this._dists[_n30] = t[2 * _n30] - t[0] || t[2 * _n30 + 1] - t[1];\n          }\n\n          La(this._ids, this._dists, 0, o - 1);\n\n          var _n29 = new Uint32Array(o);\n\n          var _e18 = 0;\n\n          for (var _t12 = 0, _r14 = -1 / 0; _t12 < o; _t12++) {\n            var _i11 = this._ids[_t12];\n            this._dists[_i11] > _r14 && (_n29[_e18++] = _i11, _r14 = this._dists[_i11]);\n          }\n\n          return this.hull = _n29.subarray(0, _e18), this.triangles = new Uint32Array(0), void (this.halfedges = new Uint32Array(0));\n        }\n\n        if (Ia(y, v, _, b, x, w)) {\n          var _t13 = d,\n              _n31 = _,\n              _e19 = b;\n          d = p, _ = x, b = w, p = _t13, x = _n31, w = _e19;\n        }\n\n        var M = function (t, n, e, r, i, o) {\n          var a = e - t,\n              u = r - n,\n              c = i - t,\n              f = o - n,\n              s = a * a + u * u,\n              l = c * c + f * f,\n              h = .5 / (a * f - u * c);\n          return {\n            x: t + (f * s - u * l) * h,\n            y: n + (a * l - c * s) * h\n          };\n        }(y, v, _, b, x, w);\n\n        this._cx = M.x, this._cy = M.y;\n\n        for (var _n32 = 0; _n32 < o; _n32++) {\n          this._dists[_n32] = Oa(t[2 * _n32], t[2 * _n32 + 1], M.x, M.y);\n        }\n\n        La(this._ids, this._dists, 0, o - 1), this._hullStart = h;\n        var A = 3;\n        e[h] = n[p] = d, e[d] = n[h] = p, e[p] = n[d] = h, r[h] = 0, r[d] = 1, r[p] = 2, i.fill(-1), i[this._hashKey(y, v)] = h, i[this._hashKey(_, b)] = d, i[this._hashKey(x, w)] = p, this.trianglesLen = 0, this._addTriangle(h, d, p, -1, -1, -1);\n\n        for (var _o9, _a6, _u5 = 0; _u5 < this._ids.length; _u5++) {\n          var _c3 = this._ids[_u5],\n              _f3 = t[2 * _c3],\n              _s2 = t[2 * _c3 + 1];\n          if (_u5 > 0 && Math.abs(_f3 - _o9) <= qa && Math.abs(_s2 - _a6) <= qa) continue;\n          if (_o9 = _f3, _a6 = _s2, _c3 === h || _c3 === d || _c3 === p) continue;\n          var _l2 = 0;\n\n          for (var _t14 = 0, _n33 = this._hashKey(_f3, _s2); _t14 < this._hashSize && (_l2 = i[(_n33 + _t14) % this._hashSize], -1 === _l2 || _l2 === e[_l2]); _t14++) {\n            ;\n          }\n\n          _l2 = n[_l2];\n\n          var _g2 = void 0,\n              _y2 = _l2;\n\n          for (; _g2 = e[_y2], !Ia(_f3, _s2, t[2 * _y2], t[2 * _y2 + 1], t[2 * _g2], t[2 * _g2 + 1]);) {\n            if (_y2 = _g2, _y2 === _l2) {\n              _y2 = -1;\n              break;\n            }\n          }\n\n          if (-1 === _y2) continue;\n\n          var _v2 = this._addTriangle(_y2, _c3, e[_y2], -1, -1, r[_y2]);\n\n          r[_c3] = this._legalize(_v2 + 2), r[_y2] = _v2, A++;\n          var _2 = e[_y2];\n\n          for (; _g2 = e[_2], Ia(_f3, _s2, t[2 * _2], t[2 * _2 + 1], t[2 * _g2], t[2 * _g2 + 1]);) {\n            _v2 = this._addTriangle(_2, _c3, _g2, r[_c3], -1, r[_2]), r[_c3] = this._legalize(_v2 + 2), e[_2] = _2, A--, _2 = _g2;\n          }\n\n          if (_y2 === _l2) for (; _g2 = n[_y2], Ia(_f3, _s2, t[2 * _g2], t[2 * _g2 + 1], t[2 * _y2], t[2 * _y2 + 1]);) {\n            _v2 = this._addTriangle(_g2, _c3, _y2, -1, r[_y2], r[_g2]), this._legalize(_v2 + 2), r[_g2] = _v2, e[_y2] = _y2, A--, _y2 = _g2;\n          }\n          this._hullStart = n[_c3] = _y2, e[_y2] = n[_2] = _c3, e[_c3] = _2, i[this._hashKey(_f3, _s2)] = _c3, i[this._hashKey(t[2 * _y2], t[2 * _y2 + 1])] = _y2;\n        }\n\n        this.hull = new Uint32Array(A);\n\n        for (var _t15 = 0, _n34 = this._hullStart; _t15 < A; _t15++) {\n          this.hull[_t15] = _n34, _n34 = e[_n34];\n        }\n\n        this.triangles = this._triangles.subarray(0, this.trianglesLen), this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n      }\n    }, {\n      key: "_hashKey",\n      value: function _hashKey(t, n) {\n        return Math.floor(function (t, n) {\n          var e = t / (Math.abs(t) + Math.abs(n));\n          return (n > 0 ? 3 - e : 1 + e) / 4;\n        }(t - this._cx, n - this._cy) * this._hashSize) % this._hashSize;\n      }\n    }, {\n      key: "_legalize",\n      value: function _legalize(t) {\n        var n = this._triangles,\n            e = this._halfedges,\n            r = this.coords;\n        var i = 0,\n            o = 0;\n\n        for (;;) {\n          var _a7 = e[t],\n              _u6 = t - t % 3;\n\n          if (o = _u6 + (t + 2) % 3, -1 === _a7) {\n            if (0 === i) break;\n            t = Ra[--i];\n            continue;\n          }\n\n          var _c4 = _a7 - _a7 % 3,\n              _f4 = _u6 + (t + 1) % 3,\n              _s3 = _c4 + (_a7 + 2) % 3,\n              _l3 = n[o],\n              _h2 = n[t],\n              _d2 = n[_f4],\n              _p2 = n[_s3];\n\n          if (Ba(r[2 * _l3], r[2 * _l3 + 1], r[2 * _h2], r[2 * _h2 + 1], r[2 * _d2], r[2 * _d2 + 1], r[2 * _p2], r[2 * _p2 + 1])) {\n            n[t] = _p2, n[_a7] = _l3;\n            var _r15 = e[_s3];\n\n            if (-1 === _r15) {\n              var _n35 = this._hullStart;\n\n              do {\n                if (this._hullTri[_n35] === _s3) {\n                  this._hullTri[_n35] = t;\n                  break;\n                }\n\n                _n35 = this._hullPrev[_n35];\n              } while (_n35 !== this._hullStart);\n            }\n\n            this._link(t, _r15), this._link(_a7, e[o]), this._link(o, _s3);\n\n            var _u7 = _c4 + (_a7 + 1) % 3;\n\n            i < Ra.length && (Ra[i++] = _u7);\n          } else {\n            if (0 === i) break;\n            t = Ra[--i];\n          }\n        }\n\n        return o;\n      }\n    }, {\n      key: "_link",\n      value: function _link(t, n) {\n        this._halfedges[t] = n, -1 !== n && (this._halfedges[n] = t);\n      }\n    }, {\n      key: "_addTriangle",\n      value: function _addTriangle(t, n, e, r, i, o) {\n        var a = this.trianglesLen;\n        return this._triangles[a] = t, this._triangles[a + 1] = n, this._triangles[a + 2] = e, this._link(a, r), this._link(a + 1, i), this._link(a + 2, o), this.trianglesLen += 3, a;\n      }\n    }], [{\n      key: "from",\n      value: function from(t) {\n        var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Ha;\n        var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Xa;\n        var r = t.length,\n            i = new Float64Array(2 * r);\n\n        for (var _o10 = 0; _o10 < r; _o10++) {\n          var _r16 = t[_o10];\n          i[2 * _o10] = n(_r16), i[2 * _o10 + 1] = e(_r16);\n        }\n\n        return new Fa(i);\n      }\n    }]);\n\n    return Fa;\n  }();\n\n  function Oa(t, n, e, r) {\n    var i = t - e,\n        o = n - r;\n    return i * i + o * o;\n  }\n\n  function Ua(t, n, e, r, i, o) {\n    var a = (r - n) * (i - t),\n        u = (e - t) * (o - n);\n    return Math.abs(a - u) >= 33306690738754716e-32 * Math.abs(a + u) ? a - u : 0;\n  }\n\n  function Ia(t, n, e, r, i, o) {\n    return (Ua(i, o, t, n, e, r) || Ua(t, n, e, r, i, o) || Ua(e, r, i, o, t, n)) < 0;\n  }\n\n  function Ba(t, n, e, r, i, o, a, u) {\n    var c = t - a,\n        f = n - u,\n        s = e - a,\n        l = r - u,\n        h = i - a,\n        d = o - u,\n        p = s * s + l * l,\n        g = h * h + d * d;\n    return c * (l * g - p * d) - f * (s * g - p * h) + (c * c + f * f) * (s * d - l * h) < 0;\n  }\n\n  function Ya(t, n, e, r, i, o) {\n    var a = e - t,\n        u = r - n,\n        c = i - t,\n        f = o - n,\n        s = a * a + u * u,\n        l = c * c + f * f,\n        h = .5 / (a * f - u * c),\n        d = (f * s - u * l) * h,\n        p = (a * l - c * s) * h;\n    return d * d + p * p;\n  }\n\n  function La(t, n, e, r) {\n    if (r - e <= 20) for (var _i12 = e + 1; _i12 <= r; _i12++) {\n      var _r17 = t[_i12],\n          _o11 = n[_r17];\n\n      var _a8 = _i12 - 1;\n\n      for (; _a8 >= e && n[t[_a8]] > _o11;) {\n        t[_a8 + 1] = t[_a8--];\n      }\n\n      t[_a8 + 1] = _r17;\n    } else {\n      var _i13 = e + 1,\n          _o12 = r;\n\n      ja(t, e + r >> 1, _i13), n[t[e]] > n[t[r]] && ja(t, e, r), n[t[_i13]] > n[t[r]] && ja(t, _i13, r), n[t[e]] > n[t[_i13]] && ja(t, e, _i13);\n      var _a9 = t[_i13],\n          _u8 = n[_a9];\n\n      for (;;) {\n        do {\n          _i13++;\n        } while (n[t[_i13]] < _u8);\n\n        do {\n          _o12--;\n        } while (n[t[_o12]] > _u8);\n\n        if (_o12 < _i13) break;\n        ja(t, _i13, _o12);\n      }\n\n      t[e + 1] = t[_o12], t[_o12] = _a9, r - _i13 + 1 >= _o12 - e ? (La(t, n, _i13, r), La(t, n, e, _o12 - 1)) : (La(t, n, e, _o12 - 1), La(t, n, _i13, r));\n    }\n  }\n\n  function ja(t, n, e) {\n    var r = t[n];\n    t[n] = t[e], t[e] = r;\n  }\n\n  function Ha(t) {\n    return t[0];\n  }\n\n  function Xa(t) {\n    return t[1];\n  }\n\n  var Ga = 1e-6;\n\n  var Va = /*#__PURE__*/function () {\n    function Va() {\n      _classCallCheck(this, Va);\n\n      this._x0 = this._y0 = this._x1 = this._y1 = null, this._ = "";\n    }\n\n    _createClass(Va, [{\n      key: "moveTo",\n      value: function moveTo(t, n) {\n        this._ += "M".concat(this._x0 = this._x1 = +t, ",").concat(this._y0 = this._y1 = +n);\n      }\n    }, {\n      key: "closePath",\n      value: function closePath() {\n        null !== this._x1 && (this._x1 = this._x0, this._y1 = this._y0, this._ += "Z");\n      }\n    }, {\n      key: "lineTo",\n      value: function lineTo(t, n) {\n        this._ += "L".concat(this._x1 = +t, ",").concat(this._y1 = +n);\n      }\n    }, {\n      key: "arc",\n      value: function arc(t, n, e) {\n        var r = (t = +t) + (e = +e),\n            i = n = +n;\n        if (e < 0) throw new Error("negative radius");\n        null === this._x1 ? this._ += "M".concat(r, ",").concat(i) : (Math.abs(this._x1 - r) > Ga || Math.abs(this._y1 - i) > Ga) && (this._ += "L" + r + "," + i), e && (this._ += "A".concat(e, ",").concat(e, ",0,1,1,").concat(t - e, ",").concat(n, "A").concat(e, ",").concat(e, ",0,1,1,").concat(this._x1 = r, ",").concat(this._y1 = i));\n      }\n    }, {\n      key: "rect",\n      value: function rect(t, n, e, r) {\n        this._ += "M".concat(this._x0 = this._x1 = +t, ",").concat(this._y0 = this._y1 = +n, "h").concat(+e, "v").concat(+r, "h").concat(-e, "Z");\n      }\n    }, {\n      key: "value",\n      value: function value() {\n        return this._ || null;\n      }\n    }]);\n\n    return Va;\n  }();\n\n  var $a = /*#__PURE__*/function () {\n    function $a() {\n      _classCallCheck(this, $a);\n\n      this._ = [];\n    }\n\n    _createClass($a, [{\n      key: "moveTo",\n      value: function moveTo(t, n) {\n        this._.push([t, n]);\n      }\n    }, {\n      key: "closePath",\n      value: function closePath() {\n        this._.push(this._[0].slice());\n      }\n    }, {\n      key: "lineTo",\n      value: function lineTo(t, n) {\n        this._.push([t, n]);\n      }\n    }, {\n      key: "value",\n      value: function value() {\n        return this._.length ? this._ : null;\n      }\n    }]);\n\n    return $a;\n  }();\n\n  var Wa = /*#__PURE__*/function () {\n    function Wa(t) {\n      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 960, 500],\n          _ref7 = _slicedToArray(_ref6, 4),\n          n = _ref7[0],\n          e = _ref7[1],\n          r = _ref7[2],\n          i = _ref7[3];\n\n      _classCallCheck(this, Wa);\n\n      if (!((r = +r) >= (n = +n) && (i = +i) >= (e = +e))) throw new Error("invalid bounds");\n      this.delaunay = t, this._circumcenters = new Float64Array(2 * t.points.length), this.vectors = new Float64Array(2 * t.points.length), this.xmax = r, this.xmin = n, this.ymax = i, this.ymin = e, this._init();\n    }\n\n    _createClass(Wa, [{\n      key: "update",\n      value: function update() {\n        return this.delaunay.update(), this._init(), this;\n      }\n    }, {\n      key: "_init",\n      value: function _init() {\n        var _this$delaunay = this.delaunay,\n            t = _this$delaunay.points,\n            n = _this$delaunay.hull,\n            e = _this$delaunay.triangles,\n            r = this.vectors,\n            i = this.circumcenters = this._circumcenters.subarray(0, e.length / 3 * 2);\n\n        for (var _n36, _r18, _o13 = 0, _a10 = 0, _u9 = e.length; _o13 < _u9; _o13 += 3, _a10 += 2) {\n          var _u10 = 2 * e[_o13],\n              _c5 = 2 * e[_o13 + 1],\n              _f5 = 2 * e[_o13 + 2],\n              _s4 = t[_u10],\n              _l4 = t[_u10 + 1],\n              _h3 = t[_c5],\n              _d3 = t[_c5 + 1],\n              _p3 = t[_f5],\n              _g3 = t[_f5 + 1],\n              _y3 = _h3 - _s4,\n              _v3 = _d3 - _l4,\n              _3 = _p3 - _s4,\n              _b2 = _g3 - _l4,\n              _m2 = _y3 * _y3 + _v3 * _v3,\n              _x = _3 * _3 + _b2 * _b2,\n              _w = 2 * (_y3 * _b2 - _v3 * _3);\n\n          if (_w) {\n            if (Math.abs(_w) < 1e-8) _n36 = (_s4 + _p3) / 2, _r18 = (_l4 + _g3) / 2;else {\n              var _t16 = 1 / _w;\n\n              _n36 = _s4 + (_b2 * _m2 - _v3 * _x) * _t16, _r18 = _l4 + (_y3 * _x - _3 * _m2) * _t16;\n            }\n          } else _n36 = (_s4 + _p3) / 2 - 1e8 * _b2, _r18 = (_l4 + _g3) / 2 + 1e8 * _3;\n          i[_a10] = _n36, i[_a10 + 1] = _r18;\n        }\n\n        var o,\n            a,\n            u,\n            c = n[n.length - 1],\n            f = 4 * c,\n            s = t[2 * c],\n            l = t[2 * c + 1];\n        r.fill(0);\n\n        for (var _e20 = 0; _e20 < n.length; ++_e20) {\n          c = n[_e20], o = f, a = s, u = l, f = 4 * c, s = t[2 * c], l = t[2 * c + 1], r[o + 2] = r[f] = u - l, r[o + 3] = r[f + 1] = s - a;\n        }\n      }\n    }, {\n      key: "render",\n      value: function render(t) {\n        var n = null == t ? t = new Va() : void 0,\n            _this$delaunay2 = this.delaunay,\n            e = _this$delaunay2.halfedges,\n            r = _this$delaunay2.inedges,\n            i = _this$delaunay2.hull,\n            o = this.circumcenters,\n            a = this.vectors;\n        if (i.length <= 1) return null;\n\n        for (var _n37 = 0, _r19 = e.length; _n37 < _r19; ++_n37) {\n          var _r20 = e[_n37];\n          if (_r20 < _n37) continue;\n\n          var _i14 = 2 * Math.floor(_n37 / 3),\n              _a11 = 2 * Math.floor(_r20 / 3),\n              _u11 = o[_i14],\n              _c6 = o[_i14 + 1],\n              _f6 = o[_a11],\n              _s5 = o[_a11 + 1];\n\n          this._renderSegment(_u11, _c6, _f6, _s5, t);\n        }\n\n        var u,\n            c = i[i.length - 1];\n\n        for (var _n38 = 0; _n38 < i.length; ++_n38) {\n          u = c, c = i[_n38];\n\n          var _e21 = 2 * Math.floor(r[c] / 3),\n              _f7 = o[_e21],\n              _s6 = o[_e21 + 1],\n              _l5 = 4 * u,\n              _h4 = this._project(_f7, _s6, a[_l5 + 2], a[_l5 + 3]);\n\n          _h4 && this._renderSegment(_f7, _s6, _h4[0], _h4[1], t);\n        }\n\n        return n && n.value();\n      }\n    }, {\n      key: "renderBounds",\n      value: function renderBounds(t) {\n        var n = null == t ? t = new Va() : void 0;\n        return t.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin), n && n.value();\n      }\n    }, {\n      key: "renderCell",\n      value: function renderCell(t, n) {\n        var e = null == n ? n = new Va() : void 0,\n            r = this._clip(t);\n\n        if (null === r || !r.length) return;\n        n.moveTo(r[0], r[1]);\n        var i = r.length;\n\n        for (; r[0] === r[i - 2] && r[1] === r[i - 1] && i > 1;) {\n          i -= 2;\n        }\n\n        for (var _t17 = 2; _t17 < i; _t17 += 2) {\n          r[_t17] === r[_t17 - 2] && r[_t17 + 1] === r[_t17 - 1] || n.lineTo(r[_t17], r[_t17 + 1]);\n        }\n\n        return n.closePath(), e && e.value();\n      }\n    }, {\n      key: "cellPolygons",\n      value: /*#__PURE__*/regenerator_default().mark(function cellPolygons() {\n        var t, _n39, _e22, _t18;\n\n        return regenerator_default().wrap(function cellPolygons$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                t = this.delaunay.points;\n                _n39 = 0, _e22 = t.length / 2;\n\n              case 2:\n                if (!(_n39 < _e22)) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                _t18 = this.cellPolygon(_n39);\n                _context4.t0 = _t18;\n\n                if (!_context4.t0) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                _t18.index = _n39;\n                _context4.next = 9;\n                return _t18;\n\n              case 9:\n                ++_n39;\n                _context4.next = 2;\n                break;\n\n              case 12:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, cellPolygons, this);\n      })\n    }, {\n      key: "cellPolygon",\n      value: function cellPolygon(t) {\n        var n = new $a();\n        return this.renderCell(t, n), n.value();\n      }\n    }, {\n      key: "_renderSegment",\n      value: function _renderSegment(t, n, e, r, i) {\n        var o;\n\n        var a = this._regioncode(t, n),\n            u = this._regioncode(e, r);\n\n        0 === a && 0 === u ? (i.moveTo(t, n), i.lineTo(e, r)) : (o = this._clipSegment(t, n, e, r, a, u)) && (i.moveTo(o[0], o[1]), i.lineTo(o[2], o[3]));\n      }\n    }, {\n      key: "contains",\n      value: function contains(t, n, e) {\n        return (n = +n) == n && (e = +e) == e && this.delaunay._step(t, n, e) === t;\n      }\n    }, {\n      key: "neighbors",\n      value: /*#__PURE__*/regenerator_default().mark(function neighbors(t) {\n        var n, _iterator32, _step32, _e23, _t19, _r21, _i15, _o14, _a12;\n\n        return regenerator_default().wrap(function neighbors$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                n = this._clip(t);\n\n                if (!n) {\n                  _context5.next = 33;\n                  break;\n                }\n\n                _iterator32 = _createForOfIteratorHelper(this.delaunay.neighbors(t));\n                _context5.prev = 3;\n\n                _iterator32.s();\n\n              case 5:\n                if ((_step32 = _iterator32.n()).done) {\n                  _context5.next = 25;\n                  break;\n                }\n\n                _e23 = _step32.value;\n                _t19 = this._clip(_e23);\n\n                if (!_t19) {\n                  _context5.next = 23;\n                  break;\n                }\n\n                _r21 = 0, _i15 = n.length;\n\n              case 10:\n                if (!(_r21 < _i15)) {\n                  _context5.next = 23;\n                  break;\n                }\n\n                _o14 = 0, _a12 = _t19.length;\n\n              case 12:\n                if (!(_o14 < _a12)) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                if (!(n[_r21] == _t19[_o14] && n[_r21 + 1] == _t19[_o14 + 1] && n[(_r21 + 2) % _i15] == _t19[(_o14 + _a12 - 2) % _a12] && n[(_r21 + 3) % _i15] == _t19[(_o14 + _a12 - 1) % _a12])) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                _context5.next = 16;\n                return _e23;\n\n              case 16:\n                return _context5.abrupt("break", 23);\n\n              case 17:\n                _o14 += 2;\n                _context5.next = 12;\n                break;\n\n              case 20:\n                _r21 += 2;\n                _context5.next = 10;\n                break;\n\n              case 23:\n                _context5.next = 5;\n                break;\n\n              case 25:\n                _context5.next = 30;\n                break;\n\n              case 27:\n                _context5.prev = 27;\n                _context5.t0 = _context5["catch"](3);\n\n                _iterator32.e(_context5.t0);\n\n              case 30:\n                _context5.prev = 30;\n\n                _iterator32.f();\n\n                return _context5.finish(30);\n\n              case 33:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, neighbors, this, [[3, 27, 30, 33]]);\n      })\n    }, {\n      key: "_cell",\n      value: function _cell(t) {\n        var n = this.circumcenters,\n            _this$delaunay3 = this.delaunay,\n            e = _this$delaunay3.inedges,\n            r = _this$delaunay3.halfedges,\n            i = _this$delaunay3.triangles,\n            o = e[t];\n        if (-1 === o) return null;\n        var a = [];\n        var u = o;\n\n        do {\n          var _e24 = Math.floor(u / 3);\n\n          if (a.push(n[2 * _e24], n[2 * _e24 + 1]), u = u % 3 == 2 ? u - 2 : u + 1, i[u] !== t) break;\n          u = r[u];\n        } while (u !== o && -1 !== u);\n\n        return a;\n      }\n    }, {\n      key: "_clip",\n      value: function _clip(t) {\n        if (0 === t && 1 === this.delaunay.hull.length) return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n\n        var n = this._cell(t);\n\n        if (null === n) return null;\n        var e = this.vectors,\n            r = 4 * t;\n        return e[r] || e[r + 1] ? this._clipInfinite(t, n, e[r], e[r + 1], e[r + 2], e[r + 3]) : this._clipFinite(t, n);\n      }\n    }, {\n      key: "_clipFinite",\n      value: function _clipFinite(t, n) {\n        var e = n.length;\n\n        var r,\n            i,\n            o,\n            a,\n            u,\n            c = null,\n            f = n[e - 2],\n            s = n[e - 1],\n            l = this._regioncode(f, s);\n\n        for (var _h5 = 0; _h5 < e; _h5 += 2) {\n          if (r = f, i = s, f = n[_h5], s = n[_h5 + 1], o = l, l = this._regioncode(f, s), 0 === o && 0 === l) a = u, u = 0, c ? c.push(f, s) : c = [f, s];else {\n            var _n40 = void 0,\n                _e25 = void 0,\n                _h6 = void 0,\n                _d4 = void 0,\n                _p4 = void 0;\n\n            if (0 === o) {\n              if (null === (_n40 = this._clipSegment(r, i, f, s, o, l))) continue;\n              var _n41 = _n40;\n\n              var _n42 = _slicedToArray(_n41, 4);\n\n              _e25 = _n42[0];\n              _h6 = _n42[1];\n              _d4 = _n42[2];\n              _p4 = _n42[3];\n            } else {\n              var _n43, _n44;\n\n              if (null === (_n40 = this._clipSegment(f, s, r, i, l, o))) continue;\n              (_n43 = _n40, _n44 = _slicedToArray(_n43, 4), _d4 = _n44[0], _p4 = _n44[1], _e25 = _n44[2], _h6 = _n44[3], _n43), a = u, u = this._edgecode(_e25, _h6), a && u && this._edge(t, a, u, c, c.length), c ? c.push(_e25, _h6) : c = [_e25, _h6];\n            }\n\n            a = u, u = this._edgecode(_d4, _p4), a && u && this._edge(t, a, u, c, c.length), c ? c.push(_d4, _p4) : c = [_d4, _p4];\n          }\n        }\n\n        if (c) a = u, u = this._edgecode(c[0], c[1]), a && u && this._edge(t, a, u, c, c.length);else if (this.contains(t, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n        return c;\n      }\n    }, {\n      key: "_clipSegment",\n      value: function _clipSegment(t, n, e, r, i, o) {\n        for (;;) {\n          if (0 === i && 0 === o) return [t, n, e, r];\n          if (i & o) return null;\n\n          var _a13 = void 0,\n              _u12 = void 0,\n              _c7 = i || o;\n\n          8 & _c7 ? (_a13 = t + (e - t) * (this.ymax - n) / (r - n), _u12 = this.ymax) : 4 & _c7 ? (_a13 = t + (e - t) * (this.ymin - n) / (r - n), _u12 = this.ymin) : 2 & _c7 ? (_u12 = n + (r - n) * (this.xmax - t) / (e - t), _a13 = this.xmax) : (_u12 = n + (r - n) * (this.xmin - t) / (e - t), _a13 = this.xmin), i ? (t = _a13, n = _u12, i = this._regioncode(t, n)) : (e = _a13, r = _u12, o = this._regioncode(e, r));\n        }\n      }\n    }, {\n      key: "_clipInfinite",\n      value: function _clipInfinite(t, n, e, r, i, o) {\n        var a,\n            u = Array.from(n);\n        if ((a = this._project(u[0], u[1], e, r)) && u.unshift(a[0], a[1]), (a = this._project(u[u.length - 2], u[u.length - 1], i, o)) && u.push(a[0], a[1]), u = this._clipFinite(t, u)) for (var _n45, _e26 = 0, _r22 = u.length, _i16 = this._edgecode(u[_r22 - 2], u[_r22 - 1]); _e26 < _r22; _e26 += 2) {\n          _n45 = _i16, _i16 = this._edgecode(u[_e26], u[_e26 + 1]), _n45 && _i16 && (_e26 = this._edge(t, _n45, _i16, u, _e26), _r22 = u.length);\n        } else this.contains(t, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2) && (u = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax]);\n        return u;\n      }\n    }, {\n      key: "_edge",\n      value: function _edge(t, n, e, r, i) {\n        for (; n !== e;) {\n          var _e27 = void 0,\n              _o15 = void 0;\n\n          switch (n) {\n            case 5:\n              n = 4;\n              continue;\n\n            case 4:\n              n = 6, _e27 = this.xmax, _o15 = this.ymin;\n              break;\n\n            case 6:\n              n = 2;\n              continue;\n\n            case 2:\n              n = 10, _e27 = this.xmax, _o15 = this.ymax;\n              break;\n\n            case 10:\n              n = 8;\n              continue;\n\n            case 8:\n              n = 9, _e27 = this.xmin, _o15 = this.ymax;\n              break;\n\n            case 9:\n              n = 1;\n              continue;\n\n            case 1:\n              n = 5, _e27 = this.xmin, _o15 = this.ymin;\n          }\n\n          r[i] === _e27 && r[i + 1] === _o15 || !this.contains(t, _e27, _o15) || (r.splice(i, 0, _e27, _o15), i += 2);\n        }\n\n        if (r.length > 4) for (var _t20 = 0; _t20 < r.length; _t20 += 2) {\n          var _n46 = (_t20 + 2) % r.length,\n              _e28 = (_t20 + 4) % r.length;\n\n          (r[_t20] === r[_n46] && r[_n46] === r[_e28] || r[_t20 + 1] === r[_n46 + 1] && r[_n46 + 1] === r[_e28 + 1]) && (r.splice(_n46, 2), _t20 -= 2);\n        }\n        return i;\n      }\n    }, {\n      key: "_project",\n      value: function _project(t, n, e, r) {\n        var i,\n            o,\n            a,\n            u = 1 / 0;\n\n        if (r < 0) {\n          if (n <= this.ymin) return null;\n          (i = (this.ymin - n) / r) < u && (a = this.ymin, o = t + (u = i) * e);\n        } else if (r > 0) {\n          if (n >= this.ymax) return null;\n          (i = (this.ymax - n) / r) < u && (a = this.ymax, o = t + (u = i) * e);\n        }\n\n        if (e > 0) {\n          if (t >= this.xmax) return null;\n          (i = (this.xmax - t) / e) < u && (o = this.xmax, a = n + (u = i) * r);\n        } else if (e < 0) {\n          if (t <= this.xmin) return null;\n          (i = (this.xmin - t) / e) < u && (o = this.xmin, a = n + (u = i) * r);\n        }\n\n        return [o, a];\n      }\n    }, {\n      key: "_edgecode",\n      value: function _edgecode(t, n) {\n        return (t === this.xmin ? 1 : t === this.xmax ? 2 : 0) | (n === this.ymin ? 4 : n === this.ymax ? 8 : 0);\n      }\n    }, {\n      key: "_regioncode",\n      value: function _regioncode(t, n) {\n        return (t < this.xmin ? 1 : t > this.xmax ? 2 : 0) | (n < this.ymin ? 4 : n > this.ymax ? 8 : 0);\n      }\n    }]);\n\n    return Wa;\n  }();\n\n  var Za = 2 * Math.PI,\n      Ka = Math.pow;\n\n  function Qa(t) {\n    return t[0];\n  }\n\n  function Ja(t) {\n    return t[1];\n  }\n\n  function tu(t, n, e) {\n    return [t + Math.sin(t + n) * e, n + Math.cos(t - n) * e];\n  }\n\n  var nu = /*#__PURE__*/function () {\n    function nu(t) {\n      _classCallCheck(this, nu);\n\n      this._delaunator = new Fa(t), this.inedges = new Int32Array(t.length / 2), this._hullIndex = new Int32Array(t.length / 2), this.points = this._delaunator.coords, this._init();\n    }\n\n    _createClass(nu, [{\n      key: "update",\n      value: function update() {\n        return this._delaunator.update(), this._init(), this;\n      }\n    }, {\n      key: "_init",\n      value: function _init() {\n        var t = this._delaunator,\n            n = this.points;\n\n        if (t.hull && t.hull.length > 2 && function (t) {\n          var n = t.triangles,\n              e = t.coords;\n\n          for (var _t21 = 0; _t21 < n.length; _t21 += 3) {\n            var _r23 = 2 * n[_t21],\n                _i17 = 2 * n[_t21 + 1],\n                _o16 = 2 * n[_t21 + 2];\n\n            if ((e[_o16] - e[_r23]) * (e[_i17 + 1] - e[_r23 + 1]) - (e[_i17] - e[_r23]) * (e[_o16 + 1] - e[_r23 + 1]) > 1e-10) return !1;\n          }\n\n          return !0;\n        }(t)) {\n          this.collinear = Int32Array.from({\n            length: n.length / 2\n          }, function (t, n) {\n            return n;\n          }).sort(function (t, e) {\n            return n[2 * t] - n[2 * e] || n[2 * t + 1] - n[2 * e + 1];\n          });\n\n          var _t22 = this.collinear[0],\n              _e29 = this.collinear[this.collinear.length - 1],\n              _r24 = [n[2 * _t22], n[2 * _t22 + 1], n[2 * _e29], n[2 * _e29 + 1]],\n              _i18 = 1e-8 * Math.hypot(_r24[3] - _r24[1], _r24[2] - _r24[0]);\n\n          for (var _t23 = 0, _e30 = n.length / 2; _t23 < _e30; ++_t23) {\n            var _e31 = tu(n[2 * _t23], n[2 * _t23 + 1], _i18);\n\n            n[2 * _t23] = _e31[0], n[2 * _t23 + 1] = _e31[1];\n          }\n\n          this._delaunator = new Fa(n);\n        } else delete this.collinear;\n\n        var e = this.halfedges = this._delaunator.halfedges,\n            r = this.hull = this._delaunator.hull,\n            i = this.triangles = this._delaunator.triangles,\n            o = this.inedges.fill(-1),\n            a = this._hullIndex.fill(-1);\n\n        for (var _t24 = 0, _n47 = e.length; _t24 < _n47; ++_t24) {\n          var _n48 = i[_t24 % 3 == 2 ? _t24 - 2 : _t24 + 1];\n          -1 !== e[_t24] && -1 !== o[_n48] || (o[_n48] = _t24);\n        }\n\n        for (var _t25 = 0, _n49 = r.length; _t25 < _n49; ++_t25) {\n          a[r[_t25]] = _t25;\n        }\n\n        r.length <= 2 && r.length > 0 && (this.triangles = new Int32Array(3).fill(-1), this.halfedges = new Int32Array(3).fill(-1), this.triangles[0] = r[0], this.triangles[1] = r[1], this.triangles[2] = r[1], o[r[0]] = 1, 2 === r.length && (o[r[1]] = 0));\n      }\n    }, {\n      key: "voronoi",\n      value: function voronoi(t) {\n        return new Wa(this, t);\n      }\n    }, {\n      key: "neighbors",\n      value: /*#__PURE__*/regenerator_default().mark(function neighbors(t) {\n        var n, e, r, i, o, a, _n50, u, c, f, _n51;\n\n        return regenerator_default().wrap(function neighbors$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                n = this.inedges, e = this.hull, r = this._hullIndex, i = this.halfedges, o = this.triangles, a = this.collinear;\n\n                if (!a) {\n                  _context6.next = 13;\n                  break;\n                }\n\n                _n50 = a.indexOf(t);\n                _context6.t0 = _n50 > 0;\n\n                if (!_context6.t0) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                _context6.next = 7;\n                return a[_n50 - 1];\n\n              case 7:\n                _context6.t1 = _n50 < a.length - 1;\n\n                if (!_context6.t1) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                _context6.next = 11;\n                return a[_n50 + 1];\n\n              case 11:\n                _context6.t1 = _context6.sent;\n\n              case 12:\n                return _context6.abrupt("return", void _context6.t1);\n\n              case 13:\n                u = n[t];\n\n                if (!(-1 === u)) {\n                  _context6.next = 16;\n                  break;\n                }\n\n                return _context6.abrupt("return");\n\n              case 16:\n                c = u, f = -1;\n\n              case 17:\n                _context6.next = 19;\n                return f = o[c];\n\n              case 19:\n                c = c % 3 == 2 ? c - 2 : c + 1;\n\n                if (!(o[c] !== t)) {\n                  _context6.next = 22;\n                  break;\n                }\n\n                return _context6.abrupt("return");\n\n              case 22:\n                if (!(c = i[c], -1 === c)) {\n                  _context6.next = 30;\n                  break;\n                }\n\n                _n51 = e[(r[t] + 1) % e.length];\n                _context6.t2 = _n51 !== f;\n\n                if (!_context6.t2) {\n                  _context6.next = 29;\n                  break;\n                }\n\n                _context6.next = 28;\n                return _n51;\n\n              case 28:\n                _context6.t2 = _context6.sent;\n\n              case 29:\n                return _context6.abrupt("return", void _context6.t2);\n\n              case 30:\n                if (c !== u) {\n                  _context6.next = 17;\n                  break;\n                }\n\n              case 31:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, neighbors, this);\n      })\n    }, {\n      key: "find",\n      value: function find(t, n) {\n        var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        if ((t = +t) != t || (n = +n) != n) return -1;\n        var r = e;\n        var i;\n\n        for (; (i = this._step(e, t, n)) >= 0 && i !== e && i !== r;) {\n          e = i;\n        }\n\n        return i;\n      }\n    }, {\n      key: "_step",\n      value: function _step(t, n, e) {\n        var r = this.inedges,\n            i = this.hull,\n            o = this._hullIndex,\n            a = this.halfedges,\n            u = this.triangles,\n            c = this.points;\n        if (-1 === r[t] || !c.length) return (t + 1) % (c.length >> 1);\n        var f = t,\n            s = Ka(n - c[2 * t], 2) + Ka(e - c[2 * t + 1], 2);\n        var l = r[t];\n        var h = l;\n\n        do {\n          var _r25 = u[h];\n\n          var _l6 = Ka(n - c[2 * _r25], 2) + Ka(e - c[2 * _r25 + 1], 2);\n\n          if (_l6 < s && (s = _l6, f = _r25), h = h % 3 == 2 ? h - 2 : h + 1, u[h] !== t) break;\n\n          if (h = a[h], -1 === h) {\n            if (h = i[(o[t] + 1) % i.length], h !== _r25 && Ka(n - c[2 * h], 2) + Ka(e - c[2 * h + 1], 2) < s) return h;\n            break;\n          }\n        } while (h !== l);\n\n        return f;\n      }\n    }, {\n      key: "render",\n      value: function render(t) {\n        var n = null == t ? t = new Va() : void 0,\n            e = this.points,\n            r = this.halfedges,\n            i = this.triangles;\n\n        for (var _n52 = 0, _o17 = r.length; _n52 < _o17; ++_n52) {\n          var _o18 = r[_n52];\n          if (_o18 < _n52) continue;\n\n          var _a14 = 2 * i[_n52],\n              _u13 = 2 * i[_o18];\n\n          t.moveTo(e[_a14], e[_a14 + 1]), t.lineTo(e[_u13], e[_u13 + 1]);\n        }\n\n        return this.renderHull(t), n && n.value();\n      }\n    }, {\n      key: "renderPoints",\n      value: function renderPoints(t) {\n        var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n        var e = null == t ? t = new Va() : void 0,\n            r = this.points;\n\n        for (var _e32 = 0, _i19 = r.length; _e32 < _i19; _e32 += 2) {\n          var _i20 = r[_e32],\n              _o19 = r[_e32 + 1];\n          t.moveTo(_i20 + n, _o19), t.arc(_i20, _o19, n, 0, Za);\n        }\n\n        return e && e.value();\n      }\n    }, {\n      key: "renderHull",\n      value: function renderHull(t) {\n        var n = null == t ? t = new Va() : void 0,\n            e = this.hull,\n            r = this.points,\n            i = 2 * e[0],\n            o = e.length;\n        t.moveTo(r[i], r[i + 1]);\n\n        for (var _n53 = 1; _n53 < o; ++_n53) {\n          var _i21 = 2 * e[_n53];\n\n          t.lineTo(r[_i21], r[_i21 + 1]);\n        }\n\n        return t.closePath(), n && n.value();\n      }\n    }, {\n      key: "hullPolygon",\n      value: function hullPolygon() {\n        var t = new $a();\n        return this.renderHull(t), t.value();\n      }\n    }, {\n      key: "renderTriangle",\n      value: function renderTriangle(t, n) {\n        var e = null == n ? n = new Va() : void 0,\n            r = this.points,\n            i = this.triangles,\n            o = 2 * i[t *= 3],\n            a = 2 * i[t + 1],\n            u = 2 * i[t + 2];\n        return n.moveTo(r[o], r[o + 1]), n.lineTo(r[a], r[a + 1]), n.lineTo(r[u], r[u + 1]), n.closePath(), e && e.value();\n      }\n    }, {\n      key: "trianglePolygons",\n      value: /*#__PURE__*/regenerator_default().mark(function trianglePolygons() {\n        var t, _n54, _e33;\n\n        return regenerator_default().wrap(function trianglePolygons$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                t = this.triangles;\n                _n54 = 0, _e33 = t.length / 3;\n\n              case 2:\n                if (!(_n54 < _e33)) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                _context7.next = 5;\n                return this.trianglePolygon(_n54);\n\n              case 5:\n                ++_n54;\n                _context7.next = 2;\n                break;\n\n              case 8:\n              case "end":\n                return _context7.stop();\n            }\n          }\n        }, trianglePolygons, this);\n      })\n    }, {\n      key: "trianglePolygon",\n      value: function trianglePolygon(t) {\n        var n = new $a();\n        return this.renderTriangle(t, n), n.value();\n      }\n    }], [{\n      key: "from",\n      value: function from(t) {\n        var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Qa;\n        var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Ja;\n        var r = arguments.length > 3 ? arguments[3] : undefined;\n        return new nu("length" in t ? function (t, n, e, r) {\n          var i = t.length,\n              o = new Float64Array(2 * i);\n\n          for (var _a15 = 0; _a15 < i; ++_a15) {\n            var _i22 = t[_a15];\n            o[2 * _a15] = n.call(r, _i22, _a15, t), o[2 * _a15 + 1] = e.call(r, _i22, _a15, t);\n          }\n\n          return o;\n        }(t, n, e, r) : Float64Array.from( /*#__PURE__*/regenerator_default().mark(function _callee4(t, n, e, r) {\n          var i, _iterator33, _step33, _o20;\n\n          return regenerator_default().wrap(function _callee4$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  i = 0;\n                  _iterator33 = _createForOfIteratorHelper(t);\n                  _context8.prev = 2;\n\n                  _iterator33.s();\n\n                case 4:\n                  if ((_step33 = _iterator33.n()).done) {\n                    _context8.next = 13;\n                    break;\n                  }\n\n                  _o20 = _step33.value;\n                  _context8.next = 8;\n                  return n.call(r, _o20, i, t);\n\n                case 8:\n                  _context8.next = 10;\n                  return e.call(r, _o20, i, t);\n\n                case 10:\n                  ++i;\n\n                case 11:\n                  _context8.next = 4;\n                  break;\n\n                case 13:\n                  _context8.next = 18;\n                  break;\n\n                case 15:\n                  _context8.prev = 15;\n                  _context8.t0 = _context8["catch"](2);\n\n                  _iterator33.e(_context8.t0);\n\n                case 18:\n                  _context8.prev = 18;\n\n                  _iterator33.f();\n\n                  return _context8.finish(18);\n\n                case 21:\n                case "end":\n                  return _context8.stop();\n              }\n            }\n          }, _callee4, null, [[2, 15, 18, 21]]);\n        })(t, n, e, r)));\n      }\n    }]);\n\n    return nu;\n  }();\n\n  var eu = {},\n      ru = {};\n\n  function iu(t) {\n    return new Function("d", "return {" + t.map(function (t, n) {\n      return JSON.stringify(t) + ": d[" + n + \'] || ""\';\n    }).join(",") + "}");\n  }\n\n  function ou(t) {\n    var n = Object.create(null),\n        e = [];\n    return t.forEach(function (t) {\n      for (var r in t) {\n        r in n || e.push(n[r] = r);\n      }\n    }), e;\n  }\n\n  function au(t, n) {\n    var e = t + "",\n        r = e.length;\n    return r < n ? new Array(n - r + 1).join(0) + e : e;\n  }\n\n  function uu(t) {\n    var n = t.getUTCHours(),\n        e = t.getUTCMinutes(),\n        r = t.getUTCSeconds(),\n        i = t.getUTCMilliseconds();\n    return isNaN(t) ? "Invalid Date" : function (t) {\n      return t < 0 ? "-" + au(-t, 6) : t > 9999 ? "+" + au(t, 6) : au(t, 4);\n    }(t.getUTCFullYear()) + "-" + au(t.getUTCMonth() + 1, 2) + "-" + au(t.getUTCDate(), 2) + (i ? "T" + au(n, 2) + ":" + au(e, 2) + ":" + au(r, 2) + "." + au(i, 3) + "Z" : r ? "T" + au(n, 2) + ":" + au(e, 2) + ":" + au(r, 2) + "Z" : e || n ? "T" + au(n, 2) + ":" + au(e, 2) + "Z" : "");\n  }\n\n  function cu(t) {\n    var n = new RegExp(\'["\' + t + "\\n\\r]"),\n        e = t.charCodeAt(0);\n\n    function r(t, n) {\n      var r,\n          i = [],\n          o = t.length,\n          a = 0,\n          u = 0,\n          c = o <= 0,\n          f = !1;\n\n      function s() {\n        if (c) return ru;\n        if (f) return f = !1, eu;\n        var n,\n            r,\n            i = a;\n\n        if (34 === t.charCodeAt(i)) {\n          for (; a++ < o && 34 !== t.charCodeAt(a) || 34 === t.charCodeAt(++a);) {\n            ;\n          }\n\n          return (n = a) >= o ? c = !0 : 10 === (r = t.charCodeAt(a++)) ? f = !0 : 13 === r && (f = !0, 10 === t.charCodeAt(a) && ++a), t.slice(i + 1, n - 1).replace(/""/g, \'"\');\n        }\n\n        for (; a < o;) {\n          if (10 === (r = t.charCodeAt(n = a++))) f = !0;else if (13 === r) f = !0, 10 === t.charCodeAt(a) && ++a;else if (r !== e) continue;\n          return t.slice(i, n);\n        }\n\n        return c = !0, t.slice(i, o);\n      }\n\n      for (10 === t.charCodeAt(o - 1) && --o, 13 === t.charCodeAt(o - 1) && --o; (r = s()) !== ru;) {\n        for (var l = []; r !== eu && r !== ru;) {\n          l.push(r), r = s();\n        }\n\n        n && null == (l = n(l, u++)) || i.push(l);\n      }\n\n      return i;\n    }\n\n    function i(n, e) {\n      return n.map(function (n) {\n        return e.map(function (t) {\n          return a(n[t]);\n        }).join(t);\n      });\n    }\n\n    function o(n) {\n      return n.map(a).join(t);\n    }\n\n    function a(t) {\n      return null == t ? "" : t instanceof Date ? uu(t) : n.test(t += "") ? \'"\' + t.replace(/"/g, \'""\') + \'"\' : t;\n    }\n\n    return {\n      parse: function parse(t, n) {\n        var e,\n            i,\n            o = r(t, function (t, r) {\n          if (e) return e(t, r - 1);\n          i = t, e = n ? function (t, n) {\n            var e = iu(t);\n            return function (r, i) {\n              return n(e(r), i, t);\n            };\n          }(t, n) : iu(t);\n        });\n        return o.columns = i || [], o;\n      },\n      parseRows: r,\n      format: function format(n, e) {\n        return null == e && (e = ou(n)), [e.map(a).join(t)].concat(i(n, e)).join("\\n");\n      },\n      formatBody: function formatBody(t, n) {\n        return null == n && (n = ou(t)), i(t, n).join("\\n");\n      },\n      formatRows: function formatRows(t) {\n        return t.map(o).join("\\n");\n      },\n      formatRow: o,\n      formatValue: a\n    };\n  }\n\n  var fu = cu(","),\n      su = fu.parse,\n      lu = fu.parseRows,\n      hu = fu.format,\n      du = fu.formatBody,\n      pu = fu.formatRows,\n      gu = fu.formatRow,\n      yu = fu.formatValue,\n      vu = cu("\\t"),\n      _u = vu.parse,\n      bu = vu.parseRows,\n      mu = vu.format,\n      xu = vu.formatBody,\n      wu = vu.formatRows,\n      Mu = vu.formatRow,\n      Au = vu.formatValue;\n  var Tu = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();\n\n  function Su(t) {\n    if (!t.ok) throw new Error(t.status + " " + t.statusText);\n    return t.blob();\n  }\n\n  function Eu(t) {\n    if (!t.ok) throw new Error(t.status + " " + t.statusText);\n    return t.arrayBuffer();\n  }\n\n  function ku(t) {\n    if (!t.ok) throw new Error(t.status + " " + t.statusText);\n    return t.text();\n  }\n\n  function Nu(t, n) {\n    return fetch(t, n).then(ku);\n  }\n\n  function Cu(t) {\n    return function (n, e, r) {\n      return 2 === arguments.length && "function" == typeof e && (r = e, e = void 0), Nu(n, e).then(function (n) {\n        return t(n, r);\n      });\n    };\n  }\n\n  var Pu = Cu(su),\n      zu = Cu(_u);\n\n  function Du(t) {\n    if (!t.ok) throw new Error(t.status + " " + t.statusText);\n    if (204 !== t.status && 205 !== t.status) return t.json();\n  }\n\n  function qu(t) {\n    return function (n, e) {\n      return Nu(n, e).then(function (n) {\n        return new DOMParser().parseFromString(n, t);\n      });\n    };\n  }\n\n  var Ru = qu("application/xml"),\n      Fu = qu("text/html"),\n      Ou = qu("image/svg+xml");\n\n  function Uu(t, n, e, r) {\n    if (isNaN(n) || isNaN(e)) return t;\n    var i,\n        o,\n        a,\n        u,\n        c,\n        f,\n        s,\n        l,\n        h,\n        d = t._root,\n        p = {\n      data: r\n    },\n        g = t._x0,\n        y = t._y0,\n        v = t._x1,\n        _ = t._y1;\n    if (!d) return t._root = p, t;\n\n    for (; d.length;) {\n      if ((f = n >= (o = (g + v) / 2)) ? g = o : v = o, (s = e >= (a = (y + _) / 2)) ? y = a : _ = a, i = d, !(d = d[l = s << 1 | f])) return i[l] = p, t;\n    }\n\n    if (u = +t._x.call(null, d.data), c = +t._y.call(null, d.data), n === u && e === c) return p.next = d, i ? i[l] = p : t._root = p, t;\n\n    do {\n      i = i ? i[l] = new Array(4) : t._root = new Array(4), (f = n >= (o = (g + v) / 2)) ? g = o : v = o, (s = e >= (a = (y + _) / 2)) ? y = a : _ = a;\n    } while ((l = s << 1 | f) == (h = (c >= a) << 1 | u >= o));\n\n    return i[h] = d, i[l] = p, t;\n  }\n\n  function Iu(t, n, e, r, i) {\n    this.node = t, this.x0 = n, this.y0 = e, this.x1 = r, this.y1 = i;\n  }\n\n  function Bu(t) {\n    return t[0];\n  }\n\n  function Yu(t) {\n    return t[1];\n  }\n\n  function Lu(t, n, e) {\n    var r = new ju(null == n ? Bu : n, null == e ? Yu : e, NaN, NaN, NaN, NaN);\n    return null == t ? r : r.addAll(t);\n  }\n\n  function ju(t, n, e, r, i, o) {\n    this._x = t, this._y = n, this._x0 = e, this._y0 = r, this._x1 = i, this._y1 = o, this._root = void 0;\n  }\n\n  function Hu(t) {\n    for (var n = {\n      data: t.data\n    }, e = n; t = t.next;) {\n      e = e.next = {\n        data: t.data\n      };\n    }\n\n    return n;\n  }\n\n  var Xu = Lu.prototype = ju.prototype;\n\n  function Gu(t) {\n    return function () {\n      return t;\n    };\n  }\n\n  function Vu(t) {\n    return 1e-6 * (t() - .5);\n  }\n\n  function $u(t) {\n    return t.x + t.vx;\n  }\n\n  function Wu(t) {\n    return t.y + t.vy;\n  }\n\n  function Zu(t) {\n    return t.index;\n  }\n\n  function Ku(t, n) {\n    var e = t.get(n);\n    if (!e) throw new Error("node not found: " + n);\n    return e;\n  }\n\n  Xu.copy = function () {\n    var t,\n        n,\n        e = new ju(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n        r = this._root;\n    if (!r) return e;\n    if (!r.length) return e._root = Hu(r), e;\n\n    for (t = [{\n      source: r,\n      target: e._root = new Array(4)\n    }]; r = t.pop();) {\n      for (var i = 0; i < 4; ++i) {\n        (n = r.source[i]) && (n.length ? t.push({\n          source: n,\n          target: r.target[i] = new Array(4)\n        }) : r.target[i] = Hu(n));\n      }\n    }\n\n    return e;\n  }, Xu.add = function (t) {\n    var n = +this._x.call(null, t),\n        e = +this._y.call(null, t);\n    return Uu(this.cover(n, e), n, e, t);\n  }, Xu.addAll = function (t) {\n    var n,\n        e,\n        r,\n        i,\n        o = t.length,\n        a = new Array(o),\n        u = new Array(o),\n        c = 1 / 0,\n        f = 1 / 0,\n        s = -1 / 0,\n        l = -1 / 0;\n\n    for (e = 0; e < o; ++e) {\n      isNaN(r = +this._x.call(null, n = t[e])) || isNaN(i = +this._y.call(null, n)) || (a[e] = r, u[e] = i, r < c && (c = r), r > s && (s = r), i < f && (f = i), i > l && (l = i));\n    }\n\n    if (c > s || f > l) return this;\n\n    for (this.cover(c, f).cover(s, l), e = 0; e < o; ++e) {\n      Uu(this, a[e], u[e], t[e]);\n    }\n\n    return this;\n  }, Xu.cover = function (t, n) {\n    if (isNaN(t = +t) || isNaN(n = +n)) return this;\n    var e = this._x0,\n        r = this._y0,\n        i = this._x1,\n        o = this._y1;\n    if (isNaN(e)) i = (e = Math.floor(t)) + 1, o = (r = Math.floor(n)) + 1;else {\n      for (var a, u, c = i - e || 1, f = this._root; e > t || t >= i || r > n || n >= o;) {\n        switch (u = (n < r) << 1 | t < e, (a = new Array(4))[u] = f, f = a, c *= 2, u) {\n          case 0:\n            i = e + c, o = r + c;\n            break;\n\n          case 1:\n            e = i - c, o = r + c;\n            break;\n\n          case 2:\n            i = e + c, r = o - c;\n            break;\n\n          case 3:\n            e = i - c, r = o - c;\n        }\n      }\n\n      this._root && this._root.length && (this._root = f);\n    }\n    return this._x0 = e, this._y0 = r, this._x1 = i, this._y1 = o, this;\n  }, Xu.data = function () {\n    var t = [];\n    return this.visit(function (n) {\n      if (!n.length) do {\n        t.push(n.data);\n      } while (n = n.next);\n    }), t;\n  }, Xu.extent = function (t) {\n    return arguments.length ? this.cover(+t[0][0], +t[0][1]).cover(+t[1][0], +t[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];\n  }, Xu.find = function (t, n, e) {\n    var r,\n        i,\n        o,\n        a,\n        u,\n        c,\n        f,\n        s = this._x0,\n        l = this._y0,\n        h = this._x1,\n        d = this._y1,\n        p = [],\n        g = this._root;\n\n    for (g && p.push(new Iu(g, s, l, h, d)), null == e ? e = 1 / 0 : (s = t - e, l = n - e, h = t + e, d = n + e, e *= e); c = p.pop();) {\n      if (!(!(g = c.node) || (i = c.x0) > h || (o = c.y0) > d || (a = c.x1) < s || (u = c.y1) < l)) if (g.length) {\n        var y = (i + a) / 2,\n            v = (o + u) / 2;\n        p.push(new Iu(g[3], y, v, a, u), new Iu(g[2], i, v, y, u), new Iu(g[1], y, o, a, v), new Iu(g[0], i, o, y, v)), (f = (n >= v) << 1 | t >= y) && (c = p[p.length - 1], p[p.length - 1] = p[p.length - 1 - f], p[p.length - 1 - f] = c);\n      } else {\n        var _ = t - +this._x.call(null, g.data),\n            b = n - +this._y.call(null, g.data),\n            m = _ * _ + b * b;\n\n        if (m < e) {\n          var x = Math.sqrt(e = m);\n          s = t - x, l = n - x, h = t + x, d = n + x, r = g.data;\n        }\n      }\n    }\n\n    return r;\n  }, Xu.remove = function (t) {\n    if (isNaN(o = +this._x.call(null, t)) || isNaN(a = +this._y.call(null, t))) return this;\n    var n,\n        e,\n        r,\n        i,\n        o,\n        a,\n        u,\n        c,\n        f,\n        s,\n        l,\n        h,\n        d = this._root,\n        p = this._x0,\n        g = this._y0,\n        y = this._x1,\n        v = this._y1;\n    if (!d) return this;\n    if (d.length) for (;;) {\n      if ((f = o >= (u = (p + y) / 2)) ? p = u : y = u, (s = a >= (c = (g + v) / 2)) ? g = c : v = c, n = d, !(d = d[l = s << 1 | f])) return this;\n      if (!d.length) break;\n      (n[l + 1 & 3] || n[l + 2 & 3] || n[l + 3 & 3]) && (e = n, h = l);\n    }\n\n    for (; d.data !== t;) {\n      if (r = d, !(d = d.next)) return this;\n    }\n\n    return (i = d.next) && delete d.next, r ? (i ? r.next = i : delete r.next, this) : n ? (i ? n[l] = i : delete n[l], (d = n[0] || n[1] || n[2] || n[3]) && d === (n[3] || n[2] || n[1] || n[0]) && !d.length && (e ? e[h] = d : this._root = d), this) : (this._root = i, this);\n  }, Xu.removeAll = function (t) {\n    for (var n = 0, e = t.length; n < e; ++n) {\n      this.remove(t[n]);\n    }\n\n    return this;\n  }, Xu.root = function () {\n    return this._root;\n  }, Xu.size = function () {\n    var t = 0;\n    return this.visit(function (n) {\n      if (!n.length) do {\n        ++t;\n      } while (n = n.next);\n    }), t;\n  }, Xu.visit = function (t) {\n    var n,\n        e,\n        r,\n        i,\n        o,\n        a,\n        u = [],\n        c = this._root;\n\n    for (c && u.push(new Iu(c, this._x0, this._y0, this._x1, this._y1)); n = u.pop();) {\n      if (!t(c = n.node, r = n.x0, i = n.y0, o = n.x1, a = n.y1) && c.length) {\n        var f = (r + o) / 2,\n            s = (i + a) / 2;\n        (e = c[3]) && u.push(new Iu(e, f, s, o, a)), (e = c[2]) && u.push(new Iu(e, r, s, f, a)), (e = c[1]) && u.push(new Iu(e, f, i, o, s)), (e = c[0]) && u.push(new Iu(e, r, i, f, s));\n      }\n    }\n\n    return this;\n  }, Xu.visitAfter = function (t) {\n    var n,\n        e = [],\n        r = [];\n\n    for (this._root && e.push(new Iu(this._root, this._x0, this._y0, this._x1, this._y1)); n = e.pop();) {\n      var i = n.node;\n\n      if (i.length) {\n        var o,\n            a = n.x0,\n            u = n.y0,\n            c = n.x1,\n            f = n.y1,\n            s = (a + c) / 2,\n            l = (u + f) / 2;\n        (o = i[0]) && e.push(new Iu(o, a, u, s, l)), (o = i[1]) && e.push(new Iu(o, s, u, c, l)), (o = i[2]) && e.push(new Iu(o, a, l, s, f)), (o = i[3]) && e.push(new Iu(o, s, l, c, f));\n      }\n\n      r.push(n);\n    }\n\n    for (; n = r.pop();) {\n      t(n.node, n.x0, n.y0, n.x1, n.y1);\n    }\n\n    return this;\n  }, Xu.x = function (t) {\n    return arguments.length ? (this._x = t, this) : this._x;\n  }, Xu.y = function (t) {\n    return arguments.length ? (this._y = t, this) : this._y;\n  };\n  var Qu = 4294967296;\n\n  function Ju(t) {\n    return t.x;\n  }\n\n  function tc(t) {\n    return t.y;\n  }\n\n  var nc = Math.PI * (3 - Math.sqrt(5));\n\n  function ec(t, n) {\n    if ((e = (t = n ? t.toExponential(n - 1) : t.toExponential()).indexOf("e")) < 0) return null;\n    var e,\n        r = t.slice(0, e);\n    return [r.length > 1 ? r[0] + r.slice(2) : r, +t.slice(e + 1)];\n  }\n\n  function rc(t) {\n    return (t = ec(Math.abs(t))) ? t[1] : NaN;\n  }\n\n  var ic,\n      oc = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\n  function ac(t) {\n    if (!(n = oc.exec(t))) throw new Error("invalid format: " + t);\n    var n;\n    return new uc({\n      fill: n[1],\n      align: n[2],\n      sign: n[3],\n      symbol: n[4],\n      zero: n[5],\n      width: n[6],\n      comma: n[7],\n      precision: n[8] && n[8].slice(1),\n      trim: n[9],\n      type: n[10]\n    });\n  }\n\n  function uc(t) {\n    this.fill = void 0 === t.fill ? " " : t.fill + "", this.align = void 0 === t.align ? ">" : t.align + "", this.sign = void 0 === t.sign ? "-" : t.sign + "", this.symbol = void 0 === t.symbol ? "" : t.symbol + "", this.zero = !!t.zero, this.width = void 0 === t.width ? void 0 : +t.width, this.comma = !!t.comma, this.precision = void 0 === t.precision ? void 0 : +t.precision, this.trim = !!t.trim, this.type = void 0 === t.type ? "" : t.type + "";\n  }\n\n  function cc(t, n) {\n    var e = ec(t, n);\n    if (!e) return t + "";\n    var r = e[0],\n        i = e[1];\n    return i < 0 ? "0." + new Array(-i).join("0") + r : r.length > i + 1 ? r.slice(0, i + 1) + "." + r.slice(i + 1) : r + new Array(i - r.length + 2).join("0");\n  }\n\n  ac.prototype = uc.prototype, uc.prototype.toString = function () {\n    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (void 0 === this.width ? "" : Math.max(1, 0 | this.width)) + (this.comma ? "," : "") + (void 0 === this.precision ? "" : "." + Math.max(0, 0 | this.precision)) + (this.trim ? "~" : "") + this.type;\n  };\n  var fc = {\n    "%": function _(t, n) {\n      return (100 * t).toFixed(n);\n    },\n    b: function b(t) {\n      return Math.round(t).toString(2);\n    },\n    c: function c(t) {\n      return t + "";\n    },\n    d: function d(t) {\n      return Math.abs(t = Math.round(t)) >= 1e21 ? t.toLocaleString("en").replace(/,/g, "") : t.toString(10);\n    },\n    e: function e(t, n) {\n      return t.toExponential(n);\n    },\n    f: function f(t, n) {\n      return t.toFixed(n);\n    },\n    g: function g(t, n) {\n      return t.toPrecision(n);\n    },\n    o: function o(t) {\n      return Math.round(t).toString(8);\n    },\n    p: function p(t, n) {\n      return cc(100 * t, n);\n    },\n    r: cc,\n    s: function s(t, n) {\n      var e = ec(t, n);\n      if (!e) return t + "";\n      var r = e[0],\n          i = e[1],\n          o = i - (ic = 3 * Math.max(-8, Math.min(8, Math.floor(i / 3)))) + 1,\n          a = r.length;\n      return o === a ? r : o > a ? r + new Array(o - a + 1).join("0") : o > 0 ? r.slice(0, o) + "." + r.slice(o) : "0." + new Array(1 - o).join("0") + ec(t, Math.max(0, n + o - 1))[0];\n    },\n    X: function X(t) {\n      return Math.round(t).toString(16).toUpperCase();\n    },\n    x: function x(t) {\n      return Math.round(t).toString(16);\n    }\n  };\n\n  function sc(t) {\n    return t;\n  }\n\n  var lc,\n      hc = Array.prototype.map,\n      dc = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];\n\n  function pc(t) {\n    var n,\n        e,\n        r = void 0 === t.grouping || void 0 === t.thousands ? sc : (n = hc.call(t.grouping, Number), e = t.thousands + "", function (t, r) {\n      for (var i = t.length, o = [], a = 0, u = n[0], c = 0; i > 0 && u > 0 && (c + u + 1 > r && (u = Math.max(1, r - c)), o.push(t.substring(i -= u, i + u)), !((c += u + 1) > r));) {\n        u = n[a = (a + 1) % n.length];\n      }\n\n      return o.reverse().join(e);\n    }),\n        i = void 0 === t.currency ? "" : t.currency[0] + "",\n        o = void 0 === t.currency ? "" : t.currency[1] + "",\n        a = void 0 === t.decimal ? "." : t.decimal + "",\n        u = void 0 === t.numerals ? sc : function (t) {\n      return function (n) {\n        return n.replace(/[0-9]/g, function (n) {\n          return t[+n];\n        });\n      };\n    }(hc.call(t.numerals, String)),\n        c = void 0 === t.percent ? "%" : t.percent + "",\n        f = void 0 === t.minus ? "−" : t.minus + "",\n        s = void 0 === t.nan ? "NaN" : t.nan + "";\n\n    function l(t) {\n      var n = (t = ac(t)).fill,\n          e = t.align,\n          l = t.sign,\n          h = t.symbol,\n          d = t.zero,\n          p = t.width,\n          g = t.comma,\n          y = t.precision,\n          v = t.trim,\n          _ = t.type;\n      "n" === _ ? (g = !0, _ = "g") : fc[_] || (void 0 === y && (y = 12), v = !0, _ = "g"), (d || "0" === n && "=" === e) && (d = !0, n = "0", e = "=");\n      var b = "$" === h ? i : "#" === h && /[boxX]/.test(_) ? "0" + _.toLowerCase() : "",\n          m = "$" === h ? o : /[%p]/.test(_) ? c : "",\n          x = fc[_],\n          w = /[defgprs%]/.test(_);\n\n      function M(t) {\n        var i,\n            o,\n            c,\n            h = b,\n            M = m;\n        if ("c" === _) M = x(t) + M, t = "";else {\n          var A = (t = +t) < 0 || 1 / t < 0;\n          if (t = isNaN(t) ? s : x(Math.abs(t), y), v && (t = function (t) {\n            t: for (var n, e = t.length, r = 1, i = -1; r < e; ++r) {\n              switch (t[r]) {\n                case ".":\n                  i = n = r;\n                  break;\n\n                case "0":\n                  0 === i && (i = r), n = r;\n                  break;\n\n                default:\n                  if (!+t[r]) break t;\n                  i > 0 && (i = 0);\n              }\n            }\n\n            return i > 0 ? t.slice(0, i) + t.slice(n + 1) : t;\n          }(t)), A && 0 == +t && "+" !== l && (A = !1), h = (A ? "(" === l ? l : f : "-" === l || "(" === l ? "" : l) + h, M = ("s" === _ ? dc[8 + ic / 3] : "") + M + (A && "(" === l ? ")" : ""), w) for (i = -1, o = t.length; ++i < o;) {\n            if (48 > (c = t.charCodeAt(i)) || c > 57) {\n              M = (46 === c ? a + t.slice(i + 1) : t.slice(i)) + M, t = t.slice(0, i);\n              break;\n            }\n          }\n        }\n        g && !d && (t = r(t, 1 / 0));\n        var T = h.length + t.length + M.length,\n            S = T < p ? new Array(p - T + 1).join(n) : "";\n\n        switch (g && d && (t = r(S + t, S.length ? p - M.length : 1 / 0), S = ""), e) {\n          case "<":\n            t = h + t + M + S;\n            break;\n\n          case "=":\n            t = h + S + t + M;\n            break;\n\n          case "^":\n            t = S.slice(0, T = S.length >> 1) + h + t + M + S.slice(T);\n            break;\n\n          default:\n            t = S + h + t + M;\n        }\n\n        return u(t);\n      }\n\n      return y = void 0 === y ? 6 : /[gprs]/.test(_) ? Math.max(1, Math.min(21, y)) : Math.max(0, Math.min(20, y)), M.toString = function () {\n        return t + "";\n      }, M;\n    }\n\n    return {\n      format: l,\n      formatPrefix: function formatPrefix(t, n) {\n        var e = l(((t = ac(t)).type = "f", t)),\n            r = 3 * Math.max(-8, Math.min(8, Math.floor(rc(n) / 3))),\n            i = Math.pow(10, -r),\n            o = dc[8 + r / 3];\n        return function (t) {\n          return e(i * t) + o;\n        };\n      }\n    };\n  }\n\n  function gc(n) {\n    return lc = pc(n), t.format = lc.format, t.formatPrefix = lc.formatPrefix, lc;\n  }\n\n  function yc(t) {\n    return Math.max(0, -rc(Math.abs(t)));\n  }\n\n  function vc(t, n) {\n    return Math.max(0, 3 * Math.max(-8, Math.min(8, Math.floor(rc(n) / 3))) - rc(Math.abs(t)));\n  }\n\n  function _c(t, n) {\n    return t = Math.abs(t), n = Math.abs(n) - t, Math.max(0, rc(n) - rc(t)) + 1;\n  }\n\n  t.format = void 0, t.formatPrefix = void 0, gc({\n    thousands: ",",\n    grouping: [3],\n    currency: ["$", ""]\n  });\n\n  var bc = 1e-6,\n      mc = 1e-12,\n      xc = Math.PI,\n      wc = xc / 2,\n      Mc = xc / 4,\n      Ac = 2 * xc,\n      Tc = 180 / xc,\n      Sc = xc / 180,\n      Ec = Math.abs,\n      kc = Math.atan,\n      Nc = Math.atan2,\n      Cc = Math.cos,\n      Pc = Math.ceil,\n      zc = Math.exp,\n      Dc = Math.hypot,\n      qc = Math.log,\n      Rc = Math.pow,\n      Fc = Math.sin,\n      Oc = Math.sign || function (t) {\n    return t > 0 ? 1 : t < 0 ? -1 : 0;\n  },\n      Uc = Math.sqrt,\n      Ic = Math.tan;\n\n  function Bc(t) {\n    return t > 1 ? 0 : t < -1 ? xc : Math.acos(t);\n  }\n\n  function Yc(t) {\n    return t > 1 ? wc : t < -1 ? -wc : Math.asin(t);\n  }\n\n  function Lc(t) {\n    return (t = Fc(t / 2)) * t;\n  }\n\n  function jc() {}\n\n  function Hc(t, n) {\n    t && Gc.hasOwnProperty(t.type) && Gc[t.type](t, n);\n  }\n\n  var Xc = {\n    Feature: function Feature(t, n) {\n      Hc(t.geometry, n);\n    },\n    FeatureCollection: function FeatureCollection(t, n) {\n      for (var e = t.features, r = -1, i = e.length; ++r < i;) {\n        Hc(e[r].geometry, n);\n      }\n    }\n  },\n      Gc = {\n    Sphere: function Sphere(t, n) {\n      n.sphere();\n    },\n    Point: function Point(t, n) {\n      t = t.coordinates, n.point(t[0], t[1], t[2]);\n    },\n    MultiPoint: function MultiPoint(t, n) {\n      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) {\n        t = e[r], n.point(t[0], t[1], t[2]);\n      }\n    },\n    LineString: function LineString(t, n) {\n      Vc(t.coordinates, n, 0);\n    },\n    MultiLineString: function MultiLineString(t, n) {\n      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) {\n        Vc(e[r], n, 0);\n      }\n    },\n    Polygon: function Polygon(t, n) {\n      $c(t.coordinates, n);\n    },\n    MultiPolygon: function MultiPolygon(t, n) {\n      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) {\n        $c(e[r], n);\n      }\n    },\n    GeometryCollection: function GeometryCollection(t, n) {\n      for (var e = t.geometries, r = -1, i = e.length; ++r < i;) {\n        Hc(e[r], n);\n      }\n    }\n  };\n\n  function Vc(t, n, e) {\n    var r,\n        i = -1,\n        o = t.length - e;\n\n    for (n.lineStart(); ++i < o;) {\n      r = t[i], n.point(r[0], r[1], r[2]);\n    }\n\n    n.lineEnd();\n  }\n\n  function $c(t, n) {\n    var e = -1,\n        r = t.length;\n\n    for (n.polygonStart(); ++e < r;) {\n      Vc(t[e], n, 1);\n    }\n\n    n.polygonEnd();\n  }\n\n  function Wc(t, n) {\n    t && Xc.hasOwnProperty(t.type) ? Xc[t.type](t, n) : Hc(t, n);\n  }\n\n  var Zc,\n      Kc,\n      Qc,\n      Jc,\n      tf,\n      nf,\n      ef,\n      rf,\n      of,\n      af,\n      uf,\n      cf,\n      ff,\n      sf,\n      lf,\n      hf,\n      df = new g(),\n      pf = new g(),\n      gf = {\n    point: jc,\n    lineStart: jc,\n    lineEnd: jc,\n    polygonStart: function polygonStart() {\n      df = new g(), gf.lineStart = yf, gf.lineEnd = vf;\n    },\n    polygonEnd: function polygonEnd() {\n      var t = +df;\n      pf.add(t < 0 ? Ac + t : t), this.lineStart = this.lineEnd = this.point = jc;\n    },\n    sphere: function sphere() {\n      pf.add(Ac);\n    }\n  };\n\n  function yf() {\n    gf.point = _f;\n  }\n\n  function vf() {\n    bf(Zc, Kc);\n  }\n\n  function _f(t, n) {\n    gf.point = bf, Zc = t, Kc = n, Qc = t *= Sc, Jc = Cc(n = (n *= Sc) / 2 + Mc), tf = Fc(n);\n  }\n\n  function bf(t, n) {\n    var e = (t *= Sc) - Qc,\n        r = e >= 0 ? 1 : -1,\n        i = r * e,\n        o = Cc(n = (n *= Sc) / 2 + Mc),\n        a = Fc(n),\n        u = tf * a,\n        c = Jc * o + u * Cc(i),\n        f = u * r * Fc(i);\n    df.add(Nc(f, c)), Qc = t, Jc = o, tf = a;\n  }\n\n  function mf(t) {\n    return [Nc(t[1], t[0]), Yc(t[2])];\n  }\n\n  function xf(t) {\n    var n = t[0],\n        e = t[1],\n        r = Cc(e);\n    return [r * Cc(n), r * Fc(n), Fc(e)];\n  }\n\n  function wf(t, n) {\n    return t[0] * n[0] + t[1] * n[1] + t[2] * n[2];\n  }\n\n  function Mf(t, n) {\n    return [t[1] * n[2] - t[2] * n[1], t[2] * n[0] - t[0] * n[2], t[0] * n[1] - t[1] * n[0]];\n  }\n\n  function Af(t, n) {\n    t[0] += n[0], t[1] += n[1], t[2] += n[2];\n  }\n\n  function Tf(t, n) {\n    return [t[0] * n, t[1] * n, t[2] * n];\n  }\n\n  function Sf(t) {\n    var n = Uc(t[0] * t[0] + t[1] * t[1] + t[2] * t[2]);\n    t[0] /= n, t[1] /= n, t[2] /= n;\n  }\n\n  var Ef,\n      kf,\n      Nf,\n      Cf,\n      Pf,\n      zf,\n      Df,\n      qf,\n      Rf,\n      Ff,\n      Of,\n      Uf,\n      If,\n      Bf,\n      Yf,\n      Lf,\n      jf = {\n    point: Hf,\n    lineStart: Gf,\n    lineEnd: Vf,\n    polygonStart: function polygonStart() {\n      jf.point = $f, jf.lineStart = Wf, jf.lineEnd = Zf, sf = new g(), gf.polygonStart();\n    },\n    polygonEnd: function polygonEnd() {\n      gf.polygonEnd(), jf.point = Hf, jf.lineStart = Gf, jf.lineEnd = Vf, df < 0 ? (nf = -(rf = 180), ef = -(of = 90)) : sf > bc ? of = 90 : sf < -1e-6 && (ef = -90), hf[0] = nf, hf[1] = rf;\n    },\n    sphere: function sphere() {\n      nf = -(rf = 180), ef = -(of = 90);\n    }\n  };\n\n  function Hf(t, n) {\n    lf.push(hf = [nf = t, rf = t]), n < ef && (ef = n), n > of && (of = n);\n  }\n\n  function Xf(t, n) {\n    var e = xf([t * Sc, n * Sc]);\n\n    if (ff) {\n      var r = Mf(ff, e),\n          i = Mf([r[1], -r[0], 0], r);\n      Sf(i), i = mf(i);\n      var o,\n          a = t - af,\n          u = a > 0 ? 1 : -1,\n          c = i[0] * Tc * u,\n          f = Ec(a) > 180;\n      f ^ (u * af < c && c < u * t) ? (o = i[1] * Tc) > of && (of = o) : f ^ (u * af < (c = (c + 360) % 360 - 180) && c < u * t) ? (o = -i[1] * Tc) < ef && (ef = o) : (n < ef && (ef = n), n > of && (of = n)), f ? t < af ? Kf(nf, t) > Kf(nf, rf) && (rf = t) : Kf(t, rf) > Kf(nf, rf) && (nf = t) : rf >= nf ? (t < nf && (nf = t), t > rf && (rf = t)) : t > af ? Kf(nf, t) > Kf(nf, rf) && (rf = t) : Kf(t, rf) > Kf(nf, rf) && (nf = t);\n    } else lf.push(hf = [nf = t, rf = t]);\n\n    n < ef && (ef = n), n > of && (of = n), ff = e, af = t;\n  }\n\n  function Gf() {\n    jf.point = Xf;\n  }\n\n  function Vf() {\n    hf[0] = nf, hf[1] = rf, jf.point = Hf, ff = null;\n  }\n\n  function $f(t, n) {\n    if (ff) {\n      var e = t - af;\n      sf.add(Ec(e) > 180 ? e + (e > 0 ? 360 : -360) : e);\n    } else uf = t, cf = n;\n\n    gf.point(t, n), Xf(t, n);\n  }\n\n  function Wf() {\n    gf.lineStart();\n  }\n\n  function Zf() {\n    $f(uf, cf), gf.lineEnd(), Ec(sf) > bc && (nf = -(rf = 180)), hf[0] = nf, hf[1] = rf, ff = null;\n  }\n\n  function Kf(t, n) {\n    return (n -= t) < 0 ? n + 360 : n;\n  }\n\n  function Qf(t, n) {\n    return t[0] - n[0];\n  }\n\n  function Jf(t, n) {\n    return t[0] <= t[1] ? t[0] <= n && n <= t[1] : n < t[0] || t[1] < n;\n  }\n\n  var ts = {\n    sphere: jc,\n    point: ns,\n    lineStart: rs,\n    lineEnd: as,\n    polygonStart: function polygonStart() {\n      ts.lineStart = us, ts.lineEnd = cs;\n    },\n    polygonEnd: function polygonEnd() {\n      ts.lineStart = rs, ts.lineEnd = as;\n    }\n  };\n\n  function ns(t, n) {\n    t *= Sc;\n    var e = Cc(n *= Sc);\n    es(e * Cc(t), e * Fc(t), Fc(n));\n  }\n\n  function es(t, n, e) {\n    ++Ef, Nf += (t - Nf) / Ef, Cf += (n - Cf) / Ef, Pf += (e - Pf) / Ef;\n  }\n\n  function rs() {\n    ts.point = is;\n  }\n\n  function is(t, n) {\n    t *= Sc;\n    var e = Cc(n *= Sc);\n    Bf = e * Cc(t), Yf = e * Fc(t), Lf = Fc(n), ts.point = os, es(Bf, Yf, Lf);\n  }\n\n  function os(t, n) {\n    t *= Sc;\n    var e = Cc(n *= Sc),\n        r = e * Cc(t),\n        i = e * Fc(t),\n        o = Fc(n),\n        a = Nc(Uc((a = Yf * o - Lf * i) * a + (a = Lf * r - Bf * o) * a + (a = Bf * i - Yf * r) * a), Bf * r + Yf * i + Lf * o);\n    kf += a, zf += a * (Bf + (Bf = r)), Df += a * (Yf + (Yf = i)), qf += a * (Lf + (Lf = o)), es(Bf, Yf, Lf);\n  }\n\n  function as() {\n    ts.point = ns;\n  }\n\n  function us() {\n    ts.point = fs;\n  }\n\n  function cs() {\n    ss(Uf, If), ts.point = ns;\n  }\n\n  function fs(t, n) {\n    Uf = t, If = n, t *= Sc, n *= Sc, ts.point = ss;\n    var e = Cc(n);\n    Bf = e * Cc(t), Yf = e * Fc(t), Lf = Fc(n), es(Bf, Yf, Lf);\n  }\n\n  function ss(t, n) {\n    t *= Sc;\n    var e = Cc(n *= Sc),\n        r = e * Cc(t),\n        i = e * Fc(t),\n        o = Fc(n),\n        a = Yf * o - Lf * i,\n        u = Lf * r - Bf * o,\n        c = Bf * i - Yf * r,\n        f = Dc(a, u, c),\n        s = Yc(f),\n        l = f && -s / f;\n    Rf.add(l * a), Ff.add(l * u), Of.add(l * c), kf += s, zf += s * (Bf + (Bf = r)), Df += s * (Yf + (Yf = i)), qf += s * (Lf + (Lf = o)), es(Bf, Yf, Lf);\n  }\n\n  function ls(t) {\n    return function () {\n      return t;\n    };\n  }\n\n  function hs(t, n) {\n    function e(e, r) {\n      return e = t(e, r), n(e[0], e[1]);\n    }\n\n    return t.invert && n.invert && (e.invert = function (e, r) {\n      return (e = n.invert(e, r)) && t.invert(e[0], e[1]);\n    }), e;\n  }\n\n  function ds(t, n) {\n    return [Ec(t) > xc ? t + Math.round(-t / Ac) * Ac : t, n];\n  }\n\n  function ps(t, n, e) {\n    return (t %= Ac) ? n || e ? hs(ys(t), vs(n, e)) : ys(t) : n || e ? vs(n, e) : ds;\n  }\n\n  function gs(t) {\n    return function (n, e) {\n      return [(n += t) > xc ? n - Ac : n < -xc ? n + Ac : n, e];\n    };\n  }\n\n  function ys(t) {\n    var n = gs(t);\n    return n.invert = gs(-t), n;\n  }\n\n  function vs(t, n) {\n    var e = Cc(t),\n        r = Fc(t),\n        i = Cc(n),\n        o = Fc(n);\n\n    function a(t, n) {\n      var a = Cc(n),\n          u = Cc(t) * a,\n          c = Fc(t) * a,\n          f = Fc(n),\n          s = f * e + u * r;\n      return [Nc(c * i - s * o, u * e - f * r), Yc(s * i + c * o)];\n    }\n\n    return a.invert = function (t, n) {\n      var a = Cc(n),\n          u = Cc(t) * a,\n          c = Fc(t) * a,\n          f = Fc(n),\n          s = f * i - c * o;\n      return [Nc(c * i + f * o, u * e + s * r), Yc(s * e - u * r)];\n    }, a;\n  }\n\n  function _s(t) {\n    function n(n) {\n      return (n = t(n[0] * Sc, n[1] * Sc))[0] *= Tc, n[1] *= Tc, n;\n    }\n\n    return t = ps(t[0] * Sc, t[1] * Sc, t.length > 2 ? t[2] * Sc : 0), n.invert = function (n) {\n      return (n = t.invert(n[0] * Sc, n[1] * Sc))[0] *= Tc, n[1] *= Tc, n;\n    }, n;\n  }\n\n  function bs(t, n, e, r, i, o) {\n    if (e) {\n      var a = Cc(n),\n          u = Fc(n),\n          c = r * e;\n      null == i ? (i = n + r * Ac, o = n - c / 2) : (i = ms(a, i), o = ms(a, o), (r > 0 ? i < o : i > o) && (i += r * Ac));\n\n      for (var f, s = i; r > 0 ? s > o : s < o; s -= c) {\n        f = mf([a, -u * Cc(s), -u * Fc(s)]), t.point(f[0], f[1]);\n      }\n    }\n  }\n\n  function ms(t, n) {\n    (n = xf(n))[0] -= t, Sf(n);\n    var e = Bc(-n[1]);\n    return ((-n[2] < 0 ? -e : e) + Ac - bc) % Ac;\n  }\n\n  function xs() {\n    var t,\n        n = [];\n    return {\n      point: function point(n, e, r) {\n        t.push([n, e, r]);\n      },\n      lineStart: function lineStart() {\n        n.push(t = []);\n      },\n      lineEnd: jc,\n      rejoin: function rejoin() {\n        n.length > 1 && n.push(n.pop().concat(n.shift()));\n      },\n      result: function result() {\n        var e = n;\n        return n = [], t = null, e;\n      }\n    };\n  }\n\n  function ws(t, n) {\n    return Ec(t[0] - n[0]) < bc && Ec(t[1] - n[1]) < bc;\n  }\n\n  function Ms(t, n, e, r) {\n    this.x = t, this.z = n, this.o = e, this.e = r, this.v = !1, this.n = this.p = null;\n  }\n\n  function As(t, n, e, r, i) {\n    var o,\n        a,\n        u = [],\n        c = [];\n\n    if (t.forEach(function (t) {\n      if (!((n = t.length - 1) <= 0)) {\n        var n,\n            e,\n            r = t[0],\n            a = t[n];\n\n        if (ws(r, a)) {\n          if (!r[2] && !a[2]) {\n            for (i.lineStart(), o = 0; o < n; ++o) {\n              i.point((r = t[o])[0], r[1]);\n            }\n\n            return void i.lineEnd();\n          }\n\n          a[0] += 2e-6;\n        }\n\n        u.push(e = new Ms(r, t, null, !0)), c.push(e.o = new Ms(r, null, e, !1)), u.push(e = new Ms(a, t, null, !1)), c.push(e.o = new Ms(a, null, e, !0));\n      }\n    }), u.length) {\n      for (c.sort(n), Ts(u), Ts(c), o = 0, a = c.length; o < a; ++o) {\n        c[o].e = e = !e;\n      }\n\n      for (var f, s, l = u[0];;) {\n        for (var h = l, d = !0; h.v;) {\n          if ((h = h.n) === l) return;\n        }\n\n        f = h.z, i.lineStart();\n\n        do {\n          if (h.v = h.o.v = !0, h.e) {\n            if (d) for (o = 0, a = f.length; o < a; ++o) {\n              i.point((s = f[o])[0], s[1]);\n            } else r(h.x, h.n.x, 1, i);\n            h = h.n;\n          } else {\n            if (d) for (f = h.p.z, o = f.length - 1; o >= 0; --o) {\n              i.point((s = f[o])[0], s[1]);\n            } else r(h.x, h.p.x, -1, i);\n            h = h.p;\n          }\n\n          f = (h = h.o).z, d = !d;\n        } while (!h.v);\n\n        i.lineEnd();\n      }\n    }\n  }\n\n  function Ts(t) {\n    if (n = t.length) {\n      for (var n, e, r = 0, i = t[0]; ++r < n;) {\n        i.n = e = t[r], e.p = i, i = e;\n      }\n\n      i.n = e = t[0], e.p = i;\n    }\n  }\n\n  function Ss(t) {\n    return Ec(t[0]) <= xc ? t[0] : Oc(t[0]) * ((Ec(t[0]) + xc) % Ac - xc);\n  }\n\n  function Es(t, n) {\n    var e = Ss(n),\n        r = n[1],\n        i = Fc(r),\n        o = [Fc(e), -Cc(e), 0],\n        a = 0,\n        u = 0,\n        c = new g();\n    1 === i ? r = wc + bc : -1 === i && (r = -wc - bc);\n\n    for (var f = 0, s = t.length; f < s; ++f) {\n      if (h = (l = t[f]).length) for (var l, h, d = l[h - 1], p = Ss(d), y = d[1] / 2 + Mc, v = Fc(y), _ = Cc(y), b = 0; b < h; ++b, p = x, v = M, _ = A, d = m) {\n        var m = l[b],\n            x = Ss(m),\n            w = m[1] / 2 + Mc,\n            M = Fc(w),\n            A = Cc(w),\n            T = x - p,\n            S = T >= 0 ? 1 : -1,\n            E = S * T,\n            k = E > xc,\n            N = v * M;\n\n        if (c.add(Nc(N * S * Fc(E), _ * A + N * Cc(E))), a += k ? T + S * Ac : T, k ^ p >= e ^ x >= e) {\n          var C = Mf(xf(d), xf(m));\n          Sf(C);\n          var P = Mf(o, C);\n          Sf(P);\n          var z = (k ^ T >= 0 ? -1 : 1) * Yc(P[2]);\n          (r > z || r === z && (C[0] || C[1])) && (u += k ^ T >= 0 ? 1 : -1);\n        }\n      }\n    }\n\n    return (a < -1e-6 || a < bc && c < -1e-12) ^ 1 & u;\n  }\n\n  function ks(t, n, e, r) {\n    return function (i) {\n      var o,\n          a,\n          u,\n          c = n(i),\n          f = xs(),\n          s = n(f),\n          l = !1,\n          h = {\n        point: d,\n        lineStart: g,\n        lineEnd: y,\n        polygonStart: function polygonStart() {\n          h.point = v, h.lineStart = _, h.lineEnd = b, a = [], o = [];\n        },\n        polygonEnd: function polygonEnd() {\n          h.point = d, h.lineStart = g, h.lineEnd = y, a = V(a);\n          var t = Es(o, r);\n          a.length ? (l || (i.polygonStart(), l = !0), As(a, Cs, t, e, i)) : t && (l || (i.polygonStart(), l = !0), i.lineStart(), e(null, null, 1, i), i.lineEnd()), l && (i.polygonEnd(), l = !1), a = o = null;\n        },\n        sphere: function sphere() {\n          i.polygonStart(), i.lineStart(), e(null, null, 1, i), i.lineEnd(), i.polygonEnd();\n        }\n      };\n\n      function d(n, e) {\n        t(n, e) && i.point(n, e);\n      }\n\n      function p(t, n) {\n        c.point(t, n);\n      }\n\n      function g() {\n        h.point = p, c.lineStart();\n      }\n\n      function y() {\n        h.point = d, c.lineEnd();\n      }\n\n      function v(t, n) {\n        u.push([t, n]), s.point(t, n);\n      }\n\n      function _() {\n        s.lineStart(), u = [];\n      }\n\n      function b() {\n        v(u[0][0], u[0][1]), s.lineEnd();\n        var t,\n            n,\n            e,\n            r,\n            c = s.clean(),\n            h = f.result(),\n            d = h.length;\n        if (u.pop(), o.push(u), u = null, d) if (1 & c) {\n          if ((n = (e = h[0]).length - 1) > 0) {\n            for (l || (i.polygonStart(), l = !0), i.lineStart(), t = 0; t < n; ++t) {\n              i.point((r = e[t])[0], r[1]);\n            }\n\n            i.lineEnd();\n          }\n        } else d > 1 && 2 & c && h.push(h.pop().concat(h.shift())), a.push(h.filter(Ns));\n      }\n\n      return h;\n    };\n  }\n\n  function Ns(t) {\n    return t.length > 1;\n  }\n\n  function Cs(t, n) {\n    return ((t = t.x)[0] < 0 ? t[1] - wc - bc : wc - t[1]) - ((n = n.x)[0] < 0 ? n[1] - wc - bc : wc - n[1]);\n  }\n\n  ds.invert = ds;\n  var Ps = ks(function () {\n    return !0;\n  }, function (t) {\n    var n,\n        e = NaN,\n        r = NaN,\n        i = NaN;\n    return {\n      lineStart: function lineStart() {\n        t.lineStart(), n = 1;\n      },\n      point: function point(o, a) {\n        var u = o > 0 ? xc : -xc,\n            c = Ec(o - e);\n        Ec(c - xc) < bc ? (t.point(e, r = (r + a) / 2 > 0 ? wc : -wc), t.point(i, r), t.lineEnd(), t.lineStart(), t.point(u, r), t.point(o, r), n = 0) : i !== u && c >= xc && (Ec(e - i) < bc && (e -= i * bc), Ec(o - u) < bc && (o -= u * bc), r = function (t, n, e, r) {\n          var i,\n              o,\n              a = Fc(t - e);\n          return Ec(a) > bc ? kc((Fc(n) * (o = Cc(r)) * Fc(e) - Fc(r) * (i = Cc(n)) * Fc(t)) / (i * o * a)) : (n + r) / 2;\n        }(e, r, o, a), t.point(i, r), t.lineEnd(), t.lineStart(), t.point(u, r), n = 0), t.point(e = o, r = a), i = u;\n      },\n      lineEnd: function lineEnd() {\n        t.lineEnd(), e = r = NaN;\n      },\n      clean: function clean() {\n        return 2 - n;\n      }\n    };\n  }, function (t, n, e, r) {\n    var i;\n    if (null == t) i = e * wc, r.point(-xc, i), r.point(0, i), r.point(xc, i), r.point(xc, 0), r.point(xc, -i), r.point(0, -i), r.point(-xc, -i), r.point(-xc, 0), r.point(-xc, i);else if (Ec(t[0] - n[0]) > bc) {\n      var o = t[0] < n[0] ? xc : -xc;\n      i = e * o / 2, r.point(-o, i), r.point(0, i), r.point(o, i);\n    } else r.point(n[0], n[1]);\n  }, [-xc, -wc]);\n\n  function zs(t) {\n    var n = Cc(t),\n        e = 6 * Sc,\n        r = n > 0,\n        i = Ec(n) > bc;\n\n    function o(t, e) {\n      return Cc(t) * Cc(e) > n;\n    }\n\n    function a(t, e, r) {\n      var i = [1, 0, 0],\n          o = Mf(xf(t), xf(e)),\n          a = wf(o, o),\n          u = o[0],\n          c = a - u * u;\n      if (!c) return !r && t;\n      var f = n * a / c,\n          s = -n * u / c,\n          l = Mf(i, o),\n          h = Tf(i, f);\n      Af(h, Tf(o, s));\n      var d = l,\n          p = wf(h, d),\n          g = wf(d, d),\n          y = p * p - g * (wf(h, h) - 1);\n\n      if (!(y < 0)) {\n        var v = Uc(y),\n            _ = Tf(d, (-p - v) / g);\n\n        if (Af(_, h), _ = mf(_), !r) return _;\n        var b,\n            m = t[0],\n            x = e[0],\n            w = t[1],\n            M = e[1];\n        x < m && (b = m, m = x, x = b);\n        var A = x - m,\n            T = Ec(A - xc) < bc;\n\n        if (!T && M < w && (b = w, w = M, M = b), T || A < bc ? T ? w + M > 0 ^ _[1] < (Ec(_[0] - m) < bc ? w : M) : w <= _[1] && _[1] <= M : A > xc ^ (m <= _[0] && _[0] <= x)) {\n          var S = Tf(d, (-p + v) / g);\n          return Af(S, h), [_, mf(S)];\n        }\n      }\n    }\n\n    function u(n, e) {\n      var i = r ? t : xc - t,\n          o = 0;\n      return n < -i ? o |= 1 : n > i && (o |= 2), e < -i ? o |= 4 : e > i && (o |= 8), o;\n    }\n\n    return ks(o, function (t) {\n      var n, e, c, f, s;\n      return {\n        lineStart: function lineStart() {\n          f = c = !1, s = 1;\n        },\n        point: function point(l, h) {\n          var d,\n              p = [l, h],\n              g = o(l, h),\n              y = r ? g ? 0 : u(l, h) : g ? u(l + (l < 0 ? xc : -xc), h) : 0;\n          if (!n && (f = c = g) && t.lineStart(), g !== c && (!(d = a(n, p)) || ws(n, d) || ws(p, d)) && (p[2] = 1), g !== c) s = 0, g ? (t.lineStart(), d = a(p, n), t.point(d[0], d[1])) : (d = a(n, p), t.point(d[0], d[1], 2), t.lineEnd()), n = d;else if (i && n && r ^ g) {\n            var v;\n            y & e || !(v = a(p, n, !0)) || (s = 0, r ? (t.lineStart(), t.point(v[0][0], v[0][1]), t.point(v[1][0], v[1][1]), t.lineEnd()) : (t.point(v[1][0], v[1][1]), t.lineEnd(), t.lineStart(), t.point(v[0][0], v[0][1], 3)));\n          }\n          !g || n && ws(n, p) || t.point(p[0], p[1]), n = p, c = g, e = y;\n        },\n        lineEnd: function lineEnd() {\n          c && t.lineEnd(), n = null;\n        },\n        clean: function clean() {\n          return s | (f && c) << 1;\n        }\n      };\n    }, function (n, r, i, o) {\n      bs(o, t, e, i, n, r);\n    }, r ? [0, -t] : [-xc, t - xc]);\n  }\n\n  var Ds,\n      qs,\n      Rs,\n      Fs,\n      Os = 1e9,\n      Us = -Os;\n\n  function Is(t, n, e, r) {\n    function i(i, o) {\n      return t <= i && i <= e && n <= o && o <= r;\n    }\n\n    function o(i, o, u, f) {\n      var s = 0,\n          l = 0;\n      if (null == i || (s = a(i, u)) !== (l = a(o, u)) || c(i, o) < 0 ^ u > 0) do {\n        f.point(0 === s || 3 === s ? t : e, s > 1 ? r : n);\n      } while ((s = (s + u + 4) % 4) !== l);else f.point(o[0], o[1]);\n    }\n\n    function a(r, i) {\n      return Ec(r[0] - t) < bc ? i > 0 ? 0 : 3 : Ec(r[0] - e) < bc ? i > 0 ? 2 : 1 : Ec(r[1] - n) < bc ? i > 0 ? 1 : 0 : i > 0 ? 3 : 2;\n    }\n\n    function u(t, n) {\n      return c(t.x, n.x);\n    }\n\n    function c(t, n) {\n      var e = a(t, 1),\n          r = a(n, 1);\n      return e !== r ? e - r : 0 === e ? n[1] - t[1] : 1 === e ? t[0] - n[0] : 2 === e ? t[1] - n[1] : n[0] - t[0];\n    }\n\n    return function (a) {\n      var c,\n          f,\n          s,\n          l,\n          h,\n          d,\n          p,\n          g,\n          y,\n          v,\n          _,\n          b = a,\n          m = xs(),\n          x = {\n        point: w,\n        lineStart: function lineStart() {\n          x.point = M, f && f.push(s = []);\n          v = !0, y = !1, p = g = NaN;\n        },\n        lineEnd: function lineEnd() {\n          c && (M(l, h), d && y && m.rejoin(), c.push(m.result()));\n          x.point = w, y && b.lineEnd();\n        },\n        polygonStart: function polygonStart() {\n          b = m, c = [], f = [], _ = !0;\n        },\n        polygonEnd: function polygonEnd() {\n          var n = function () {\n            for (var n = 0, e = 0, i = f.length; e < i; ++e) {\n              for (var o, a, u = f[e], c = 1, s = u.length, l = u[0], h = l[0], d = l[1]; c < s; ++c) {\n                o = h, a = d, h = (l = u[c])[0], d = l[1], a <= r ? d > r && (h - o) * (r - a) > (d - a) * (t - o) && ++n : d <= r && (h - o) * (r - a) < (d - a) * (t - o) && --n;\n              }\n            }\n\n            return n;\n          }(),\n              e = _ && n,\n              i = (c = V(c)).length;\n\n          (e || i) && (a.polygonStart(), e && (a.lineStart(), o(null, null, 1, a), a.lineEnd()), i && As(c, u, n, o, a), a.polygonEnd());\n          b = a, c = f = s = null;\n        }\n      };\n\n      function w(t, n) {\n        i(t, n) && b.point(t, n);\n      }\n\n      function M(o, a) {\n        var u = i(o, a);\n        if (f && s.push([o, a]), v) l = o, h = a, d = u, v = !1, u && (b.lineStart(), b.point(o, a));else if (u && y) b.point(o, a);else {\n          var c = [p = Math.max(Us, Math.min(Os, p)), g = Math.max(Us, Math.min(Os, g))],\n              m = [o = Math.max(Us, Math.min(Os, o)), a = Math.max(Us, Math.min(Os, a))];\n          !function (t, n, e, r, i, o) {\n            var a,\n                u = t[0],\n                c = t[1],\n                f = 0,\n                s = 1,\n                l = n[0] - u,\n                h = n[1] - c;\n\n            if (a = e - u, l || !(a > 0)) {\n              if (a /= l, l < 0) {\n                if (a < f) return;\n                a < s && (s = a);\n              } else if (l > 0) {\n                if (a > s) return;\n                a > f && (f = a);\n              }\n\n              if (a = i - u, l || !(a < 0)) {\n                if (a /= l, l < 0) {\n                  if (a > s) return;\n                  a > f && (f = a);\n                } else if (l > 0) {\n                  if (a < f) return;\n                  a < s && (s = a);\n                }\n\n                if (a = r - c, h || !(a > 0)) {\n                  if (a /= h, h < 0) {\n                    if (a < f) return;\n                    a < s && (s = a);\n                  } else if (h > 0) {\n                    if (a > s) return;\n                    a > f && (f = a);\n                  }\n\n                  if (a = o - c, h || !(a < 0)) {\n                    if (a /= h, h < 0) {\n                      if (a > s) return;\n                      a > f && (f = a);\n                    } else if (h > 0) {\n                      if (a < f) return;\n                      a < s && (s = a);\n                    }\n\n                    return f > 0 && (t[0] = u + f * l, t[1] = c + f * h), s < 1 && (n[0] = u + s * l, n[1] = c + s * h), !0;\n                  }\n                }\n              }\n            }\n          }(c, m, t, n, e, r) ? u && (b.lineStart(), b.point(o, a), _ = !1) : (y || (b.lineStart(), b.point(c[0], c[1])), b.point(m[0], m[1]), u || b.lineEnd(), _ = !1);\n        }\n        p = o, g = a, y = u;\n      }\n\n      return x;\n    };\n  }\n\n  var Bs = {\n    sphere: jc,\n    point: jc,\n    lineStart: function lineStart() {\n      Bs.point = Ls, Bs.lineEnd = Ys;\n    },\n    lineEnd: jc,\n    polygonStart: jc,\n    polygonEnd: jc\n  };\n\n  function Ys() {\n    Bs.point = Bs.lineEnd = jc;\n  }\n\n  function Ls(t, n) {\n    qs = t *= Sc, Rs = Fc(n *= Sc), Fs = Cc(n), Bs.point = js;\n  }\n\n  function js(t, n) {\n    t *= Sc;\n    var e = Fc(n *= Sc),\n        r = Cc(n),\n        i = Ec(t - qs),\n        o = Cc(i),\n        a = r * Fc(i),\n        u = Fs * e - Rs * r * o,\n        c = Rs * e + Fs * r * o;\n    Ds.add(Nc(Uc(a * a + u * u), c)), qs = t, Rs = e, Fs = r;\n  }\n\n  function Hs(t) {\n    return Ds = new g(), Wc(t, Bs), +Ds;\n  }\n\n  var Xs = [null, null],\n      Gs = {\n    type: "LineString",\n    coordinates: Xs\n  };\n\n  function Vs(t, n) {\n    return Xs[0] = t, Xs[1] = n, Hs(Gs);\n  }\n\n  var $s = {\n    Feature: function Feature(t, n) {\n      return Zs(t.geometry, n);\n    },\n    FeatureCollection: function FeatureCollection(t, n) {\n      for (var e = t.features, r = -1, i = e.length; ++r < i;) {\n        if (Zs(e[r].geometry, n)) return !0;\n      }\n\n      return !1;\n    }\n  },\n      Ws = {\n    Sphere: function Sphere() {\n      return !0;\n    },\n    Point: function Point(t, n) {\n      return Ks(t.coordinates, n);\n    },\n    MultiPoint: function MultiPoint(t, n) {\n      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) {\n        if (Ks(e[r], n)) return !0;\n      }\n\n      return !1;\n    },\n    LineString: function LineString(t, n) {\n      return Qs(t.coordinates, n);\n    },\n    MultiLineString: function MultiLineString(t, n) {\n      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) {\n        if (Qs(e[r], n)) return !0;\n      }\n\n      return !1;\n    },\n    Polygon: function Polygon(t, n) {\n      return Js(t.coordinates, n);\n    },\n    MultiPolygon: function MultiPolygon(t, n) {\n      for (var e = t.coordinates, r = -1, i = e.length; ++r < i;) {\n        if (Js(e[r], n)) return !0;\n      }\n\n      return !1;\n    },\n    GeometryCollection: function GeometryCollection(t, n) {\n      for (var e = t.geometries, r = -1, i = e.length; ++r < i;) {\n        if (Zs(e[r], n)) return !0;\n      }\n\n      return !1;\n    }\n  };\n\n  function Zs(t, n) {\n    return !(!t || !Ws.hasOwnProperty(t.type)) && Ws[t.type](t, n);\n  }\n\n  function Ks(t, n) {\n    return 0 === Vs(t, n);\n  }\n\n  function Qs(t, n) {\n    for (var e, r, i, o = 0, a = t.length; o < a; o++) {\n      if (0 === (r = Vs(t[o], n))) return !0;\n      if (o > 0 && (i = Vs(t[o], t[o - 1])) > 0 && e <= i && r <= i && (e + r - i) * (1 - Math.pow((e - r) / i, 2)) < mc * i) return !0;\n      e = r;\n    }\n\n    return !1;\n  }\n\n  function Js(t, n) {\n    return !!Es(t.map(tl), nl(n));\n  }\n\n  function tl(t) {\n    return (t = t.map(nl)).pop(), t;\n  }\n\n  function nl(t) {\n    return [t[0] * Sc, t[1] * Sc];\n  }\n\n  function el(t, n, e) {\n    var r = Z(t, n - bc, e).concat(n);\n    return function (t) {\n      return r.map(function (n) {\n        return [t, n];\n      });\n    };\n  }\n\n  function rl(t, n, e) {\n    var r = Z(t, n - bc, e).concat(n);\n    return function (t) {\n      return r.map(function (n) {\n        return [n, t];\n      });\n    };\n  }\n\n  function il() {\n    var t,\n        n,\n        e,\n        r,\n        i,\n        o,\n        a,\n        u,\n        c,\n        f,\n        s,\n        l,\n        h = 10,\n        d = h,\n        p = 90,\n        g = 360,\n        y = 2.5;\n\n    function v() {\n      return {\n        type: "MultiLineString",\n        coordinates: _()\n      };\n    }\n\n    function _() {\n      return Z(Pc(r / p) * p, e, p).map(s).concat(Z(Pc(u / g) * g, a, g).map(l)).concat(Z(Pc(n / h) * h, t, h).filter(function (t) {\n        return Ec(t % p) > bc;\n      }).map(c)).concat(Z(Pc(o / d) * d, i, d).filter(function (t) {\n        return Ec(t % g) > bc;\n      }).map(f));\n    }\n\n    return v.lines = function () {\n      return _().map(function (t) {\n        return {\n          type: "LineString",\n          coordinates: t\n        };\n      });\n    }, v.outline = function () {\n      return {\n        type: "Polygon",\n        coordinates: [s(r).concat(l(a).slice(1), s(e).reverse().slice(1), l(u).reverse().slice(1))]\n      };\n    }, v.extent = function (t) {\n      return arguments.length ? v.extentMajor(t).extentMinor(t) : v.extentMinor();\n    }, v.extentMajor = function (t) {\n      return arguments.length ? (r = +t[0][0], e = +t[1][0], u = +t[0][1], a = +t[1][1], r > e && (t = r, r = e, e = t), u > a && (t = u, u = a, a = t), v.precision(y)) : [[r, u], [e, a]];\n    }, v.extentMinor = function (e) {\n      return arguments.length ? (n = +e[0][0], t = +e[1][0], o = +e[0][1], i = +e[1][1], n > t && (e = n, n = t, t = e), o > i && (e = o, o = i, i = e), v.precision(y)) : [[n, o], [t, i]];\n    }, v.step = function (t) {\n      return arguments.length ? v.stepMajor(t).stepMinor(t) : v.stepMinor();\n    }, v.stepMajor = function (t) {\n      return arguments.length ? (p = +t[0], g = +t[1], v) : [p, g];\n    }, v.stepMinor = function (t) {\n      return arguments.length ? (h = +t[0], d = +t[1], v) : [h, d];\n    }, v.precision = function (h) {\n      return arguments.length ? (y = +h, c = el(o, i, 90), f = rl(n, t, y), s = el(u, a, 90), l = rl(r, e, y), v) : y;\n    }, v.extentMajor([[-180, -89.999999], [180, 89.999999]]).extentMinor([[-180, -80.000001], [180, 80.000001]]);\n  }\n\n  var ol,\n      al,\n      ul,\n      cl,\n      fl = function fl(t) {\n    return t;\n  },\n      sl = new g(),\n      ll = new g(),\n      hl = {\n    point: jc,\n    lineStart: jc,\n    lineEnd: jc,\n    polygonStart: function polygonStart() {\n      hl.lineStart = dl, hl.lineEnd = yl;\n    },\n    polygonEnd: function polygonEnd() {\n      hl.lineStart = hl.lineEnd = hl.point = jc, sl.add(Ec(ll)), ll = new g();\n    },\n    result: function result() {\n      var t = sl / 2;\n      return sl = new g(), t;\n    }\n  };\n\n  function dl() {\n    hl.point = pl;\n  }\n\n  function pl(t, n) {\n    hl.point = gl, ol = ul = t, al = cl = n;\n  }\n\n  function gl(t, n) {\n    ll.add(cl * t - ul * n), ul = t, cl = n;\n  }\n\n  function yl() {\n    gl(ol, al);\n  }\n\n  var vl = 1 / 0,\n      _l = vl,\n      bl = -vl,\n      ml = bl,\n      xl = {\n    point: function point(t, n) {\n      t < vl && (vl = t);\n      t > bl && (bl = t);\n      n < _l && (_l = n);\n      n > ml && (ml = n);\n    },\n    lineStart: jc,\n    lineEnd: jc,\n    polygonStart: jc,\n    polygonEnd: jc,\n    result: function result() {\n      var t = [[vl, _l], [bl, ml]];\n      return bl = ml = -(_l = vl = 1 / 0), t;\n    }\n  };\n  var wl,\n      Ml,\n      Al,\n      Tl,\n      Sl = 0,\n      El = 0,\n      kl = 0,\n      Nl = 0,\n      Cl = 0,\n      Pl = 0,\n      zl = 0,\n      Dl = 0,\n      ql = 0,\n      Rl = {\n    point: Fl,\n    lineStart: Ol,\n    lineEnd: Bl,\n    polygonStart: function polygonStart() {\n      Rl.lineStart = Yl, Rl.lineEnd = Ll;\n    },\n    polygonEnd: function polygonEnd() {\n      Rl.point = Fl, Rl.lineStart = Ol, Rl.lineEnd = Bl;\n    },\n    result: function result() {\n      var t = ql ? [zl / ql, Dl / ql] : Pl ? [Nl / Pl, Cl / Pl] : kl ? [Sl / kl, El / kl] : [NaN, NaN];\n      return Sl = El = kl = Nl = Cl = Pl = zl = Dl = ql = 0, t;\n    }\n  };\n\n  function Fl(t, n) {\n    Sl += t, El += n, ++kl;\n  }\n\n  function Ol() {\n    Rl.point = Ul;\n  }\n\n  function Ul(t, n) {\n    Rl.point = Il, Fl(Al = t, Tl = n);\n  }\n\n  function Il(t, n) {\n    var e = t - Al,\n        r = n - Tl,\n        i = Uc(e * e + r * r);\n    Nl += i * (Al + t) / 2, Cl += i * (Tl + n) / 2, Pl += i, Fl(Al = t, Tl = n);\n  }\n\n  function Bl() {\n    Rl.point = Fl;\n  }\n\n  function Yl() {\n    Rl.point = jl;\n  }\n\n  function Ll() {\n    Hl(wl, Ml);\n  }\n\n  function jl(t, n) {\n    Rl.point = Hl, Fl(wl = Al = t, Ml = Tl = n);\n  }\n\n  function Hl(t, n) {\n    var e = t - Al,\n        r = n - Tl,\n        i = Uc(e * e + r * r);\n    Nl += i * (Al + t) / 2, Cl += i * (Tl + n) / 2, Pl += i, zl += (i = Tl * t - Al * n) * (Al + t), Dl += i * (Tl + n), ql += 3 * i, Fl(Al = t, Tl = n);\n  }\n\n  function Xl(t) {\n    this._context = t;\n  }\n\n  Xl.prototype = {\n    _radius: 4.5,\n    pointRadius: function pointRadius(t) {\n      return this._radius = t, this;\n    },\n    polygonStart: function polygonStart() {\n      this._line = 0;\n    },\n    polygonEnd: function polygonEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      0 === this._line && this._context.closePath(), this._point = NaN;\n    },\n    point: function point(t, n) {\n      switch (this._point) {\n        case 0:\n          this._context.moveTo(t, n), this._point = 1;\n          break;\n\n        case 1:\n          this._context.lineTo(t, n);\n\n          break;\n\n        default:\n          this._context.moveTo(t + this._radius, n), this._context.arc(t, n, this._radius, 0, Ac);\n      }\n    },\n    result: jc\n  };\n  var Gl,\n      Vl,\n      $l,\n      Wl,\n      Zl,\n      Kl = new g(),\n      Ql = {\n    point: jc,\n    lineStart: function lineStart() {\n      Ql.point = Jl;\n    },\n    lineEnd: function lineEnd() {\n      Gl && th(Vl, $l), Ql.point = jc;\n    },\n    polygonStart: function polygonStart() {\n      Gl = !0;\n    },\n    polygonEnd: function polygonEnd() {\n      Gl = null;\n    },\n    result: function result() {\n      var t = +Kl;\n      return Kl = new g(), t;\n    }\n  };\n\n  function Jl(t, n) {\n    Ql.point = th, Vl = Wl = t, $l = Zl = n;\n  }\n\n  function th(t, n) {\n    Wl -= t, Zl -= n, Kl.add(Uc(Wl * Wl + Zl * Zl)), Wl = t, Zl = n;\n  }\n\n  function nh() {\n    this._string = [];\n  }\n\n  function eh(t) {\n    return "m0," + t + "a" + t + "," + t + " 0 1,1 0," + -2 * t + "a" + t + "," + t + " 0 1,1 0," + 2 * t + "z";\n  }\n\n  function rh(t) {\n    return function (n) {\n      var e = new ih();\n\n      for (var r in t) {\n        e[r] = t[r];\n      }\n\n      return e.stream = n, e;\n    };\n  }\n\n  function ih() {}\n\n  function oh(t, n, e) {\n    var r = t.clipExtent && t.clipExtent();\n    return t.scale(150).translate([0, 0]), null != r && t.clipExtent(null), Wc(e, t.stream(xl)), n(xl.result()), null != r && t.clipExtent(r), t;\n  }\n\n  function ah(t, n, e) {\n    return oh(t, function (e) {\n      var r = n[1][0] - n[0][0],\n          i = n[1][1] - n[0][1],\n          o = Math.min(r / (e[1][0] - e[0][0]), i / (e[1][1] - e[0][1])),\n          a = +n[0][0] + (r - o * (e[1][0] + e[0][0])) / 2,\n          u = +n[0][1] + (i - o * (e[1][1] + e[0][1])) / 2;\n      t.scale(150 * o).translate([a, u]);\n    }, e);\n  }\n\n  function uh(t, n, e) {\n    return ah(t, [[0, 0], n], e);\n  }\n\n  function ch(t, n, e) {\n    return oh(t, function (e) {\n      var r = +n,\n          i = r / (e[1][0] - e[0][0]),\n          o = (r - i * (e[1][0] + e[0][0])) / 2,\n          a = -i * e[0][1];\n      t.scale(150 * i).translate([o, a]);\n    }, e);\n  }\n\n  function fh(t, n, e) {\n    return oh(t, function (e) {\n      var r = +n,\n          i = r / (e[1][1] - e[0][1]),\n          o = -i * e[0][0],\n          a = (r - i * (e[1][1] + e[0][1])) / 2;\n      t.scale(150 * i).translate([o, a]);\n    }, e);\n  }\n\n  nh.prototype = {\n    _radius: 4.5,\n    _circle: eh(4.5),\n    pointRadius: function pointRadius(t) {\n      return (t = +t) !== this._radius && (this._radius = t, this._circle = null), this;\n    },\n    polygonStart: function polygonStart() {\n      this._line = 0;\n    },\n    polygonEnd: function polygonEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      0 === this._line && this._string.push("Z"), this._point = NaN;\n    },\n    point: function point(t, n) {\n      switch (this._point) {\n        case 0:\n          this._string.push("M", t, ",", n), this._point = 1;\n          break;\n\n        case 1:\n          this._string.push("L", t, ",", n);\n\n          break;\n\n        default:\n          null == this._circle && (this._circle = eh(this._radius)), this._string.push("M", t, ",", n, this._circle);\n      }\n    },\n    result: function result() {\n      if (this._string.length) {\n        var t = this._string.join("");\n\n        return this._string = [], t;\n      }\n\n      return null;\n    }\n  }, ih.prototype = {\n    constructor: ih,\n    point: function point(t, n) {\n      this.stream.point(t, n);\n    },\n    sphere: function sphere() {\n      this.stream.sphere();\n    },\n    lineStart: function lineStart() {\n      this.stream.lineStart();\n    },\n    lineEnd: function lineEnd() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function polygonStart() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function polygonEnd() {\n      this.stream.polygonEnd();\n    }\n  };\n  var sh = Cc(30 * Sc);\n\n  function lh(t, n) {\n    return +n ? function (t, n) {\n      function e(r, i, o, a, u, c, f, s, l, h, d, p, g, y) {\n        var v = f - r,\n            _ = s - i,\n            b = v * v + _ * _;\n\n        if (b > 4 * n && g--) {\n          var m = a + h,\n              x = u + d,\n              w = c + p,\n              M = Uc(m * m + x * x + w * w),\n              A = Yc(w /= M),\n              T = Ec(Ec(w) - 1) < bc || Ec(o - l) < bc ? (o + l) / 2 : Nc(x, m),\n              S = t(T, A),\n              E = S[0],\n              k = S[1],\n              N = E - r,\n              C = k - i,\n              P = _ * N - v * C;\n          (P * P / b > n || Ec((v * N + _ * C) / b - .5) > .3 || a * h + u * d + c * p < sh) && (e(r, i, o, a, u, c, E, k, T, m /= M, x /= M, w, g, y), y.point(E, k), e(E, k, T, m, x, w, f, s, l, h, d, p, g, y));\n        }\n      }\n\n      return function (n) {\n        var r,\n            i,\n            o,\n            a,\n            u,\n            c,\n            f,\n            s,\n            l,\n            h,\n            d,\n            p,\n            g = {\n          point: y,\n          lineStart: v,\n          lineEnd: b,\n          polygonStart: function polygonStart() {\n            n.polygonStart(), g.lineStart = m;\n          },\n          polygonEnd: function polygonEnd() {\n            n.polygonEnd(), g.lineStart = v;\n          }\n        };\n\n        function y(e, r) {\n          e = t(e, r), n.point(e[0], e[1]);\n        }\n\n        function v() {\n          s = NaN, g.point = _, n.lineStart();\n        }\n\n        function _(r, i) {\n          var o = xf([r, i]),\n              a = t(r, i);\n          e(s, l, f, h, d, p, s = a[0], l = a[1], f = r, h = o[0], d = o[1], p = o[2], 16, n), n.point(s, l);\n        }\n\n        function b() {\n          g.point = y, n.lineEnd();\n        }\n\n        function m() {\n          v(), g.point = x, g.lineEnd = w;\n        }\n\n        function x(t, n) {\n          _(r = t, n), i = s, o = l, a = h, u = d, c = p, g.point = _;\n        }\n\n        function w() {\n          e(s, l, f, h, d, p, i, o, r, a, u, c, 16, n), g.lineEnd = b, b();\n        }\n\n        return g;\n      };\n    }(t, n) : function (t) {\n      return rh({\n        point: function point(n, e) {\n          n = t(n, e), this.stream.point(n[0], n[1]);\n        }\n      });\n    }(t);\n  }\n\n  var hh = rh({\n    point: function point(t, n) {\n      this.stream.point(t * Sc, n * Sc);\n    }\n  });\n\n  function dh(t, n, e, r, i, o) {\n    if (!o) return function (t, n, e, r, i) {\n      function o(o, a) {\n        return [n + t * (o *= r), e - t * (a *= i)];\n      }\n\n      return o.invert = function (o, a) {\n        return [(o - n) / t * r, (e - a) / t * i];\n      }, o;\n    }(t, n, e, r, i);\n    var a = Cc(o),\n        u = Fc(o),\n        c = a * t,\n        f = u * t,\n        s = a / t,\n        l = u / t,\n        h = (u * e - a * n) / t,\n        d = (u * n + a * e) / t;\n\n    function p(t, o) {\n      return [c * (t *= r) - f * (o *= i) + n, e - f * t - c * o];\n    }\n\n    return p.invert = function (t, n) {\n      return [r * (s * t - l * n + h), i * (d - l * t - s * n)];\n    }, p;\n  }\n\n  function ph(t) {\n    return gh(function () {\n      return t;\n    })();\n  }\n\n  function gh(t) {\n    var n,\n        e,\n        r,\n        i,\n        o,\n        a,\n        u,\n        c,\n        f,\n        s,\n        l = 150,\n        h = 480,\n        d = 250,\n        p = 0,\n        g = 0,\n        y = 0,\n        v = 0,\n        _ = 0,\n        b = 0,\n        m = 1,\n        x = 1,\n        w = null,\n        M = Ps,\n        A = null,\n        T = fl,\n        S = .5;\n\n    function E(t) {\n      return c(t[0] * Sc, t[1] * Sc);\n    }\n\n    function k(t) {\n      return (t = c.invert(t[0], t[1])) && [t[0] * Tc, t[1] * Tc];\n    }\n\n    function N() {\n      var t = dh(l, 0, 0, m, x, b).apply(null, n(p, g)),\n          r = dh(l, h - t[0], d - t[1], m, x, b);\n      return e = ps(y, v, _), u = hs(n, r), c = hs(e, u), a = lh(u, S), C();\n    }\n\n    function C() {\n      return f = s = null, E;\n    }\n\n    return E.stream = function (t) {\n      return f && s === t ? f : f = hh(function (t) {\n        return rh({\n          point: function point(n, e) {\n            var r = t(n, e);\n            return this.stream.point(r[0], r[1]);\n          }\n        });\n      }(e)(M(a(T(s = t)))));\n    }, E.preclip = function (t) {\n      return arguments.length ? (M = t, w = void 0, C()) : M;\n    }, E.postclip = function (t) {\n      return arguments.length ? (T = t, A = r = i = o = null, C()) : T;\n    }, E.clipAngle = function (t) {\n      return arguments.length ? (M = +t ? zs(w = t * Sc) : (w = null, Ps), C()) : w * Tc;\n    }, E.clipExtent = function (t) {\n      return arguments.length ? (T = null == t ? (A = r = i = o = null, fl) : Is(A = +t[0][0], r = +t[0][1], i = +t[1][0], o = +t[1][1]), C()) : null == A ? null : [[A, r], [i, o]];\n    }, E.scale = function (t) {\n      return arguments.length ? (l = +t, N()) : l;\n    }, E.translate = function (t) {\n      return arguments.length ? (h = +t[0], d = +t[1], N()) : [h, d];\n    }, E.center = function (t) {\n      return arguments.length ? (p = t[0] % 360 * Sc, g = t[1] % 360 * Sc, N()) : [p * Tc, g * Tc];\n    }, E.rotate = function (t) {\n      return arguments.length ? (y = t[0] % 360 * Sc, v = t[1] % 360 * Sc, _ = t.length > 2 ? t[2] % 360 * Sc : 0, N()) : [y * Tc, v * Tc, _ * Tc];\n    }, E.angle = function (t) {\n      return arguments.length ? (b = t % 360 * Sc, N()) : b * Tc;\n    }, E.reflectX = function (t) {\n      return arguments.length ? (m = t ? -1 : 1, N()) : m < 0;\n    }, E.reflectY = function (t) {\n      return arguments.length ? (x = t ? -1 : 1, N()) : x < 0;\n    }, E.precision = function (t) {\n      return arguments.length ? (a = lh(u, S = t * t), C()) : Uc(S);\n    }, E.fitExtent = function (t, n) {\n      return ah(E, t, n);\n    }, E.fitSize = function (t, n) {\n      return uh(E, t, n);\n    }, E.fitWidth = function (t, n) {\n      return ch(E, t, n);\n    }, E.fitHeight = function (t, n) {\n      return fh(E, t, n);\n    }, function () {\n      return n = t.apply(this, arguments), E.invert = n.invert && k, N();\n    };\n  }\n\n  function yh(t) {\n    var n = 0,\n        e = xc / 3,\n        r = gh(t),\n        i = r(n, e);\n    return i.parallels = function (t) {\n      return arguments.length ? r(n = t[0] * Sc, e = t[1] * Sc) : [n * Tc, e * Tc];\n    }, i;\n  }\n\n  function vh(t, n) {\n    var e = Fc(t),\n        r = (e + Fc(n)) / 2;\n    if (Ec(r) < bc) return function (t) {\n      var n = Cc(t);\n\n      function e(t, e) {\n        return [t * n, Fc(e) / n];\n      }\n\n      return e.invert = function (t, e) {\n        return [t / n, Yc(e * n)];\n      }, e;\n    }(t);\n    var i = 1 + e * (2 * r - e),\n        o = Uc(i) / r;\n\n    function a(t, n) {\n      var e = Uc(i - 2 * r * Fc(n)) / r;\n      return [e * Fc(t *= r), o - e * Cc(t)];\n    }\n\n    return a.invert = function (t, n) {\n      var e = o - n,\n          a = Nc(t, Ec(e)) * Oc(e);\n      return e * r < 0 && (a -= xc * Oc(t) * Oc(e)), [a / r, Yc((i - (t * t + e * e) * r * r) / (2 * r))];\n    }, a;\n  }\n\n  function _h() {\n    return yh(vh).scale(155.424).center([0, 33.6442]);\n  }\n\n  function bh() {\n    return _h().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-.6, 38.7]);\n  }\n\n  function mh(t) {\n    return function (n, e) {\n      var r = Cc(n),\n          i = Cc(e),\n          o = t(r * i);\n      return o === 1 / 0 ? [2, 0] : [o * i * Fc(n), o * Fc(e)];\n    };\n  }\n\n  function xh(t) {\n    return function (n, e) {\n      var r = Uc(n * n + e * e),\n          i = t(r),\n          o = Fc(i),\n          a = Cc(i);\n      return [Nc(n * o, r * a), Yc(r && e * o / r)];\n    };\n  }\n\n  var wh = mh(function (t) {\n    return Uc(2 / (1 + t));\n  });\n  wh.invert = xh(function (t) {\n    return 2 * Yc(t / 2);\n  });\n  var Mh = mh(function (t) {\n    return (t = Bc(t)) && t / Fc(t);\n  });\n\n  function Ah(t, n) {\n    return [t, qc(Ic((wc + n) / 2))];\n  }\n\n  function Th(t) {\n    var n,\n        e,\n        r,\n        i = ph(t),\n        o = i.center,\n        a = i.scale,\n        u = i.translate,\n        c = i.clipExtent,\n        f = null;\n\n    function s() {\n      var o = xc * a(),\n          u = i(_s(i.rotate()).invert([0, 0]));\n      return c(null == f ? [[u[0] - o, u[1] - o], [u[0] + o, u[1] + o]] : t === Ah ? [[Math.max(u[0] - o, f), n], [Math.min(u[0] + o, e), r]] : [[f, Math.max(u[1] - o, n)], [e, Math.min(u[1] + o, r)]]);\n    }\n\n    return i.scale = function (t) {\n      return arguments.length ? (a(t), s()) : a();\n    }, i.translate = function (t) {\n      return arguments.length ? (u(t), s()) : u();\n    }, i.center = function (t) {\n      return arguments.length ? (o(t), s()) : o();\n    }, i.clipExtent = function (t) {\n      return arguments.length ? (null == t ? f = n = e = r = null : (f = +t[0][0], n = +t[0][1], e = +t[1][0], r = +t[1][1]), s()) : null == f ? null : [[f, n], [e, r]];\n    }, s();\n  }\n\n  function Sh(t) {\n    return Ic((wc + t) / 2);\n  }\n\n  function Eh(t, n) {\n    var e = Cc(t),\n        r = t === n ? Fc(t) : qc(e / Cc(n)) / qc(Sh(n) / Sh(t)),\n        i = e * Rc(Sh(t), r) / r;\n    if (!r) return Ah;\n\n    function o(t, n) {\n      i > 0 ? n < -wc + bc && (n = -wc + bc) : n > wc - bc && (n = wc - bc);\n      var e = i / Rc(Sh(n), r);\n      return [e * Fc(r * t), i - e * Cc(r * t)];\n    }\n\n    return o.invert = function (t, n) {\n      var e = i - n,\n          o = Oc(r) * Uc(t * t + e * e),\n          a = Nc(t, Ec(e)) * Oc(e);\n      return e * r < 0 && (a -= xc * Oc(t) * Oc(e)), [a / r, 2 * kc(Rc(i / o, 1 / r)) - wc];\n    }, o;\n  }\n\n  function kh(t, n) {\n    return [t, n];\n  }\n\n  function Nh(t, n) {\n    var e = Cc(t),\n        r = t === n ? Fc(t) : (e - Cc(n)) / (n - t),\n        i = e / r + t;\n    if (Ec(r) < bc) return kh;\n\n    function o(t, n) {\n      var e = i - n,\n          o = r * t;\n      return [e * Fc(o), i - e * Cc(o)];\n    }\n\n    return o.invert = function (t, n) {\n      var e = i - n,\n          o = Nc(t, Ec(e)) * Oc(e);\n      return e * r < 0 && (o -= xc * Oc(t) * Oc(e)), [o / r, i - Oc(r) * Uc(t * t + e * e)];\n    }, o;\n  }\n\n  Mh.invert = xh(function (t) {\n    return t;\n  }), Ah.invert = function (t, n) {\n    return [t, 2 * kc(zc(n)) - wc];\n  }, kh.invert = kh;\n  var Ch = 1.340264,\n      Ph = -.081106,\n      zh = 893e-6,\n      Dh = .003796,\n      qh = Uc(3) / 2;\n\n  function Rh(t, n) {\n    var e = Yc(qh * Fc(n)),\n        r = e * e,\n        i = r * r * r;\n    return [t * Cc(e) / (qh * (Ch + 3 * Ph * r + i * (7 * zh + 9 * Dh * r))), e * (Ch + Ph * r + i * (zh + Dh * r))];\n  }\n\n  function Fh(t, n) {\n    var e = Cc(n),\n        r = Cc(t) * e;\n    return [e * Fc(t) / r, Fc(n) / r];\n  }\n\n  function Oh(t, n) {\n    var e = n * n,\n        r = e * e;\n    return [t * (.8707 - .131979 * e + r * (r * (.003971 * e - .001529 * r) - .013791)), n * (1.007226 + e * (.015085 + r * (.028874 * e - .044475 - .005916 * r)))];\n  }\n\n  function Uh(t, n) {\n    return [Cc(n) * Fc(t), Fc(n)];\n  }\n\n  function Ih(t, n) {\n    var e = Cc(n),\n        r = 1 + Cc(t) * e;\n    return [e * Fc(t) / r, Fc(n) / r];\n  }\n\n  function Bh(t, n) {\n    return [qc(Ic((wc + n) / 2)), -t];\n  }\n\n  function Yh(t, n) {\n    return t.parent === n.parent ? 1 : 2;\n  }\n\n  function Lh(t, n) {\n    return t + n.x;\n  }\n\n  function jh(t, n) {\n    return Math.max(t, n.y);\n  }\n\n  function Hh(t) {\n    var n = 0,\n        e = t.children,\n        r = e && e.length;\n    if (r) for (; --r >= 0;) {\n      n += e[r].value;\n    } else n = 1;\n    t.value = n;\n  }\n\n  function Xh(t, n) {\n    t instanceof Map ? (t = [void 0, t], void 0 === n && (n = Vh)) : void 0 === n && (n = Gh);\n\n    for (var e, r, i, o, a, u = new Zh(t), c = [u]; e = c.pop();) {\n      if ((i = n(e.data)) && (a = (i = Array.from(i)).length)) for (e.children = i, o = a - 1; o >= 0; --o) {\n        c.push(r = i[o] = new Zh(i[o])), r.parent = e, r.depth = e.depth + 1;\n      }\n    }\n\n    return u.eachBefore(Wh);\n  }\n\n  function Gh(t) {\n    return t.children;\n  }\n\n  function Vh(t) {\n    return Array.isArray(t) ? t[1] : null;\n  }\n\n  function $h(t) {\n    void 0 !== t.data.value && (t.value = t.data.value), t.data = t.data.data;\n  }\n\n  function Wh(t) {\n    var n = 0;\n\n    do {\n      t.height = n;\n    } while ((t = t.parent) && t.height < ++n);\n  }\n\n  function Zh(t) {\n    this.data = t, this.depth = this.height = 0, this.parent = null;\n  }\n\n  function Kh(t) {\n    for (var n, e, r = 0, i = (t = function (t) {\n      for (var n, e, r = t.length; r;) {\n        e = Math.random() * r-- | 0, n = t[r], t[r] = t[e], t[e] = n;\n      }\n\n      return t;\n    }(Array.from(t))).length, o = []; r < i;) {\n      n = t[r], e && td(e, n) ? ++r : (e = ed(o = Qh(o, n)), r = 0);\n    }\n\n    return e;\n  }\n\n  function Qh(t, n) {\n    var e, r;\n    if (nd(n, t)) return [n];\n\n    for (e = 0; e < t.length; ++e) {\n      if (Jh(n, t[e]) && nd(rd(t[e], n), t)) return [t[e], n];\n    }\n\n    for (e = 0; e < t.length - 1; ++e) {\n      for (r = e + 1; r < t.length; ++r) {\n        if (Jh(rd(t[e], t[r]), n) && Jh(rd(t[e], n), t[r]) && Jh(rd(t[r], n), t[e]) && nd(id(t[e], t[r], n), t)) return [t[e], t[r], n];\n      }\n    }\n\n    throw new Error();\n  }\n\n  function Jh(t, n) {\n    var e = t.r - n.r,\n        r = n.x - t.x,\n        i = n.y - t.y;\n    return e < 0 || e * e < r * r + i * i;\n  }\n\n  function td(t, n) {\n    var e = t.r - n.r + 1e-9 * Math.max(t.r, n.r, 1),\n        r = n.x - t.x,\n        i = n.y - t.y;\n    return e > 0 && e * e > r * r + i * i;\n  }\n\n  function nd(t, n) {\n    for (var e = 0; e < n.length; ++e) {\n      if (!td(t, n[e])) return !1;\n    }\n\n    return !0;\n  }\n\n  function ed(t) {\n    switch (t.length) {\n      case 1:\n        return function (t) {\n          return {\n            x: t.x,\n            y: t.y,\n            r: t.r\n          };\n        }(t[0]);\n\n      case 2:\n        return rd(t[0], t[1]);\n\n      case 3:\n        return id(t[0], t[1], t[2]);\n    }\n  }\n\n  function rd(t, n) {\n    var e = t.x,\n        r = t.y,\n        i = t.r,\n        o = n.x,\n        a = n.y,\n        u = n.r,\n        c = o - e,\n        f = a - r,\n        s = u - i,\n        l = Math.sqrt(c * c + f * f);\n    return {\n      x: (e + o + c / l * s) / 2,\n      y: (r + a + f / l * s) / 2,\n      r: (l + i + u) / 2\n    };\n  }\n\n  function id(t, n, e) {\n    var r = t.x,\n        i = t.y,\n        o = t.r,\n        a = n.x,\n        u = n.y,\n        c = n.r,\n        f = e.x,\n        s = e.y,\n        l = e.r,\n        h = r - a,\n        d = r - f,\n        p = i - u,\n        g = i - s,\n        y = c - o,\n        v = l - o,\n        _ = r * r + i * i - o * o,\n        b = _ - a * a - u * u + c * c,\n        m = _ - f * f - s * s + l * l,\n        x = d * p - h * g,\n        w = (p * m - g * b) / (2 * x) - r,\n        M = (g * y - p * v) / x,\n        A = (d * b - h * m) / (2 * x) - i,\n        T = (h * v - d * y) / x,\n        S = M * M + T * T - 1,\n        E = 2 * (o + w * M + A * T),\n        k = w * w + A * A - o * o,\n        N = -(S ? (E + Math.sqrt(E * E - 4 * S * k)) / (2 * S) : k / E);\n\n    return {\n      x: r + w + M * N,\n      y: i + A + T * N,\n      r: N\n    };\n  }\n\n  function od(t, n, e) {\n    var r,\n        i,\n        o,\n        a,\n        u = t.x - n.x,\n        c = t.y - n.y,\n        f = u * u + c * c;\n    f ? (i = n.r + e.r, i *= i, a = t.r + e.r, i > (a *= a) ? (r = (f + a - i) / (2 * f), o = Math.sqrt(Math.max(0, a / f - r * r)), e.x = t.x - r * u - o * c, e.y = t.y - r * c + o * u) : (r = (f + i - a) / (2 * f), o = Math.sqrt(Math.max(0, i / f - r * r)), e.x = n.x + r * u - o * c, e.y = n.y + r * c + o * u)) : (e.x = n.x + e.r, e.y = n.y);\n  }\n\n  function ad(t, n) {\n    var e = t.r + n.r - 1e-6,\n        r = n.x - t.x,\n        i = n.y - t.y;\n    return e > 0 && e * e > r * r + i * i;\n  }\n\n  function ud(t) {\n    var n = t._,\n        e = t.next._,\n        r = n.r + e.r,\n        i = (n.x * e.r + e.x * n.r) / r,\n        o = (n.y * e.r + e.y * n.r) / r;\n    return i * i + o * o;\n  }\n\n  function cd(t) {\n    this._ = t, this.next = null, this.previous = null;\n  }\n\n  function fd(t) {\n    if (!(i = (t = function (t) {\n      return "object" == _typeof(t) && "length" in t ? t : Array.from(t);\n    }(t)).length)) return 0;\n    var n, e, r, i, o, a, u, c, f, s, l;\n    if ((n = t[0]).x = 0, n.y = 0, !(i > 1)) return n.r;\n    if (e = t[1], n.x = -e.r, e.x = n.r, e.y = 0, !(i > 2)) return n.r + e.r;\n    od(e, n, r = t[2]), n = new cd(n), e = new cd(e), r = new cd(r), n.next = r.previous = e, e.next = n.previous = r, r.next = e.previous = n;\n\n    t: for (u = 3; u < i; ++u) {\n      od(n._, e._, r = t[u]), r = new cd(r), c = e.next, f = n.previous, s = e._.r, l = n._.r;\n\n      do {\n        if (s <= l) {\n          if (ad(c._, r._)) {\n            e = c, n.next = e, e.previous = n, --u;\n            continue t;\n          }\n\n          s += c._.r, c = c.next;\n        } else {\n          if (ad(f._, r._)) {\n            (n = f).next = e, e.previous = n, --u;\n            continue t;\n          }\n\n          l += f._.r, f = f.previous;\n        }\n      } while (c !== f.next);\n\n      for (r.previous = n, r.next = e, n.next = e.previous = e = r, o = ud(n); (r = r.next) !== e;) {\n        (a = ud(r)) < o && (n = r, o = a);\n      }\n\n      e = n.next;\n    }\n\n    for (n = [e._], r = e; (r = r.next) !== e;) {\n      n.push(r._);\n    }\n\n    for (r = Kh(n), u = 0; u < i; ++u) {\n      (n = t[u]).x -= r.x, n.y -= r.y;\n    }\n\n    return r.r;\n  }\n\n  function sd(t) {\n    return null == t ? null : ld(t);\n  }\n\n  function ld(t) {\n    if ("function" != typeof t) throw new Error();\n    return t;\n  }\n\n  function hd() {\n    return 0;\n  }\n\n  function dd(t) {\n    return function () {\n      return t;\n    };\n  }\n\n  function pd(t) {\n    return Math.sqrt(t.value);\n  }\n\n  function gd(t) {\n    return function (n) {\n      n.children || (n.r = Math.max(0, +t(n) || 0));\n    };\n  }\n\n  function yd(t, n) {\n    return function (e) {\n      if (r = e.children) {\n        var r,\n            i,\n            o,\n            a = r.length,\n            u = t(e) * n || 0;\n        if (u) for (i = 0; i < a; ++i) {\n          r[i].r += u;\n        }\n        if (o = fd(r), u) for (i = 0; i < a; ++i) {\n          r[i].r -= u;\n        }\n        e.r = o + u;\n      }\n    };\n  }\n\n  function vd(t) {\n    return function (n) {\n      var e = n.parent;\n      n.r *= t, e && (n.x = e.x + t * n.x, n.y = e.y + t * n.y);\n    };\n  }\n\n  function _d(t) {\n    t.x0 = Math.round(t.x0), t.y0 = Math.round(t.y0), t.x1 = Math.round(t.x1), t.y1 = Math.round(t.y1);\n  }\n\n  function bd(t, n, e, r, i) {\n    for (var o, a = t.children, u = -1, c = a.length, f = t.value && (r - n) / t.value; ++u < c;) {\n      (o = a[u]).y0 = e, o.y1 = i, o.x0 = n, o.x1 = n += o.value * f;\n    }\n  }\n\n  Rh.invert = function (t, n) {\n    for (var e, r = n, i = r * r, o = i * i * i, a = 0; a < 12 && (o = (i = (r -= e = (r * (Ch + Ph * i + o * (zh + Dh * i)) - n) / (Ch + 3 * Ph * i + o * (7 * zh + 9 * Dh * i))) * r) * i * i, !(Ec(e) < mc)); ++a) {\n      ;\n    }\n\n    return [qh * t * (Ch + 3 * Ph * i + o * (7 * zh + 9 * Dh * i)) / Cc(r), Yc(Fc(r) / qh)];\n  }, Fh.invert = xh(kc), Oh.invert = function (t, n) {\n    var e,\n        r = n,\n        i = 25;\n\n    do {\n      var o = r * r,\n          a = o * o;\n      r -= e = (r * (1.007226 + o * (.015085 + a * (.028874 * o - .044475 - .005916 * a))) - n) / (1.007226 + o * (.045255 + a * (.259866 * o - .311325 - .005916 * 11 * a)));\n    } while (Ec(e) > bc && --i > 0);\n\n    return [t / (.8707 + (o = r * r) * (o * (o * o * o * (.003971 - .001529 * o) - .013791) - .131979)), r];\n  }, Uh.invert = xh(Yc), Ih.invert = xh(function (t) {\n    return 2 * kc(t);\n  }), Bh.invert = function (t, n) {\n    return [-n, 2 * kc(zc(t)) - wc];\n  }, Zh.prototype = Xh.prototype = _defineProperty({\n    constructor: Zh,\n    count: function count() {\n      return this.eachAfter(Hh);\n    },\n    each: function each(t, n) {\n      var e = -1;\n\n      var _iterator34 = _createForOfIteratorHelper(this),\n          _step34;\n\n      try {\n        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n          var _r26 = _step34.value;\n          t.call(n, _r26, ++e, this);\n        }\n      } catch (err) {\n        _iterator34.e(err);\n      } finally {\n        _iterator34.f();\n      }\n\n      return this;\n    },\n    eachAfter: function eachAfter(t, n) {\n      for (var e, r, i, o = this, a = [o], u = [], c = -1; o = a.pop();) {\n        if (u.push(o), e = o.children) for (r = 0, i = e.length; r < i; ++r) {\n          a.push(e[r]);\n        }\n      }\n\n      for (; o = u.pop();) {\n        t.call(n, o, ++c, this);\n      }\n\n      return this;\n    },\n    eachBefore: function eachBefore(t, n) {\n      for (var e, r, i = this, o = [i], a = -1; i = o.pop();) {\n        if (t.call(n, i, ++a, this), e = i.children) for (r = e.length - 1; r >= 0; --r) {\n          o.push(e[r]);\n        }\n      }\n\n      return this;\n    },\n    find: function find(t, n) {\n      var e = -1;\n\n      var _iterator35 = _createForOfIteratorHelper(this),\n          _step35;\n\n      try {\n        for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n          var _r27 = _step35.value;\n          if (t.call(n, _r27, ++e, this)) return _r27;\n        }\n      } catch (err) {\n        _iterator35.e(err);\n      } finally {\n        _iterator35.f();\n      }\n    },\n    sum: function sum(t) {\n      return this.eachAfter(function (n) {\n        for (var e = +t(n.data) || 0, r = n.children, i = r && r.length; --i >= 0;) {\n          e += r[i].value;\n        }\n\n        n.value = e;\n      });\n    },\n    sort: function sort(t) {\n      return this.eachBefore(function (n) {\n        n.children && n.children.sort(t);\n      });\n    },\n    path: function path(t) {\n      for (var n = this, e = function (t, n) {\n        if (t === n) return t;\n        var e = t.ancestors(),\n            r = n.ancestors(),\n            i = null;\n        t = e.pop(), n = r.pop();\n\n        for (; t === n;) {\n          i = t, t = e.pop(), n = r.pop();\n        }\n\n        return i;\n      }(n, t), r = [n]; n !== e;) {\n        n = n.parent, r.push(n);\n      }\n\n      for (var i = r.length; t !== e;) {\n        r.splice(i, 0, t), t = t.parent;\n      }\n\n      return r;\n    },\n    ancestors: function ancestors() {\n      for (var t = this, n = [t]; t = t.parent;) {\n        n.push(t);\n      }\n\n      return n;\n    },\n    descendants: function descendants() {\n      return Array.from(this);\n    },\n    leaves: function leaves() {\n      var t = [];\n      return this.eachBefore(function (n) {\n        n.children || t.push(n);\n      }), t;\n    },\n    links: function links() {\n      var t = this,\n          n = [];\n      return t.each(function (e) {\n        e !== t && n.push({\n          source: e.parent,\n          target: e\n        });\n      }), n;\n    },\n    copy: function copy() {\n      return Xh(this).eachBefore($h);\n    }\n  }, Symbol.iterator, /*#__PURE__*/regenerator_default().mark(function _callee5() {\n    var t, n, e, r, i, o;\n    return regenerator_default().wrap(function _callee5$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            i = this, o = [i];\n\n          case 1:\n            t = o.reverse(), o = [];\n\n          case 2:\n            if (!(i = t.pop())) {\n              _context9.next = 9;\n              break;\n            }\n\n            _context9.next = 5;\n            return i;\n\n          case 5:\n            if (!(n = i.children)) {\n              _context9.next = 7;\n              break;\n            }\n\n            for (e = 0, r = n.length; e < r; ++e) {\n              o.push(n[e]);\n            }\n\n          case 7:\n            _context9.next = 2;\n            break;\n\n          case 9:\n            if (o.length) {\n              _context9.next = 1;\n              break;\n            }\n\n          case 10:\n          case "end":\n            return _context9.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n  var md = {\n    depth: -1\n  },\n      xd = {};\n\n  function wd(t) {\n    return t.id;\n  }\n\n  function Md(t) {\n    return t.parentId;\n  }\n\n  function Ad(t, n) {\n    return t.parent === n.parent ? 1 : 2;\n  }\n\n  function Td(t) {\n    var n = t.children;\n    return n ? n[0] : t.t;\n  }\n\n  function Sd(t) {\n    var n = t.children;\n    return n ? n[n.length - 1] : t.t;\n  }\n\n  function Ed(t, n, e) {\n    var r = e / (n.i - t.i);\n    n.c -= r, n.s += e, t.c += r, n.z += e, n.m += e;\n  }\n\n  function kd(t, n, e) {\n    return t.a.parent === n.parent ? t.a : e;\n  }\n\n  function Nd(t, n) {\n    this._ = t, this.parent = null, this.children = null, this.A = null, this.a = this, this.z = 0, this.m = 0, this.c = 0, this.s = 0, this.t = null, this.i = n;\n  }\n\n  function Cd(t, n, e, r, i) {\n    for (var o, a = t.children, u = -1, c = a.length, f = t.value && (i - e) / t.value; ++u < c;) {\n      (o = a[u]).x0 = n, o.x1 = r, o.y0 = e, o.y1 = e += o.value * f;\n    }\n  }\n\n  Nd.prototype = Object.create(Zh.prototype);\n  var Pd = (1 + Math.sqrt(5)) / 2;\n\n  function zd(t, n, e, r, i, o) {\n    for (var a, u, c, f, s, l, h, d, p, g, y, v = [], _ = n.children, b = 0, m = 0, x = _.length, w = n.value; b < x;) {\n      c = i - e, f = o - r;\n\n      do {\n        s = _[m++].value;\n      } while (!s && m < x);\n\n      for (l = h = s, y = s * s * (g = Math.max(f / c, c / f) / (w * t)), p = Math.max(h / y, y / l); m < x; ++m) {\n        if (s += u = _[m].value, u < l && (l = u), u > h && (h = u), y = s * s * g, (d = Math.max(h / y, y / l)) > p) {\n          s -= u;\n          break;\n        }\n\n        p = d;\n      }\n\n      v.push(a = {\n        value: s,\n        dice: c < f,\n        children: _.slice(b, m)\n      }), a.dice ? bd(a, e, r, i, w ? r += f * s / w : o) : Cd(a, e, r, w ? e += c * s / w : i, o), w -= s, b = m;\n    }\n\n    return v;\n  }\n\n  var Dd = function t(n) {\n    function e(t, e, r, i, o) {\n      zd(n, t, e, r, i, o);\n    }\n\n    return e.ratio = function (n) {\n      return t((n = +n) > 1 ? n : 1);\n    }, e;\n  }(Pd);\n\n  var qd = function t(n) {\n    function e(t, e, r, i, o) {\n      if ((a = t._squarify) && a.ratio === n) for (var a, u, c, f, s, l = -1, h = a.length, d = t.value; ++l < h;) {\n        for (c = (u = a[l]).children, f = u.value = 0, s = c.length; f < s; ++f) {\n          u.value += c[f].value;\n        }\n\n        u.dice ? bd(u, e, r, i, d ? r += (o - r) * u.value / d : o) : Cd(u, e, r, d ? e += (i - e) * u.value / d : i, o), d -= u.value;\n      } else t._squarify = a = zd(n, t, e, r, i, o), a.ratio = n;\n    }\n\n    return e.ratio = function (n) {\n      return t((n = +n) > 1 ? n : 1);\n    }, e;\n  }(Pd);\n\n  function Rd(t, n, e) {\n    return (n[0] - t[0]) * (e[1] - t[1]) - (n[1] - t[1]) * (e[0] - t[0]);\n  }\n\n  function Fd(t, n) {\n    return t[0] - n[0] || t[1] - n[1];\n  }\n\n  function Od(t) {\n    var n = t.length,\n        e = [0, 1];\n    var r,\n        i = 2;\n\n    for (r = 2; r < n; ++r) {\n      for (; i > 1 && Rd(t[e[i - 2]], t[e[i - 1]], t[r]) <= 0;) {\n        --i;\n      }\n\n      e[i++] = r;\n    }\n\n    return e.slice(0, i);\n  }\n\n  var Ud = Math.random,\n      Id = function t(n) {\n    function e(t, e) {\n      return t = null == t ? 0 : +t, e = null == e ? 1 : +e, 1 === arguments.length ? (e = t, t = 0) : e -= t, function () {\n        return n() * e + t;\n      };\n    }\n\n    return e.source = t, e;\n  }(Ud),\n      Bd = function t(n) {\n    function e(t, e) {\n      return arguments.length < 2 && (e = t, t = 0), t = Math.floor(t), e = Math.floor(e) - t, function () {\n        return Math.floor(n() * e + t);\n      };\n    }\n\n    return e.source = t, e;\n  }(Ud),\n      Yd = function t(n) {\n    function e(t, e) {\n      var r, i;\n      return t = null == t ? 0 : +t, e = null == e ? 1 : +e, function () {\n        var o;\n        if (null != r) o = r, r = null;else do {\n          r = 2 * n() - 1, o = 2 * n() - 1, i = r * r + o * o;\n        } while (!i || i > 1);\n        return t + e * o * Math.sqrt(-2 * Math.log(i) / i);\n      };\n    }\n\n    return e.source = t, e;\n  }(Ud),\n      Ld = function t(n) {\n    var e = Yd.source(n);\n\n    function r() {\n      var t = e.apply(this, arguments);\n      return function () {\n        return Math.exp(t());\n      };\n    }\n\n    return r.source = t, r;\n  }(Ud),\n      jd = function t(n) {\n    function e(t) {\n      return (t = +t) <= 0 ? function () {\n        return 0;\n      } : function () {\n        for (var e = 0, r = t; r > 1; --r) {\n          e += n();\n        }\n\n        return e + r * n();\n      };\n    }\n\n    return e.source = t, e;\n  }(Ud),\n      Hd = function t(n) {\n    var e = jd.source(n);\n\n    function r(t) {\n      if (0 == (t = +t)) return n;\n      var r = e(t);\n      return function () {\n        return r() / t;\n      };\n    }\n\n    return r.source = t, r;\n  }(Ud),\n      Xd = function t(n) {\n    function e(t) {\n      return function () {\n        return -Math.log1p(-n()) / t;\n      };\n    }\n\n    return e.source = t, e;\n  }(Ud),\n      Gd = function t(n) {\n    function e(t) {\n      if ((t = +t) < 0) throw new RangeError("invalid alpha");\n      return t = 1 / -t, function () {\n        return Math.pow(1 - n(), t);\n      };\n    }\n\n    return e.source = t, e;\n  }(Ud),\n      Vd = function t(n) {\n    function e(t) {\n      if ((t = +t) < 0 || t > 1) throw new RangeError("invalid p");\n      return function () {\n        return Math.floor(n() + t);\n      };\n    }\n\n    return e.source = t, e;\n  }(Ud),\n      $d = function t(n) {\n    function e(t) {\n      if ((t = +t) < 0 || t > 1) throw new RangeError("invalid p");\n      return 0 === t ? function () {\n        return 1 / 0;\n      } : 1 === t ? function () {\n        return 1;\n      } : (t = Math.log1p(-t), function () {\n        return 1 + Math.floor(Math.log1p(-n()) / t);\n      });\n    }\n\n    return e.source = t, e;\n  }(Ud),\n      Wd = function t(n) {\n    var e = Yd.source(n)();\n\n    function r(t, r) {\n      if ((t = +t) < 0) throw new RangeError("invalid k");\n      if (0 === t) return function () {\n        return 0;\n      };\n      if (r = null == r ? 1 : +r, 1 === t) return function () {\n        return -Math.log1p(-n()) * r;\n      };\n      var i = (t < 1 ? t + 1 : t) - 1 / 3,\n          o = 1 / (3 * Math.sqrt(i)),\n          a = t < 1 ? function () {\n        return Math.pow(n(), 1 / t);\n      } : function () {\n        return 1;\n      };\n      return function () {\n        do {\n          do {\n            var t = e(),\n                u = 1 + o * t;\n          } while (u <= 0);\n\n          u *= u * u;\n          var c = 1 - n();\n        } while (c >= 1 - .0331 * t * t * t * t && Math.log(c) >= .5 * t * t + i * (1 - u + Math.log(u)));\n\n        return i * u * a() * r;\n      };\n    }\n\n    return r.source = t, r;\n  }(Ud),\n      Zd = function t(n) {\n    var e = Wd.source(n);\n\n    function r(t, n) {\n      var r = e(t),\n          i = e(n);\n      return function () {\n        var t = r();\n        return 0 === t ? 0 : t / (t + i());\n      };\n    }\n\n    return r.source = t, r;\n  }(Ud),\n      Kd = function t(n) {\n    var e = $d.source(n),\n        r = Zd.source(n);\n\n    function i(t, n) {\n      return t = +t, (n = +n) >= 1 ? function () {\n        return t;\n      } : n <= 0 ? function () {\n        return 0;\n      } : function () {\n        for (var i = 0, o = t, a = n; o * a > 16 && o * (1 - a) > 16;) {\n          var u = Math.floor((o + 1) * a),\n              c = r(u, o - u + 1)();\n          c <= a ? (i += u, o -= u, a = (a - c) / (1 - c)) : (o = u - 1, a /= c);\n        }\n\n        for (var f = a < .5, s = e(f ? a : 1 - a), l = s(), h = 0; l <= o; ++h) {\n          l += s();\n        }\n\n        return i + (f ? h : o - h);\n      };\n    }\n\n    return i.source = t, i;\n  }(Ud),\n      Qd = function t(n) {\n    function e(t, e, r) {\n      var i;\n      return 0 == (t = +t) ? i = function i(t) {\n        return -Math.log(t);\n      } : (t = 1 / t, i = function i(n) {\n        return Math.pow(n, t);\n      }), e = null == e ? 0 : +e, r = null == r ? 1 : +r, function () {\n        return e + r * i(-Math.log1p(-n()));\n      };\n    }\n\n    return e.source = t, e;\n  }(Ud),\n      Jd = function t(n) {\n    function e(t, e) {\n      return t = null == t ? 0 : +t, e = null == e ? 1 : +e, function () {\n        return t + e * Math.tan(Math.PI * n());\n      };\n    }\n\n    return e.source = t, e;\n  }(Ud),\n      tp = function t(n) {\n    function e(t, e) {\n      return t = null == t ? 0 : +t, e = null == e ? 1 : +e, function () {\n        var r = n();\n        return t + e * Math.log(r / (1 - r));\n      };\n    }\n\n    return e.source = t, e;\n  }(Ud),\n      np = function t(n) {\n    var e = Wd.source(n),\n        r = Kd.source(n);\n\n    function i(t) {\n      return function () {\n        for (var i = 0, o = t; o > 16;) {\n          var a = Math.floor(.875 * o),\n              u = e(a)();\n          if (u > o) return i + r(a - 1, o / u)();\n          i += a, o -= u;\n        }\n\n        for (var c = -Math.log1p(-n()), f = 0; c <= o; ++f) {\n          c -= Math.log1p(-n());\n        }\n\n        return i + f;\n      };\n    }\n\n    return i.source = t, i;\n  }(Ud);\n\n  var ep = 1 / 4294967296;\n\n  function rp(t, n) {\n    switch (arguments.length) {\n      case 0:\n        break;\n\n      case 1:\n        this.range(t);\n        break;\n\n      default:\n        this.range(n).domain(t);\n    }\n\n    return this;\n  }\n\n  function ip(t, n) {\n    switch (arguments.length) {\n      case 0:\n        break;\n\n      case 1:\n        "function" == typeof t ? this.interpolator(t) : this.range(t);\n        break;\n\n      default:\n        this.domain(t), "function" == typeof n ? this.interpolator(n) : this.range(n);\n    }\n\n    return this;\n  }\n\n  var op = Symbol("implicit");\n\n  function ap() {\n    var t = new Map(),\n        n = [],\n        e = [],\n        r = op;\n\n    function i(i) {\n      var o = i + "",\n          a = t.get(o);\n\n      if (!a) {\n        if (r !== op) return r;\n        t.set(o, a = n.push(i));\n      }\n\n      return e[(a - 1) % e.length];\n    }\n\n    return i.domain = function (e) {\n      if (!arguments.length) return n.slice();\n      n = [], t = new Map();\n\n      var _iterator36 = _createForOfIteratorHelper(e),\n          _step36;\n\n      try {\n        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n          var _r28 = _step36.value;\n\n          var _e34 = _r28 + "";\n\n          t.has(_e34) || t.set(_e34, n.push(_r28));\n        }\n      } catch (err) {\n        _iterator36.e(err);\n      } finally {\n        _iterator36.f();\n      }\n\n      return i;\n    }, i.range = function (t) {\n      return arguments.length ? (e = Array.from(t), i) : e.slice();\n    }, i.unknown = function (t) {\n      return arguments.length ? (r = t, i) : r;\n    }, i.copy = function () {\n      return ap(n, e).unknown(r);\n    }, rp.apply(i, arguments), i;\n  }\n\n  function up() {\n    var t,\n        n,\n        e = ap().unknown(void 0),\n        r = e.domain,\n        i = e.range,\n        o = 0,\n        a = 1,\n        u = !1,\n        c = 0,\n        f = 0,\n        s = .5;\n\n    function l() {\n      var e = r().length,\n          l = a < o,\n          h = l ? a : o,\n          d = l ? o : a;\n      t = (d - h) / Math.max(1, e - c + 2 * f), u && (t = Math.floor(t)), h += (d - h - t * (e - c)) * s, n = t * (1 - c), u && (h = Math.round(h), n = Math.round(n));\n      var p = Z(e).map(function (n) {\n        return h + t * n;\n      });\n      return i(l ? p.reverse() : p);\n    }\n\n    return delete e.unknown, e.domain = function (t) {\n      return arguments.length ? (r(t), l()) : r();\n    }, e.range = function (t) {\n      var _t26, _t27;\n\n      return arguments.length ? ((_t26 = t, _t27 = _slicedToArray(_t26, 2), o = _t27[0], a = _t27[1], _t26), o = +o, a = +a, l()) : [o, a];\n    }, e.rangeRound = function (t) {\n      var _t28, _t29;\n\n      return (_t28 = t, _t29 = _slicedToArray(_t28, 2), o = _t29[0], a = _t29[1], _t28), o = +o, a = +a, u = !0, l();\n    }, e.bandwidth = function () {\n      return n;\n    }, e.step = function () {\n      return t;\n    }, e.round = function (t) {\n      return arguments.length ? (u = !!t, l()) : u;\n    }, e.padding = function (t) {\n      return arguments.length ? (c = Math.min(1, f = +t), l()) : c;\n    }, e.paddingInner = function (t) {\n      return arguments.length ? (c = Math.min(1, t), l()) : c;\n    }, e.paddingOuter = function (t) {\n      return arguments.length ? (f = +t, l()) : f;\n    }, e.align = function (t) {\n      return arguments.length ? (s = Math.max(0, Math.min(1, t)), l()) : s;\n    }, e.copy = function () {\n      return up(r(), [o, a]).round(u).paddingInner(c).paddingOuter(f).align(s);\n    }, rp.apply(l(), arguments);\n  }\n\n  function cp(t) {\n    var n = t.copy;\n    return t.padding = t.paddingOuter, delete t.paddingInner, delete t.paddingOuter, t.copy = function () {\n      return cp(n());\n    }, t;\n  }\n\n  function fp(t) {\n    return +t;\n  }\n\n  var sp = [0, 1];\n\n  function lp(t) {\n    return t;\n  }\n\n  function hp(t, n) {\n    return (n -= t = +t) ? function (e) {\n      return (e - t) / n;\n    } : function (t) {\n      return function () {\n        return t;\n      };\n    }(isNaN(n) ? NaN : .5);\n  }\n\n  function dp(t, n, e) {\n    var r = t[0],\n        i = t[1],\n        o = n[0],\n        a = n[1];\n    return i < r ? (r = hp(i, r), o = e(a, o)) : (r = hp(r, i), o = e(o, a)), function (t) {\n      return o(r(t));\n    };\n  }\n\n  function pp(t, n, e) {\n    var r = Math.min(t.length, n.length) - 1,\n        i = new Array(r),\n        a = new Array(r),\n        u = -1;\n\n    for (t[r] < t[0] && (t = t.slice().reverse(), n = n.slice().reverse()); ++u < r;) {\n      i[u] = hp(t[u], t[u + 1]), a[u] = e(n[u], n[u + 1]);\n    }\n\n    return function (n) {\n      var e = o(t, n, 1, r) - 1;\n      return a[e](i[e](n));\n    };\n  }\n\n  function gp(t, n) {\n    return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown());\n  }\n\n  function yp() {\n    var t,\n        n,\n        e,\n        r,\n        i,\n        o,\n        a = sp,\n        u = sp,\n        c = Mr,\n        f = lp;\n\n    function s() {\n      var t = Math.min(a.length, u.length);\n      return f !== lp && (f = function (t, n) {\n        var e;\n        return t > n && (e = t, t = n, n = e), function (e) {\n          return Math.max(t, Math.min(n, e));\n        };\n      }(a[0], a[t - 1])), r = t > 2 ? pp : dp, i = o = null, l;\n    }\n\n    function l(n) {\n      return isNaN(n = +n) ? e : (i || (i = r(a.map(t), u, c)))(t(f(n)));\n    }\n\n    return l.invert = function (e) {\n      return f(n((o || (o = r(u, a.map(t), _r)))(e)));\n    }, l.domain = function (t) {\n      return arguments.length ? (a = Array.from(t, fp), s()) : a.slice();\n    }, l.range = function (t) {\n      return arguments.length ? (u = Array.from(t), s()) : u.slice();\n    }, l.rangeRound = function (t) {\n      return u = Array.from(t), c = Ar, s();\n    }, l.clamp = function (t) {\n      return arguments.length ? (f = !!t || lp, s()) : f !== lp;\n    }, l.interpolate = function (t) {\n      return arguments.length ? (c = t, s()) : c;\n    }, l.unknown = function (t) {\n      return arguments.length ? (e = t, l) : e;\n    }, function (e, r) {\n      return t = e, n = r, s();\n    };\n  }\n\n  function vp() {\n    return yp()(lp, lp);\n  }\n\n  function _p(n, e, r, i) {\n    var o,\n        a = F(n, e, r);\n\n    switch ((i = ac(null == i ? ",f" : i)).type) {\n      case "s":\n        var u = Math.max(Math.abs(n), Math.abs(e));\n        return null != i.precision || isNaN(o = vc(a, u)) || (i.precision = o), t.formatPrefix(i, u);\n\n      case "":\n      case "e":\n      case "g":\n      case "p":\n      case "r":\n        null != i.precision || isNaN(o = _c(a, Math.max(Math.abs(n), Math.abs(e)))) || (i.precision = o - ("e" === i.type));\n        break;\n\n      case "f":\n      case "%":\n        null != i.precision || isNaN(o = yc(a)) || (i.precision = o - 2 * ("%" === i.type));\n    }\n\n    return t.format(i);\n  }\n\n  function bp(t) {\n    var n = t.domain;\n    return t.ticks = function (t) {\n      var e = n();\n      return q(e[0], e[e.length - 1], null == t ? 10 : t);\n    }, t.tickFormat = function (t, e) {\n      var r = n();\n      return _p(r[0], r[r.length - 1], null == t ? 10 : t, e);\n    }, t.nice = function (e) {\n      null == e && (e = 10);\n      var r,\n          i,\n          o = n(),\n          a = 0,\n          u = o.length - 1,\n          c = o[a],\n          f = o[u],\n          s = 10;\n\n      for (f < c && (i = c, c = f, f = i, i = a, a = u, u = i); s-- > 0;) {\n        if ((i = R(c, f, e)) === r) return o[a] = c, o[u] = f, n(o);\n        if (i > 0) c = Math.floor(c / i) * i, f = Math.ceil(f / i) * i;else {\n          if (!(i < 0)) break;\n          c = Math.ceil(c * i) / i, f = Math.floor(f * i) / i;\n        }\n        r = i;\n      }\n\n      return t;\n    }, t;\n  }\n\n  function mp(t, n) {\n    var e,\n        r = 0,\n        i = (t = t.slice()).length - 1,\n        o = t[r],\n        a = t[i];\n    return a < o && (e = r, r = i, i = e, e = o, o = a, a = e), t[r] = n.floor(o), t[i] = n.ceil(a), t;\n  }\n\n  function xp(t) {\n    return Math.log(t);\n  }\n\n  function wp(t) {\n    return Math.exp(t);\n  }\n\n  function Mp(t) {\n    return -Math.log(-t);\n  }\n\n  function Ap(t) {\n    return -Math.exp(-t);\n  }\n\n  function Tp(t) {\n    return isFinite(t) ? +("1e" + t) : t < 0 ? 0 : t;\n  }\n\n  function Sp(t) {\n    return function (n) {\n      return -t(-n);\n    };\n  }\n\n  function Ep(n) {\n    var e,\n        r,\n        i = n(xp, wp),\n        o = i.domain,\n        a = 10;\n\n    function u() {\n      return e = function (t) {\n        return t === Math.E ? Math.log : 10 === t && Math.log10 || 2 === t && Math.log2 || (t = Math.log(t), function (n) {\n          return Math.log(n) / t;\n        });\n      }(a), r = function (t) {\n        return 10 === t ? Tp : t === Math.E ? Math.exp : function (n) {\n          return Math.pow(t, n);\n        };\n      }(a), o()[0] < 0 ? (e = Sp(e), r = Sp(r), n(Mp, Ap)) : n(xp, wp), i;\n    }\n\n    return i.base = function (t) {\n      return arguments.length ? (a = +t, u()) : a;\n    }, i.domain = function (t) {\n      return arguments.length ? (o(t), u()) : o();\n    }, i.ticks = function (t) {\n      var n,\n          i = o(),\n          u = i[0],\n          c = i[i.length - 1];\n      (n = c < u) && (h = u, u = c, c = h);\n      var f,\n          s,\n          l,\n          h = e(u),\n          d = e(c),\n          p = null == t ? 10 : +t,\n          g = [];\n\n      if (!(a % 1) && d - h < p) {\n        if (h = Math.floor(h), d = Math.ceil(d), u > 0) {\n          for (; h <= d; ++h) {\n            for (s = 1, f = r(h); s < a; ++s) {\n              if (!((l = f * s) < u)) {\n                if (l > c) break;\n                g.push(l);\n              }\n            }\n          }\n        } else for (; h <= d; ++h) {\n          for (s = a - 1, f = r(h); s >= 1; --s) {\n            if (!((l = f * s) < u)) {\n              if (l > c) break;\n              g.push(l);\n            }\n          }\n        }\n\n        2 * g.length < p && (g = q(u, c, p));\n      } else g = q(h, d, Math.min(d - h, p)).map(r);\n\n      return n ? g.reverse() : g;\n    }, i.tickFormat = function (n, o) {\n      if (null == o && (o = 10 === a ? ".0e" : ","), "function" != typeof o && (o = t.format(o)), n === 1 / 0) return o;\n      null == n && (n = 10);\n      var u = Math.max(1, a * n / i.ticks().length);\n      return function (t) {\n        var n = t / r(Math.round(e(t)));\n        return n * a < a - .5 && (n *= a), n <= u ? o(t) : "";\n      };\n    }, i.nice = function () {\n      return o(mp(o(), {\n        floor: function floor(t) {\n          return r(Math.floor(e(t)));\n        },\n        ceil: function ceil(t) {\n          return r(Math.ceil(e(t)));\n        }\n      }));\n    }, i;\n  }\n\n  function kp(t) {\n    return function (n) {\n      return Math.sign(n) * Math.log1p(Math.abs(n / t));\n    };\n  }\n\n  function Np(t) {\n    return function (n) {\n      return Math.sign(n) * Math.expm1(Math.abs(n)) * t;\n    };\n  }\n\n  function Cp(t) {\n    var n = 1,\n        e = t(kp(n), Np(n));\n    return e.constant = function (e) {\n      return arguments.length ? t(kp(n = +e), Np(n)) : n;\n    }, bp(e);\n  }\n\n  function Pp(t) {\n    return function (n) {\n      return n < 0 ? -Math.pow(-n, t) : Math.pow(n, t);\n    };\n  }\n\n  function zp(t) {\n    return t < 0 ? -Math.sqrt(-t) : Math.sqrt(t);\n  }\n\n  function Dp(t) {\n    return t < 0 ? -t * t : t * t;\n  }\n\n  function qp(t) {\n    var n = t(lp, lp),\n        e = 1;\n\n    function r() {\n      return 1 === e ? t(lp, lp) : .5 === e ? t(zp, Dp) : t(Pp(e), Pp(1 / e));\n    }\n\n    return n.exponent = function (t) {\n      return arguments.length ? (e = +t, r()) : e;\n    }, bp(n);\n  }\n\n  function Rp() {\n    var t = qp(yp());\n    return t.copy = function () {\n      return gp(t, Rp()).exponent(t.exponent());\n    }, rp.apply(t, arguments), t;\n  }\n\n  function Fp(t) {\n    return Math.sign(t) * t * t;\n  }\n\n  function Op(t) {\n    return Math.sign(t) * Math.sqrt(Math.abs(t));\n  }\n\n  var Up = new Date(),\n      Ip = new Date();\n\n  function Bp(t, n, e, r) {\n    function i(n) {\n      return t(n = 0 === arguments.length ? new Date() : new Date(+n)), n;\n    }\n\n    return i.floor = function (n) {\n      return t(n = new Date(+n)), n;\n    }, i.ceil = function (e) {\n      return t(e = new Date(e - 1)), n(e, 1), t(e), e;\n    }, i.round = function (t) {\n      var n = i(t),\n          e = i.ceil(t);\n      return t - n < e - t ? n : e;\n    }, i.offset = function (t, e) {\n      return n(t = new Date(+t), null == e ? 1 : Math.floor(e)), t;\n    }, i.range = function (e, r, o) {\n      var a,\n          u = [];\n      if (e = i.ceil(e), o = null == o ? 1 : Math.floor(o), !(e < r && o > 0)) return u;\n\n      do {\n        u.push(a = new Date(+e)), n(e, o), t(e);\n      } while (a < e && e < r);\n\n      return u;\n    }, i.filter = function (e) {\n      return Bp(function (n) {\n        if (n >= n) for (; t(n), !e(n);) {\n          n.setTime(n - 1);\n        }\n      }, function (t, r) {\n        if (t >= t) if (r < 0) for (; ++r <= 0;) {\n          for (; n(t, -1), !e(t);) {\n            ;\n          }\n        } else for (; --r >= 0;) {\n          for (; n(t, 1), !e(t);) {\n            ;\n          }\n        }\n      });\n    }, e && (i.count = function (n, r) {\n      return Up.setTime(+n), Ip.setTime(+r), t(Up), t(Ip), Math.floor(e(Up, Ip));\n    }, i.every = function (t) {\n      return t = Math.floor(t), isFinite(t) && t > 0 ? t > 1 ? i.filter(r ? function (n) {\n        return r(n) % t == 0;\n      } : function (n) {\n        return i.count(0, n) % t == 0;\n      }) : i : null;\n    }), i;\n  }\n\n  var Yp = Bp(function () {}, function (t, n) {\n    t.setTime(+t + n);\n  }, function (t, n) {\n    return n - t;\n  });\n\n  Yp.every = function (t) {\n    return t = Math.floor(t), isFinite(t) && t > 0 ? t > 1 ? Bp(function (n) {\n      n.setTime(Math.floor(n / t) * t);\n    }, function (n, e) {\n      n.setTime(+n + e * t);\n    }, function (n, e) {\n      return (e - n) / t;\n    }) : Yp : null;\n  };\n\n  var Lp = Yp.range,\n      jp = 1e3,\n      Hp = 6e4,\n      Xp = 36e5,\n      Gp = 864e5,\n      Vp = 6048e5,\n      $p = Bp(function (t) {\n    t.setTime(t - t.getMilliseconds());\n  }, function (t, n) {\n    t.setTime(+t + n * jp);\n  }, function (t, n) {\n    return (n - t) / jp;\n  }, function (t) {\n    return t.getUTCSeconds();\n  }),\n      Wp = $p.range,\n      Zp = Bp(function (t) {\n    t.setTime(t - t.getMilliseconds() - t.getSeconds() * jp);\n  }, function (t, n) {\n    t.setTime(+t + n * Hp);\n  }, function (t, n) {\n    return (n - t) / Hp;\n  }, function (t) {\n    return t.getMinutes();\n  }),\n      Kp = Zp.range,\n      Qp = Bp(function (t) {\n    t.setTime(t - t.getMilliseconds() - t.getSeconds() * jp - t.getMinutes() * Hp);\n  }, function (t, n) {\n    t.setTime(+t + n * Xp);\n  }, function (t, n) {\n    return (n - t) / Xp;\n  }, function (t) {\n    return t.getHours();\n  }),\n      Jp = Qp.range,\n      tg = Bp(function (t) {\n    return t.setHours(0, 0, 0, 0);\n  }, function (t, n) {\n    return t.setDate(t.getDate() + n);\n  }, function (t, n) {\n    return (n - t - (n.getTimezoneOffset() - t.getTimezoneOffset()) * Hp) / Gp;\n  }, function (t) {\n    return t.getDate() - 1;\n  }),\n      ng = tg.range;\n\n  function eg(t) {\n    return Bp(function (n) {\n      n.setDate(n.getDate() - (n.getDay() + 7 - t) % 7), n.setHours(0, 0, 0, 0);\n    }, function (t, n) {\n      t.setDate(t.getDate() + 7 * n);\n    }, function (t, n) {\n      return (n - t - (n.getTimezoneOffset() - t.getTimezoneOffset()) * Hp) / Vp;\n    });\n  }\n\n  var rg = eg(0),\n      ig = eg(1),\n      og = eg(2),\n      ag = eg(3),\n      ug = eg(4),\n      cg = eg(5),\n      fg = eg(6),\n      sg = rg.range,\n      lg = ig.range,\n      hg = og.range,\n      dg = ag.range,\n      pg = ug.range,\n      gg = cg.range,\n      yg = fg.range,\n      vg = Bp(function (t) {\n    t.setDate(1), t.setHours(0, 0, 0, 0);\n  }, function (t, n) {\n    t.setMonth(t.getMonth() + n);\n  }, function (t, n) {\n    return n.getMonth() - t.getMonth() + 12 * (n.getFullYear() - t.getFullYear());\n  }, function (t) {\n    return t.getMonth();\n  }),\n      _g = vg.range,\n      bg = Bp(function (t) {\n    t.setMonth(0, 1), t.setHours(0, 0, 0, 0);\n  }, function (t, n) {\n    t.setFullYear(t.getFullYear() + n);\n  }, function (t, n) {\n    return n.getFullYear() - t.getFullYear();\n  }, function (t) {\n    return t.getFullYear();\n  });\n\n  bg.every = function (t) {\n    return isFinite(t = Math.floor(t)) && t > 0 ? Bp(function (n) {\n      n.setFullYear(Math.floor(n.getFullYear() / t) * t), n.setMonth(0, 1), n.setHours(0, 0, 0, 0);\n    }, function (n, e) {\n      n.setFullYear(n.getFullYear() + e * t);\n    }) : null;\n  };\n\n  var mg = bg.range,\n      xg = Bp(function (t) {\n    t.setUTCSeconds(0, 0);\n  }, function (t, n) {\n    t.setTime(+t + n * Hp);\n  }, function (t, n) {\n    return (n - t) / Hp;\n  }, function (t) {\n    return t.getUTCMinutes();\n  }),\n      wg = xg.range,\n      Mg = Bp(function (t) {\n    t.setUTCMinutes(0, 0, 0);\n  }, function (t, n) {\n    t.setTime(+t + n * Xp);\n  }, function (t, n) {\n    return (n - t) / Xp;\n  }, function (t) {\n    return t.getUTCHours();\n  }),\n      Ag = Mg.range,\n      Tg = Bp(function (t) {\n    t.setUTCHours(0, 0, 0, 0);\n  }, function (t, n) {\n    t.setUTCDate(t.getUTCDate() + n);\n  }, function (t, n) {\n    return (n - t) / Gp;\n  }, function (t) {\n    return t.getUTCDate() - 1;\n  }),\n      Sg = Tg.range;\n\n  function Eg(t) {\n    return Bp(function (n) {\n      n.setUTCDate(n.getUTCDate() - (n.getUTCDay() + 7 - t) % 7), n.setUTCHours(0, 0, 0, 0);\n    }, function (t, n) {\n      t.setUTCDate(t.getUTCDate() + 7 * n);\n    }, function (t, n) {\n      return (n - t) / Vp;\n    });\n  }\n\n  var kg = Eg(0),\n      Ng = Eg(1),\n      Cg = Eg(2),\n      Pg = Eg(3),\n      zg = Eg(4),\n      Dg = Eg(5),\n      qg = Eg(6),\n      Rg = kg.range,\n      Fg = Ng.range,\n      Og = Cg.range,\n      Ug = Pg.range,\n      Ig = zg.range,\n      Bg = Dg.range,\n      Yg = qg.range,\n      Lg = Bp(function (t) {\n    t.setUTCDate(1), t.setUTCHours(0, 0, 0, 0);\n  }, function (t, n) {\n    t.setUTCMonth(t.getUTCMonth() + n);\n  }, function (t, n) {\n    return n.getUTCMonth() - t.getUTCMonth() + 12 * (n.getUTCFullYear() - t.getUTCFullYear());\n  }, function (t) {\n    return t.getUTCMonth();\n  }),\n      jg = Lg.range,\n      Hg = Bp(function (t) {\n    t.setUTCMonth(0, 1), t.setUTCHours(0, 0, 0, 0);\n  }, function (t, n) {\n    t.setUTCFullYear(t.getUTCFullYear() + n);\n  }, function (t, n) {\n    return n.getUTCFullYear() - t.getUTCFullYear();\n  }, function (t) {\n    return t.getUTCFullYear();\n  });\n\n  Hg.every = function (t) {\n    return isFinite(t = Math.floor(t)) && t > 0 ? Bp(function (n) {\n      n.setUTCFullYear(Math.floor(n.getUTCFullYear() / t) * t), n.setUTCMonth(0, 1), n.setUTCHours(0, 0, 0, 0);\n    }, function (n, e) {\n      n.setUTCFullYear(n.getUTCFullYear() + e * t);\n    }) : null;\n  };\n\n  var Xg = Hg.range;\n\n  function Gg(t) {\n    if (0 <= t.y && t.y < 100) {\n      var n = new Date(-1, t.m, t.d, t.H, t.M, t.S, t.L);\n      return n.setFullYear(t.y), n;\n    }\n\n    return new Date(t.y, t.m, t.d, t.H, t.M, t.S, t.L);\n  }\n\n  function Vg(t) {\n    if (0 <= t.y && t.y < 100) {\n      var n = new Date(Date.UTC(-1, t.m, t.d, t.H, t.M, t.S, t.L));\n      return n.setUTCFullYear(t.y), n;\n    }\n\n    return new Date(Date.UTC(t.y, t.m, t.d, t.H, t.M, t.S, t.L));\n  }\n\n  function $g(t, n, e) {\n    return {\n      y: t,\n      m: n,\n      d: e,\n      H: 0,\n      M: 0,\n      S: 0,\n      L: 0\n    };\n  }\n\n  function Wg(t) {\n    var n = t.dateTime,\n        e = t.date,\n        r = t.time,\n        i = t.periods,\n        o = t.days,\n        _a16 = t.shortDays,\n        u = t.months,\n        c = t.shortMonths,\n        f = ry(i),\n        s = iy(i),\n        l = ry(o),\n        h = iy(o),\n        d = ry(_a16),\n        p = iy(_a16),\n        g = ry(u),\n        y = iy(u),\n        v = ry(c),\n        _ = iy(c),\n        b = {\n      a: function a(t) {\n        return _a16[t.getDay()];\n      },\n      A: function A(t) {\n        return o[t.getDay()];\n      },\n      b: function b(t) {\n        return c[t.getMonth()];\n      },\n      B: function B(t) {\n        return u[t.getMonth()];\n      },\n      c: null,\n      d: Ty,\n      e: Ty,\n      f: Cy,\n      g: Yy,\n      G: jy,\n      H: Sy,\n      I: Ey,\n      j: ky,\n      L: Ny,\n      m: Py,\n      M: zy,\n      p: function p(t) {\n        return i[+(t.getHours() >= 12)];\n      },\n      q: function q(t) {\n        return 1 + ~~(t.getMonth() / 3);\n      },\n      Q: hv,\n      s: dv,\n      S: Dy,\n      u: qy,\n      U: Ry,\n      V: Oy,\n      w: Uy,\n      W: Iy,\n      x: null,\n      X: null,\n      y: By,\n      Y: Ly,\n      Z: Hy,\n      "%": lv\n    },\n        m = {\n      a: function a(t) {\n        return _a16[t.getUTCDay()];\n      },\n      A: function A(t) {\n        return o[t.getUTCDay()];\n      },\n      b: function b(t) {\n        return c[t.getUTCMonth()];\n      },\n      B: function B(t) {\n        return u[t.getUTCMonth()];\n      },\n      c: null,\n      d: Xy,\n      e: Xy,\n      f: Zy,\n      g: uv,\n      G: fv,\n      H: Gy,\n      I: Vy,\n      j: $y,\n      L: Wy,\n      m: Ky,\n      M: Qy,\n      p: function p(t) {\n        return i[+(t.getUTCHours() >= 12)];\n      },\n      q: function q(t) {\n        return 1 + ~~(t.getUTCMonth() / 3);\n      },\n      Q: hv,\n      s: dv,\n      S: Jy,\n      u: tv,\n      U: nv,\n      V: rv,\n      w: iv,\n      W: ov,\n      x: null,\n      X: null,\n      y: av,\n      Y: cv,\n      Z: sv,\n      "%": lv\n    },\n        x = {\n      a: function a(t, n, e) {\n        var r = d.exec(n.slice(e));\n        return r ? (t.w = p.get(r[0].toLowerCase()), e + r[0].length) : -1;\n      },\n      A: function A(t, n, e) {\n        var r = l.exec(n.slice(e));\n        return r ? (t.w = h.get(r[0].toLowerCase()), e + r[0].length) : -1;\n      },\n      b: function b(t, n, e) {\n        var r = v.exec(n.slice(e));\n        return r ? (t.m = _.get(r[0].toLowerCase()), e + r[0].length) : -1;\n      },\n      B: function B(t, n, e) {\n        var r = g.exec(n.slice(e));\n        return r ? (t.m = y.get(r[0].toLowerCase()), e + r[0].length) : -1;\n      },\n      c: function c(t, e, r) {\n        return A(t, n, e, r);\n      },\n      d: gy,\n      e: gy,\n      f: xy,\n      g: ly,\n      G: sy,\n      H: vy,\n      I: vy,\n      j: yy,\n      L: my,\n      m: py,\n      M: _y,\n      p: function p(t, n, e) {\n        var r = f.exec(n.slice(e));\n        return r ? (t.p = s.get(r[0].toLowerCase()), e + r[0].length) : -1;\n      },\n      q: dy,\n      Q: My,\n      s: Ay,\n      S: by,\n      u: ay,\n      U: uy,\n      V: cy,\n      w: oy,\n      W: fy,\n      x: function x(t, n, r) {\n        return A(t, e, n, r);\n      },\n      X: function X(t, n, e) {\n        return A(t, r, n, e);\n      },\n      y: ly,\n      Y: sy,\n      Z: hy,\n      "%": wy\n    };\n\n    function w(t, n) {\n      return function (e) {\n        var r,\n            i,\n            o,\n            a = [],\n            u = -1,\n            c = 0,\n            f = t.length;\n\n        for (e instanceof Date || (e = new Date(+e)); ++u < f;) {\n          37 === t.charCodeAt(u) && (a.push(t.slice(c, u)), null != (i = Kg[r = t.charAt(++u)]) ? r = t.charAt(++u) : i = "e" === r ? " " : "0", (o = n[r]) && (r = o(e, i)), a.push(r), c = u + 1);\n        }\n\n        return a.push(t.slice(c, u)), a.join("");\n      };\n    }\n\n    function M(t, n) {\n      return function (e) {\n        var r,\n            i,\n            o = $g(1900, void 0, 1);\n        if (A(o, t, e += "", 0) != e.length) return null;\n        if ("Q" in o) return new Date(o.Q);\n        if ("s" in o) return new Date(1e3 * o.s + ("L" in o ? o.L : 0));\n\n        if (n && !("Z" in o) && (o.Z = 0), "p" in o && (o.H = o.H % 12 + 12 * o.p), void 0 === o.m && (o.m = "q" in o ? o.q : 0), "V" in o) {\n          if (o.V < 1 || o.V > 53) return null;\n          "w" in o || (o.w = 1), "Z" in o ? (i = (r = Vg($g(o.y, 0, 1))).getUTCDay(), r = i > 4 || 0 === i ? Ng.ceil(r) : Ng(r), r = Tg.offset(r, 7 * (o.V - 1)), o.y = r.getUTCFullYear(), o.m = r.getUTCMonth(), o.d = r.getUTCDate() + (o.w + 6) % 7) : (i = (r = Gg($g(o.y, 0, 1))).getDay(), r = i > 4 || 0 === i ? ig.ceil(r) : ig(r), r = tg.offset(r, 7 * (o.V - 1)), o.y = r.getFullYear(), o.m = r.getMonth(), o.d = r.getDate() + (o.w + 6) % 7);\n        } else ("W" in o || "U" in o) && ("w" in o || (o.w = "u" in o ? o.u % 7 : "W" in o ? 1 : 0), i = "Z" in o ? Vg($g(o.y, 0, 1)).getUTCDay() : Gg($g(o.y, 0, 1)).getDay(), o.m = 0, o.d = "W" in o ? (o.w + 6) % 7 + 7 * o.W - (i + 5) % 7 : o.w + 7 * o.U - (i + 6) % 7);\n\n        return "Z" in o ? (o.H += o.Z / 100 | 0, o.M += o.Z % 100, Vg(o)) : Gg(o);\n      };\n    }\n\n    function A(t, n, e, r) {\n      for (var i, o, a = 0, u = n.length, c = e.length; a < u;) {\n        if (r >= c) return -1;\n\n        if (37 === (i = n.charCodeAt(a++))) {\n          if (i = n.charAt(a++), !(o = x[i in Kg ? n.charAt(a++) : i]) || (r = o(t, e, r)) < 0) return -1;\n        } else if (i != e.charCodeAt(r++)) return -1;\n      }\n\n      return r;\n    }\n\n    return b.x = w(e, b), b.X = w(r, b), b.c = w(n, b), m.x = w(e, m), m.X = w(r, m), m.c = w(n, m), {\n      format: function format(t) {\n        var n = w(t += "", b);\n        return n.toString = function () {\n          return t;\n        }, n;\n      },\n      parse: function parse(t) {\n        var n = M(t += "", !1);\n        return n.toString = function () {\n          return t;\n        }, n;\n      },\n      utcFormat: function utcFormat(t) {\n        var n = w(t += "", m);\n        return n.toString = function () {\n          return t;\n        }, n;\n      },\n      utcParse: function utcParse(t) {\n        var n = M(t += "", !0);\n        return n.toString = function () {\n          return t;\n        }, n;\n      }\n    };\n  }\n\n  var Zg,\n      Kg = {\n    "-": "",\n    _: " ",\n    0: "0"\n  },\n      Qg = /^\\s*\\d+/,\n      Jg = /^%/,\n      ty = /[\\\\^$*+?|[\\]().{}]/g;\n\n  function ny(t, n, e) {\n    var r = t < 0 ? "-" : "",\n        i = (r ? -t : t) + "",\n        o = i.length;\n    return r + (o < e ? new Array(e - o + 1).join(n) + i : i);\n  }\n\n  function ey(t) {\n    return t.replace(ty, "\\\\$&");\n  }\n\n  function ry(t) {\n    return new RegExp("^(?:" + t.map(ey).join("|") + ")", "i");\n  }\n\n  function iy(t) {\n    return new Map(t.map(function (t, n) {\n      return [t.toLowerCase(), n];\n    }));\n  }\n\n  function oy(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 1));\n    return r ? (t.w = +r[0], e + r[0].length) : -1;\n  }\n\n  function ay(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 1));\n    return r ? (t.u = +r[0], e + r[0].length) : -1;\n  }\n\n  function uy(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 2));\n    return r ? (t.U = +r[0], e + r[0].length) : -1;\n  }\n\n  function cy(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 2));\n    return r ? (t.V = +r[0], e + r[0].length) : -1;\n  }\n\n  function fy(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 2));\n    return r ? (t.W = +r[0], e + r[0].length) : -1;\n  }\n\n  function sy(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 4));\n    return r ? (t.y = +r[0], e + r[0].length) : -1;\n  }\n\n  function ly(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 2));\n    return r ? (t.y = +r[0] + (+r[0] > 68 ? 1900 : 2e3), e + r[0].length) : -1;\n  }\n\n  function hy(t, n, e) {\n    var r = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(n.slice(e, e + 6));\n    return r ? (t.Z = r[1] ? 0 : -(r[2] + (r[3] || "00")), e + r[0].length) : -1;\n  }\n\n  function dy(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 1));\n    return r ? (t.q = 3 * r[0] - 3, e + r[0].length) : -1;\n  }\n\n  function py(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 2));\n    return r ? (t.m = r[0] - 1, e + r[0].length) : -1;\n  }\n\n  function gy(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 2));\n    return r ? (t.d = +r[0], e + r[0].length) : -1;\n  }\n\n  function yy(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 3));\n    return r ? (t.m = 0, t.d = +r[0], e + r[0].length) : -1;\n  }\n\n  function vy(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 2));\n    return r ? (t.H = +r[0], e + r[0].length) : -1;\n  }\n\n  function _y(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 2));\n    return r ? (t.M = +r[0], e + r[0].length) : -1;\n  }\n\n  function by(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 2));\n    return r ? (t.S = +r[0], e + r[0].length) : -1;\n  }\n\n  function my(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 3));\n    return r ? (t.L = +r[0], e + r[0].length) : -1;\n  }\n\n  function xy(t, n, e) {\n    var r = Qg.exec(n.slice(e, e + 6));\n    return r ? (t.L = Math.floor(r[0] / 1e3), e + r[0].length) : -1;\n  }\n\n  function wy(t, n, e) {\n    var r = Jg.exec(n.slice(e, e + 1));\n    return r ? e + r[0].length : -1;\n  }\n\n  function My(t, n, e) {\n    var r = Qg.exec(n.slice(e));\n    return r ? (t.Q = +r[0], e + r[0].length) : -1;\n  }\n\n  function Ay(t, n, e) {\n    var r = Qg.exec(n.slice(e));\n    return r ? (t.s = +r[0], e + r[0].length) : -1;\n  }\n\n  function Ty(t, n) {\n    return ny(t.getDate(), n, 2);\n  }\n\n  function Sy(t, n) {\n    return ny(t.getHours(), n, 2);\n  }\n\n  function Ey(t, n) {\n    return ny(t.getHours() % 12 || 12, n, 2);\n  }\n\n  function ky(t, n) {\n    return ny(1 + tg.count(bg(t), t), n, 3);\n  }\n\n  function Ny(t, n) {\n    return ny(t.getMilliseconds(), n, 3);\n  }\n\n  function Cy(t, n) {\n    return Ny(t, n) + "000";\n  }\n\n  function Py(t, n) {\n    return ny(t.getMonth() + 1, n, 2);\n  }\n\n  function zy(t, n) {\n    return ny(t.getMinutes(), n, 2);\n  }\n\n  function Dy(t, n) {\n    return ny(t.getSeconds(), n, 2);\n  }\n\n  function qy(t) {\n    var n = t.getDay();\n    return 0 === n ? 7 : n;\n  }\n\n  function Ry(t, n) {\n    return ny(rg.count(bg(t) - 1, t), n, 2);\n  }\n\n  function Fy(t) {\n    var n = t.getDay();\n    return n >= 4 || 0 === n ? ug(t) : ug.ceil(t);\n  }\n\n  function Oy(t, n) {\n    return t = Fy(t), ny(ug.count(bg(t), t) + (4 === bg(t).getDay()), n, 2);\n  }\n\n  function Uy(t) {\n    return t.getDay();\n  }\n\n  function Iy(t, n) {\n    return ny(ig.count(bg(t) - 1, t), n, 2);\n  }\n\n  function By(t, n) {\n    return ny(t.getFullYear() % 100, n, 2);\n  }\n\n  function Yy(t, n) {\n    return ny((t = Fy(t)).getFullYear() % 100, n, 2);\n  }\n\n  function Ly(t, n) {\n    return ny(t.getFullYear() % 1e4, n, 4);\n  }\n\n  function jy(t, n) {\n    var e = t.getDay();\n    return ny((t = e >= 4 || 0 === e ? ug(t) : ug.ceil(t)).getFullYear() % 1e4, n, 4);\n  }\n\n  function Hy(t) {\n    var n = t.getTimezoneOffset();\n    return (n > 0 ? "-" : (n *= -1, "+")) + ny(n / 60 | 0, "0", 2) + ny(n % 60, "0", 2);\n  }\n\n  function Xy(t, n) {\n    return ny(t.getUTCDate(), n, 2);\n  }\n\n  function Gy(t, n) {\n    return ny(t.getUTCHours(), n, 2);\n  }\n\n  function Vy(t, n) {\n    return ny(t.getUTCHours() % 12 || 12, n, 2);\n  }\n\n  function $y(t, n) {\n    return ny(1 + Tg.count(Hg(t), t), n, 3);\n  }\n\n  function Wy(t, n) {\n    return ny(t.getUTCMilliseconds(), n, 3);\n  }\n\n  function Zy(t, n) {\n    return Wy(t, n) + "000";\n  }\n\n  function Ky(t, n) {\n    return ny(t.getUTCMonth() + 1, n, 2);\n  }\n\n  function Qy(t, n) {\n    return ny(t.getUTCMinutes(), n, 2);\n  }\n\n  function Jy(t, n) {\n    return ny(t.getUTCSeconds(), n, 2);\n  }\n\n  function tv(t) {\n    var n = t.getUTCDay();\n    return 0 === n ? 7 : n;\n  }\n\n  function nv(t, n) {\n    return ny(kg.count(Hg(t) - 1, t), n, 2);\n  }\n\n  function ev(t) {\n    var n = t.getUTCDay();\n    return n >= 4 || 0 === n ? zg(t) : zg.ceil(t);\n  }\n\n  function rv(t, n) {\n    return t = ev(t), ny(zg.count(Hg(t), t) + (4 === Hg(t).getUTCDay()), n, 2);\n  }\n\n  function iv(t) {\n    return t.getUTCDay();\n  }\n\n  function ov(t, n) {\n    return ny(Ng.count(Hg(t) - 1, t), n, 2);\n  }\n\n  function av(t, n) {\n    return ny(t.getUTCFullYear() % 100, n, 2);\n  }\n\n  function uv(t, n) {\n    return ny((t = ev(t)).getUTCFullYear() % 100, n, 2);\n  }\n\n  function cv(t, n) {\n    return ny(t.getUTCFullYear() % 1e4, n, 4);\n  }\n\n  function fv(t, n) {\n    var e = t.getUTCDay();\n    return ny((t = e >= 4 || 0 === e ? zg(t) : zg.ceil(t)).getUTCFullYear() % 1e4, n, 4);\n  }\n\n  function sv() {\n    return "+0000";\n  }\n\n  function lv() {\n    return "%";\n  }\n\n  function hv(t) {\n    return +t;\n  }\n\n  function dv(t) {\n    return Math.floor(+t / 1e3);\n  }\n\n  function pv(n) {\n    return Zg = Wg(n), t.timeFormat = Zg.format, t.timeParse = Zg.parse, t.utcFormat = Zg.utcFormat, t.utcParse = Zg.utcParse, Zg;\n  }\n\n  t.timeFormat = void 0, t.timeParse = void 0, t.utcFormat = void 0, t.utcParse = void 0, pv({\n    dateTime: "%x, %X",\n    date: "%-m/%-d/%Y",\n    time: "%-I:%M:%S %p",\n    periods: ["AM", "PM"],\n    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],\n    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],\n    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],\n    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]\n  });\n  var gv = "%Y-%m-%dT%H:%M:%S.%LZ";\n  var yv = Date.prototype.toISOString ? function (t) {\n    return t.toISOString();\n  } : t.utcFormat(gv);\n  var vv = +new Date("2000-01-01T00:00:00.000Z") ? function (t) {\n    var n = new Date(t);\n    return isNaN(n) ? null : n;\n  } : t.utcParse(gv),\n      _v = 1e3,\n      bv = 6e4,\n      mv = 36e5,\n      xv = 864e5,\n      wv = 2592e6,\n      Mv = 31536e6;\n\n  function Av(t) {\n    return new Date(t);\n  }\n\n  function Tv(t) {\n    return t instanceof Date ? +t : +new Date(+t);\n  }\n\n  function Sv(t, n, r, i, o, a, u, c, f) {\n    var s = vp(),\n        l = s.invert,\n        h = s.domain,\n        d = f(".%L"),\n        p = f(":%S"),\n        g = f("%I:%M"),\n        y = f("%I %p"),\n        v = f("%a %d"),\n        _ = f("%b %d"),\n        b = f("%B"),\n        m = f("%Y"),\n        x = [[u, 1, _v], [u, 5, 5e3], [u, 15, 15e3], [u, 30, 3e4], [a, 1, bv], [a, 5, 3e5], [a, 15, 9e5], [a, 30, 18e5], [o, 1, mv], [o, 3, 108e5], [o, 6, 216e5], [o, 12, 432e5], [i, 1, xv], [i, 2, 1728e5], [r, 1, 6048e5], [n, 1, wv], [n, 3, 7776e6], [t, 1, Mv]];\n\n    function w(e) {\n      return (u(e) < e ? d : a(e) < e ? p : o(e) < e ? g : i(e) < e ? y : n(e) < e ? r(e) < e ? v : _ : t(e) < e ? b : m)(e);\n    }\n\n    function M(n, r, i) {\n      if (null == n && (n = 10), "number" == typeof n) {\n        var o,\n            a = Math.abs(i - r) / n,\n            u = e(function (t) {\n          return t[2];\n        }).right(x, a);\n        return u === x.length ? (o = F(r / Mv, i / Mv, n), n = t) : u ? (o = (u = x[a / x[u - 1][2] < x[u][2] / a ? u - 1 : u])[1], n = u[0]) : (o = Math.max(F(r, i, n), 1), n = c), n.every(o);\n      }\n\n      return n;\n    }\n\n    return s.invert = function (t) {\n      return new Date(l(t));\n    }, s.domain = function (t) {\n      return arguments.length ? h(Array.from(t, Tv)) : h().map(Av);\n    }, s.ticks = function (t) {\n      var n,\n          e = h(),\n          r = e[0],\n          i = e[e.length - 1],\n          o = i < r;\n      return o && (n = r, r = i, i = n), n = (n = M(t, r, i)) ? n.range(r, i + 1) : [], o ? n.reverse() : n;\n    }, s.tickFormat = function (t, n) {\n      return null == n ? w : f(n);\n    }, s.nice = function (t) {\n      var n = h();\n      return (t = M(t, n[0], n[n.length - 1])) ? h(mp(n, t)) : s;\n    }, s.copy = function () {\n      return gp(s, Sv(t, n, r, i, o, a, u, c, f));\n    }, s;\n  }\n\n  function Ev() {\n    var t,\n        n,\n        e,\n        r,\n        i,\n        o = 0,\n        a = 1,\n        u = lp,\n        c = !1;\n\n    function f(n) {\n      return isNaN(n = +n) ? i : u(0 === e ? .5 : (n = (r(n) - t) * e, c ? Math.max(0, Math.min(1, n)) : n));\n    }\n\n    function s(t) {\n      return function (n) {\n        var _n55, _n56;\n\n        var e, r;\n        return arguments.length ? ((_n55 = n, _n56 = _slicedToArray(_n55, 2), e = _n56[0], r = _n56[1], _n55), u = t(e, r), f) : [u(0), u(1)];\n      };\n    }\n\n    return f.domain = function (i) {\n      var _i23, _i24;\n\n      return arguments.length ? ((_i23 = i, _i24 = _slicedToArray(_i23, 2), o = _i24[0], a = _i24[1], _i23), t = r(o = +o), n = r(a = +a), e = t === n ? 0 : 1 / (n - t), f) : [o, a];\n    }, f.clamp = function (t) {\n      return arguments.length ? (c = !!t, f) : c;\n    }, f.interpolator = function (t) {\n      return arguments.length ? (u = t, f) : u;\n    }, f.range = s(Mr), f.rangeRound = s(Ar), f.unknown = function (t) {\n      return arguments.length ? (i = t, f) : i;\n    }, function (i) {\n      return r = i, t = i(o), n = i(a), e = t === n ? 0 : 1 / (n - t), f;\n    };\n  }\n\n  function kv(t, n) {\n    return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown());\n  }\n\n  function Nv() {\n    var t = qp(Ev());\n    return t.copy = function () {\n      return kv(t, Nv()).exponent(t.exponent());\n    }, ip.apply(t, arguments);\n  }\n\n  function Cv() {\n    var t,\n        n,\n        e,\n        r,\n        i,\n        o,\n        a,\n        u = 0,\n        c = .5,\n        f = 1,\n        s = 1,\n        l = lp,\n        h = !1;\n\n    function d(t) {\n      return isNaN(t = +t) ? a : (t = .5 + ((t = +o(t)) - n) * (s * t < s * n ? r : i), l(h ? Math.max(0, Math.min(1, t)) : t));\n    }\n\n    function p(t) {\n      return function (n) {\n        var _n57, _n58;\n\n        var e, r, i;\n        return arguments.length ? ((_n57 = n, _n58 = _slicedToArray(_n57, 3), e = _n58[0], r = _n58[1], i = _n58[2], _n57), l = jr(t, [e, r, i]), d) : [l(0), l(.5), l(1)];\n      };\n    }\n\n    return d.domain = function (a) {\n      var _a17, _a18;\n\n      return arguments.length ? ((_a17 = a, _a18 = _slicedToArray(_a17, 3), u = _a18[0], c = _a18[1], f = _a18[2], _a17), t = o(u = +u), n = o(c = +c), e = o(f = +f), r = t === n ? 0 : .5 / (n - t), i = n === e ? 0 : .5 / (e - n), s = n < t ? -1 : 1, d) : [u, c, f];\n    }, d.clamp = function (t) {\n      return arguments.length ? (h = !!t, d) : h;\n    }, d.interpolator = function (t) {\n      return arguments.length ? (l = t, d) : l;\n    }, d.range = p(Mr), d.rangeRound = p(Ar), d.unknown = function (t) {\n      return arguments.length ? (a = t, d) : a;\n    }, function (a) {\n      return o = a, t = a(u), n = a(c), e = a(f), r = t === n ? 0 : .5 / (n - t), i = n === e ? 0 : .5 / (e - n), s = n < t ? -1 : 1, d;\n    };\n  }\n\n  function Pv() {\n    var t = qp(Cv());\n    return t.copy = function () {\n      return kv(t, Pv()).exponent(t.exponent());\n    }, ip.apply(t, arguments);\n  }\n\n  function zv(t) {\n    for (var n = t.length / 6 | 0, e = new Array(n), r = 0; r < n;) {\n      e[r] = "#" + t.slice(6 * r, 6 * ++r);\n    }\n\n    return e;\n  }\n\n  var Dv = zv("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),\n      qv = zv("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),\n      Rv = zv("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),\n      Fv = zv("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),\n      Ov = zv("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),\n      Uv = zv("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),\n      Iv = zv("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),\n      Bv = zv("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),\n      Yv = zv("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),\n      Lv = zv("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),\n      jv = function jv(t) {\n    return hr(t[t.length - 1]);\n  },\n      Hv = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(zv),\n      Xv = jv(Hv),\n      Gv = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(zv),\n      Vv = jv(Gv),\n      $v = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(zv),\n      Wv = jv($v),\n      Zv = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(zv),\n      Kv = jv(Zv),\n      Qv = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(zv),\n      Jv = jv(Qv),\n      t_ = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(zv),\n      n_ = jv(t_),\n      e_ = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(zv),\n      r_ = jv(e_),\n      i_ = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(zv),\n      o_ = jv(i_),\n      a_ = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(zv),\n      u_ = jv(a_),\n      c_ = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(zv),\n      f_ = jv(c_),\n      s_ = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(zv),\n      l_ = jv(s_),\n      h_ = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(zv),\n      d_ = jv(h_),\n      p_ = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(zv),\n      g_ = jv(p_),\n      y_ = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(zv),\n      v_ = jv(y_),\n      __ = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(zv),\n      b_ = jv(__),\n      m_ = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(zv),\n      x_ = jv(m_),\n      w_ = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(zv),\n      M_ = jv(w_),\n      A_ = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(zv),\n      T_ = jv(A_),\n      S_ = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(zv),\n      E_ = jv(S_),\n      k_ = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(zv),\n      N_ = jv(k_),\n      C_ = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(zv),\n      P_ = jv(C_),\n      z_ = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(zv),\n      D_ = jv(z_),\n      q_ = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(zv),\n      R_ = jv(q_),\n      F_ = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(zv),\n      O_ = jv(F_),\n      U_ = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(zv),\n      I_ = jv(U_),\n      B_ = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(zv),\n      Y_ = jv(B_),\n      L_ = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(zv),\n      j_ = jv(L_);\n\n  var H_ = Lr(tr(300, .5, 0), tr(-240, .5, 1)),\n      X_ = Lr(tr(-100, .75, .35), tr(80, 1.5, .8)),\n      G_ = Lr(tr(260, .75, .35), tr(80, 1.5, .8)),\n      V_ = tr();\n  var $_ = ve(),\n      W_ = Math.PI / 3,\n      Z_ = 2 * Math.PI / 3;\n\n  function K_(t) {\n    var n = t.length;\n    return function (e) {\n      return t[Math.max(0, Math.min(n - 1, Math.floor(e * n)))];\n    };\n  }\n\n  var Q_ = K_(zv("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),\n      J_ = K_(zv("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),\n      tb = K_(zv("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),\n      nb = K_(zv("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));\n\n  function eb(t) {\n    return function () {\n      return t;\n    };\n  }\n\n  var rb = Math.abs,\n      ib = Math.atan2,\n      ob = Math.cos,\n      ab = Math.max,\n      ub = Math.min,\n      cb = Math.sin,\n      fb = Math.sqrt,\n      sb = 1e-12,\n      lb = Math.PI,\n      hb = lb / 2,\n      db = 2 * lb;\n\n  function pb(t) {\n    return t > 1 ? 0 : t < -1 ? lb : Math.acos(t);\n  }\n\n  function gb(t) {\n    return t >= 1 ? hb : t <= -1 ? -hb : Math.asin(t);\n  }\n\n  function yb(t) {\n    return t.innerRadius;\n  }\n\n  function vb(t) {\n    return t.outerRadius;\n  }\n\n  function _b(t) {\n    return t.startAngle;\n  }\n\n  function bb(t) {\n    return t.endAngle;\n  }\n\n  function mb(t) {\n    return t && t.padAngle;\n  }\n\n  function xb(t, n, e, r, i, o, a, u) {\n    var c = e - t,\n        f = r - n,\n        s = a - i,\n        l = u - o,\n        h = l * c - s * f;\n    if (!(h * h < sb)) return [t + (h = (s * (n - o) - l * (t - i)) / h) * c, n + h * f];\n  }\n\n  function wb(t, n, e, r, i, o, a) {\n    var u = t - e,\n        c = n - r,\n        f = (a ? o : -o) / fb(u * u + c * c),\n        s = f * c,\n        l = -f * u,\n        h = t + s,\n        d = n + l,\n        p = e + s,\n        g = r + l,\n        y = (h + p) / 2,\n        v = (d + g) / 2,\n        _ = p - h,\n        b = g - d,\n        m = _ * _ + b * b,\n        x = i - o,\n        w = h * g - p * d,\n        M = (b < 0 ? -1 : 1) * fb(ab(0, x * x * m - w * w)),\n        A = (w * b - _ * M) / m,\n        T = (-w * _ - b * M) / m,\n        S = (w * b + _ * M) / m,\n        E = (-w * _ + b * M) / m,\n        k = A - y,\n        N = T - v,\n        C = S - y,\n        P = E - v;\n\n    return k * k + N * N > C * C + P * P && (A = S, T = E), {\n      cx: A,\n      cy: T,\n      x01: -s,\n      y01: -l,\n      x11: A * (i / x - 1),\n      y11: T * (i / x - 1)\n    };\n  }\n\n  var Mb = Array.prototype.slice;\n\n  function Ab(t) {\n    return "object" == _typeof(t) && "length" in t ? t : Array.from(t);\n  }\n\n  function Tb(t) {\n    this._context = t;\n  }\n\n  function Sb(t) {\n    return new Tb(t);\n  }\n\n  function Eb(t) {\n    return t[0];\n  }\n\n  function kb(t) {\n    return t[1];\n  }\n\n  function Nb(t, n) {\n    var e = eb(!0),\n        r = null,\n        i = Sb,\n        o = null;\n\n    function a(a) {\n      var u,\n          c,\n          f,\n          s = (a = Ab(a)).length,\n          l = !1;\n\n      for (null == r && (o = i(f = fa())), u = 0; u <= s; ++u) {\n        !(u < s && e(c = a[u], u, a)) === l && ((l = !l) ? o.lineStart() : o.lineEnd()), l && o.point(+t(c, u, a), +n(c, u, a));\n      }\n\n      if (f) return o = null, f + "" || null;\n    }\n\n    return t = "function" == typeof t ? t : void 0 === t ? Eb : eb(t), n = "function" == typeof n ? n : void 0 === n ? kb : eb(n), a.x = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : eb(+n), a) : t;\n    }, a.y = function (t) {\n      return arguments.length ? (n = "function" == typeof t ? t : eb(+t), a) : n;\n    }, a.defined = function (t) {\n      return arguments.length ? (e = "function" == typeof t ? t : eb(!!t), a) : e;\n    }, a.curve = function (t) {\n      return arguments.length ? (i = t, null != r && (o = i(r)), a) : i;\n    }, a.context = function (t) {\n      return arguments.length ? (null == t ? r = o = null : o = i(r = t), a) : r;\n    }, a;\n  }\n\n  function Cb(t, n, e) {\n    var r = null,\n        i = eb(!0),\n        o = null,\n        a = Sb,\n        u = null;\n\n    function c(c) {\n      var f,\n          s,\n          l,\n          h,\n          d,\n          p = (c = Ab(c)).length,\n          g = !1,\n          y = new Array(p),\n          v = new Array(p);\n\n      for (null == o && (u = a(d = fa())), f = 0; f <= p; ++f) {\n        if (!(f < p && i(h = c[f], f, c)) === g) if (g = !g) s = f, u.areaStart(), u.lineStart();else {\n          for (u.lineEnd(), u.lineStart(), l = f - 1; l >= s; --l) {\n            u.point(y[l], v[l]);\n          }\n\n          u.lineEnd(), u.areaEnd();\n        }\n        g && (y[f] = +t(h, f, c), v[f] = +n(h, f, c), u.point(r ? +r(h, f, c) : y[f], e ? +e(h, f, c) : v[f]));\n      }\n\n      if (d) return u = null, d + "" || null;\n    }\n\n    function f() {\n      return Nb().defined(i).curve(a).context(o);\n    }\n\n    return t = "function" == typeof t ? t : void 0 === t ? Eb : eb(+t), n = "function" == typeof n ? n : eb(void 0 === n ? 0 : +n), e = "function" == typeof e ? e : void 0 === e ? kb : eb(+e), c.x = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : eb(+n), r = null, c) : t;\n    }, c.x0 = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : eb(+n), c) : t;\n    }, c.x1 = function (t) {\n      return arguments.length ? (r = null == t ? null : "function" == typeof t ? t : eb(+t), c) : r;\n    }, c.y = function (t) {\n      return arguments.length ? (n = "function" == typeof t ? t : eb(+t), e = null, c) : n;\n    }, c.y0 = function (t) {\n      return arguments.length ? (n = "function" == typeof t ? t : eb(+t), c) : n;\n    }, c.y1 = function (t) {\n      return arguments.length ? (e = null == t ? null : "function" == typeof t ? t : eb(+t), c) : e;\n    }, c.lineX0 = c.lineY0 = function () {\n      return f().x(t).y(n);\n    }, c.lineY1 = function () {\n      return f().x(t).y(e);\n    }, c.lineX1 = function () {\n      return f().x(r).y(n);\n    }, c.defined = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : eb(!!t), c) : i;\n    }, c.curve = function (t) {\n      return arguments.length ? (a = t, null != o && (u = a(o)), c) : a;\n    }, c.context = function (t) {\n      return arguments.length ? (null == t ? o = u = null : u = a(o = t), c) : o;\n    }, c;\n  }\n\n  function Pb(t, n) {\n    return n < t ? -1 : n > t ? 1 : n >= t ? 0 : NaN;\n  }\n\n  function zb(t) {\n    return t;\n  }\n\n  Tb.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n    },\n    point: function point(t, n) {\n      switch (t = +t, n = +n, this._point) {\n        case 0:\n          this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);\n          break;\n\n        case 1:\n          this._point = 2;\n\n        default:\n          this._context.lineTo(t, n);\n\n      }\n    }\n  };\n  var Db = Rb(Sb);\n\n  function qb(t) {\n    this._curve = t;\n  }\n\n  function Rb(t) {\n    function n(n) {\n      return new qb(t(n));\n    }\n\n    return n._curve = t, n;\n  }\n\n  function Fb(t) {\n    var n = t.curve;\n    return t.angle = t.x, delete t.x, t.radius = t.y, delete t.y, t.curve = function (t) {\n      return arguments.length ? n(Rb(t)) : n()._curve;\n    }, t;\n  }\n\n  function Ob() {\n    return Fb(Nb().curve(Db));\n  }\n\n  function Ub() {\n    var t = Cb().curve(Db),\n        n = t.curve,\n        e = t.lineX0,\n        r = t.lineX1,\n        i = t.lineY0,\n        o = t.lineY1;\n    return t.angle = t.x, delete t.x, t.startAngle = t.x0, delete t.x0, t.endAngle = t.x1, delete t.x1, t.radius = t.y, delete t.y, t.innerRadius = t.y0, delete t.y0, t.outerRadius = t.y1, delete t.y1, t.lineStartAngle = function () {\n      return Fb(e());\n    }, delete t.lineX0, t.lineEndAngle = function () {\n      return Fb(r());\n    }, delete t.lineX1, t.lineInnerRadius = function () {\n      return Fb(i());\n    }, delete t.lineY0, t.lineOuterRadius = function () {\n      return Fb(o());\n    }, delete t.lineY1, t.curve = function (t) {\n      return arguments.length ? n(Rb(t)) : n()._curve;\n    }, t;\n  }\n\n  function Ib(t, n) {\n    return [(n = +n) * Math.cos(t -= Math.PI / 2), n * Math.sin(t)];\n  }\n\n  function Bb(t) {\n    return t.source;\n  }\n\n  function Yb(t) {\n    return t.target;\n  }\n\n  function Lb(t) {\n    var n = Bb,\n        e = Yb,\n        r = Eb,\n        i = kb,\n        o = null;\n\n    function a() {\n      var a,\n          u = Mb.call(arguments),\n          c = n.apply(this, u),\n          f = e.apply(this, u);\n      if (o || (o = a = fa()), t(o, +r.apply(this, (u[0] = c, u)), +i.apply(this, u), +r.apply(this, (u[0] = f, u)), +i.apply(this, u)), a) return o = null, a + "" || null;\n    }\n\n    return a.source = function (t) {\n      return arguments.length ? (n = t, a) : n;\n    }, a.target = function (t) {\n      return arguments.length ? (e = t, a) : e;\n    }, a.x = function (t) {\n      return arguments.length ? (r = "function" == typeof t ? t : eb(+t), a) : r;\n    }, a.y = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : eb(+t), a) : i;\n    }, a.context = function (t) {\n      return arguments.length ? (o = null == t ? null : t, a) : o;\n    }, a;\n  }\n\n  function jb(t, n, e, r, i) {\n    t.moveTo(n, e), t.bezierCurveTo(n = (n + r) / 2, e, n, i, r, i);\n  }\n\n  function Hb(t, n, e, r, i) {\n    t.moveTo(n, e), t.bezierCurveTo(n, e = (e + i) / 2, r, e, r, i);\n  }\n\n  function Xb(t, n, e, r, i) {\n    var o = Ib(n, e),\n        a = Ib(n, e = (e + i) / 2),\n        u = Ib(r, e),\n        c = Ib(r, i);\n    t.moveTo(o[0], o[1]), t.bezierCurveTo(a[0], a[1], u[0], u[1], c[0], c[1]);\n  }\n\n  qb.prototype = {\n    areaStart: function areaStart() {\n      this._curve.areaStart();\n    },\n    areaEnd: function areaEnd() {\n      this._curve.areaEnd();\n    },\n    lineStart: function lineStart() {\n      this._curve.lineStart();\n    },\n    lineEnd: function lineEnd() {\n      this._curve.lineEnd();\n    },\n    point: function point(t, n) {\n      this._curve.point(n * Math.sin(t), n * -Math.cos(t));\n    }\n  };\n  var Gb = {\n    draw: function draw(t, n) {\n      var e = Math.sqrt(n / lb);\n      t.moveTo(e, 0), t.arc(0, 0, e, 0, db);\n    }\n  },\n      Vb = {\n    draw: function draw(t, n) {\n      var e = Math.sqrt(n / 5) / 2;\n      t.moveTo(-3 * e, -e), t.lineTo(-e, -e), t.lineTo(-e, -3 * e), t.lineTo(e, -3 * e), t.lineTo(e, -e), t.lineTo(3 * e, -e), t.lineTo(3 * e, e), t.lineTo(e, e), t.lineTo(e, 3 * e), t.lineTo(-e, 3 * e), t.lineTo(-e, e), t.lineTo(-3 * e, e), t.closePath();\n    }\n  },\n      $b = Math.sqrt(1 / 3),\n      Wb = 2 * $b,\n      Zb = {\n    draw: function draw(t, n) {\n      var e = Math.sqrt(n / Wb),\n          r = e * $b;\n      t.moveTo(0, -e), t.lineTo(r, 0), t.lineTo(0, e), t.lineTo(-r, 0), t.closePath();\n    }\n  },\n      Kb = Math.sin(lb / 10) / Math.sin(7 * lb / 10),\n      Qb = Math.sin(db / 10) * Kb,\n      Jb = -Math.cos(db / 10) * Kb,\n      tm = {\n    draw: function draw(t, n) {\n      var e = Math.sqrt(.8908130915292852 * n),\n          r = Qb * e,\n          i = Jb * e;\n      t.moveTo(0, -e), t.lineTo(r, i);\n\n      for (var o = 1; o < 5; ++o) {\n        var a = db * o / 5,\n            u = Math.cos(a),\n            c = Math.sin(a);\n        t.lineTo(c * e, -u * e), t.lineTo(u * r - c * i, c * r + u * i);\n      }\n\n      t.closePath();\n    }\n  },\n      nm = {\n    draw: function draw(t, n) {\n      var e = Math.sqrt(n),\n          r = -e / 2;\n      t.rect(r, r, e, e);\n    }\n  },\n      em = Math.sqrt(3),\n      rm = {\n    draw: function draw(t, n) {\n      var e = -Math.sqrt(n / (3 * em));\n      t.moveTo(0, 2 * e), t.lineTo(-em * e, -e), t.lineTo(em * e, -e), t.closePath();\n    }\n  },\n      im = -.5,\n      om = Math.sqrt(3) / 2,\n      am = 1 / Math.sqrt(12),\n      um = 3 * (am / 2 + 1),\n      cm = {\n    draw: function draw(t, n) {\n      var e = Math.sqrt(n / um),\n          r = e / 2,\n          i = e * am,\n          o = r,\n          a = e * am + e,\n          u = -o,\n          c = a;\n      t.moveTo(r, i), t.lineTo(o, a), t.lineTo(u, c), t.lineTo(im * r - om * i, om * r + im * i), t.lineTo(im * o - om * a, om * o + im * a), t.lineTo(im * u - om * c, om * u + im * c), t.lineTo(im * r + om * i, im * i - om * r), t.lineTo(im * o + om * a, im * a - om * o), t.lineTo(im * u + om * c, im * c - om * u), t.closePath();\n    }\n  },\n      fm = [Gb, Vb, Zb, nm, tm, rm, cm];\n\n  function sm() {}\n\n  function lm(t, n, e) {\n    t._context.bezierCurveTo((2 * t._x0 + t._x1) / 3, (2 * t._y0 + t._y1) / 3, (t._x0 + 2 * t._x1) / 3, (t._y0 + 2 * t._y1) / 3, (t._x0 + 4 * t._x1 + n) / 6, (t._y0 + 4 * t._y1 + e) / 6);\n  }\n\n  function hm(t) {\n    this._context = t;\n  }\n\n  function dm(t) {\n    this._context = t;\n  }\n\n  function pm(t) {\n    this._context = t;\n  }\n\n  hm.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 3:\n          lm(this, this._x1, this._y1);\n\n        case 2:\n          this._context.lineTo(this._x1, this._y1);\n\n      }\n\n      (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n    },\n    point: function point(t, n) {\n      switch (t = +t, n = +n, this._point) {\n        case 0:\n          this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3, this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);\n\n        default:\n          lm(this, t, n);\n      }\n\n      this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n;\n    }\n  }, dm.prototype = {\n    areaStart: sm,\n    areaEnd: sm,\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN, this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 1:\n          this._context.moveTo(this._x2, this._y2), this._context.closePath();\n          break;\n\n        case 2:\n          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3), this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3), this._context.closePath();\n          break;\n\n        case 3:\n          this.point(this._x2, this._y2), this.point(this._x3, this._y3), this.point(this._x4, this._y4);\n      }\n    },\n    point: function point(t, n) {\n      switch (t = +t, n = +n, this._point) {\n        case 0:\n          this._point = 1, this._x2 = t, this._y2 = n;\n          break;\n\n        case 1:\n          this._point = 2, this._x3 = t, this._y3 = n;\n          break;\n\n        case 2:\n          this._point = 3, this._x4 = t, this._y4 = n, this._context.moveTo((this._x0 + 4 * this._x1 + t) / 6, (this._y0 + 4 * this._y1 + n) / 6);\n          break;\n\n        default:\n          lm(this, t, n);\n      }\n\n      this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n;\n    }\n  }, pm.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n    },\n    point: function point(t, n) {\n      switch (t = +t, n = +n, this._point) {\n        case 0:\n          this._point = 1;\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3;\n          var e = (this._x0 + 4 * this._x1 + t) / 6,\n              r = (this._y0 + 4 * this._y1 + n) / 6;\n          this._line ? this._context.lineTo(e, r) : this._context.moveTo(e, r);\n          break;\n\n        case 3:\n          this._point = 4;\n\n        default:\n          lm(this, t, n);\n      }\n\n      this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n;\n    }\n  };\n\n  var gm = /*#__PURE__*/function () {\n    function gm(t, n) {\n      _classCallCheck(this, gm);\n\n      this._context = t, this._x = n;\n    }\n\n    _createClass(gm, [{\n      key: "areaStart",\n      value: function areaStart() {\n        this._line = 0;\n      }\n    }, {\n      key: "areaEnd",\n      value: function areaEnd() {\n        this._line = NaN;\n      }\n    }, {\n      key: "lineStart",\n      value: function lineStart() {\n        this._point = 0;\n      }\n    }, {\n      key: "lineEnd",\n      value: function lineEnd() {\n        (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n      }\n    }, {\n      key: "point",\n      value: function point(t, n) {\n        switch (t = +t, n = +n, this._point) {\n          case 0:\n            this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);\n            break;\n\n          case 1:\n            this._point = 2;\n\n          default:\n            this._x ? this._context.bezierCurveTo(this._x0 = (this._x0 + t) / 2, this._y0, this._x0, n, t, n) : this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + n) / 2, t, this._y0, t, n);\n        }\n\n        this._x0 = t, this._y0 = n;\n      }\n    }]);\n\n    return gm;\n  }();\n\n  function ym(t, n) {\n    this._basis = new hm(t), this._beta = n;\n  }\n\n  ym.prototype = {\n    lineStart: function lineStart() {\n      this._x = [], this._y = [], this._basis.lineStart();\n    },\n    lineEnd: function lineEnd() {\n      var t = this._x,\n          n = this._y,\n          e = t.length - 1;\n      if (e > 0) for (var r, i = t[0], o = n[0], a = t[e] - i, u = n[e] - o, c = -1; ++c <= e;) {\n        r = c / e, this._basis.point(this._beta * t[c] + (1 - this._beta) * (i + r * a), this._beta * n[c] + (1 - this._beta) * (o + r * u));\n      }\n      this._x = this._y = null, this._basis.lineEnd();\n    },\n    point: function point(t, n) {\n      this._x.push(+t), this._y.push(+n);\n    }\n  };\n\n  var vm = function t(n) {\n    function e(t) {\n      return 1 === n ? new hm(t) : new ym(t, n);\n    }\n\n    return e.beta = function (n) {\n      return t(+n);\n    }, e;\n  }(.85);\n\n  function _m(t, n, e) {\n    t._context.bezierCurveTo(t._x1 + t._k * (t._x2 - t._x0), t._y1 + t._k * (t._y2 - t._y0), t._x2 + t._k * (t._x1 - n), t._y2 + t._k * (t._y1 - e), t._x2, t._y2);\n  }\n\n  function bm(t, n) {\n    this._context = t, this._k = (1 - n) / 6;\n  }\n\n  bm.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 2:\n          this._context.lineTo(this._x2, this._y2);\n\n          break;\n\n        case 3:\n          _m(this, this._x1, this._y1);\n\n      }\n\n      (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n    },\n    point: function point(t, n) {\n      switch (t = +t, n = +n, this._point) {\n        case 0:\n          this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);\n          break;\n\n        case 1:\n          this._point = 2, this._x1 = t, this._y1 = n;\n          break;\n\n        case 2:\n          this._point = 3;\n\n        default:\n          _m(this, t, n);\n\n      }\n\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;\n    }\n  };\n\n  var mm = function t(n) {\n    function e(t) {\n      return new bm(t, n);\n    }\n\n    return e.tension = function (n) {\n      return t(+n);\n    }, e;\n  }(0);\n\n  function xm(t, n) {\n    this._context = t, this._k = (1 - n) / 6;\n  }\n\n  xm.prototype = {\n    areaStart: sm,\n    areaEnd: sm,\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 1:\n          this._context.moveTo(this._x3, this._y3), this._context.closePath();\n          break;\n\n        case 2:\n          this._context.lineTo(this._x3, this._y3), this._context.closePath();\n          break;\n\n        case 3:\n          this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);\n      }\n    },\n    point: function point(t, n) {\n      switch (t = +t, n = +n, this._point) {\n        case 0:\n          this._point = 1, this._x3 = t, this._y3 = n;\n          break;\n\n        case 1:\n          this._point = 2, this._context.moveTo(this._x4 = t, this._y4 = n);\n          break;\n\n        case 2:\n          this._point = 3, this._x5 = t, this._y5 = n;\n          break;\n\n        default:\n          _m(this, t, n);\n\n      }\n\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;\n    }\n  };\n\n  var wm = function t(n) {\n    function e(t) {\n      return new xm(t, n);\n    }\n\n    return e.tension = function (n) {\n      return t(+n);\n    }, e;\n  }(0);\n\n  function Mm(t, n) {\n    this._context = t, this._k = (1 - n) / 6;\n  }\n\n  Mm.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n    },\n    point: function point(t, n) {\n      switch (t = +t, n = +n, this._point) {\n        case 0:\n          this._point = 1;\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);\n          break;\n\n        case 3:\n          this._point = 4;\n\n        default:\n          _m(this, t, n);\n\n      }\n\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;\n    }\n  };\n\n  var Am = function t(n) {\n    function e(t) {\n      return new Mm(t, n);\n    }\n\n    return e.tension = function (n) {\n      return t(+n);\n    }, e;\n  }(0);\n\n  function Tm(t, n, e) {\n    var r = t._x1,\n        i = t._y1,\n        o = t._x2,\n        a = t._y2;\n\n    if (t._l01_a > sb) {\n      var u = 2 * t._l01_2a + 3 * t._l01_a * t._l12_a + t._l12_2a,\n          c = 3 * t._l01_a * (t._l01_a + t._l12_a);\n      r = (r * u - t._x0 * t._l12_2a + t._x2 * t._l01_2a) / c, i = (i * u - t._y0 * t._l12_2a + t._y2 * t._l01_2a) / c;\n    }\n\n    if (t._l23_a > sb) {\n      var f = 2 * t._l23_2a + 3 * t._l23_a * t._l12_a + t._l12_2a,\n          s = 3 * t._l23_a * (t._l23_a + t._l12_a);\n      o = (o * f + t._x1 * t._l23_2a - n * t._l12_2a) / s, a = (a * f + t._y1 * t._l23_2a - e * t._l12_2a) / s;\n    }\n\n    t._context.bezierCurveTo(r, i, o, a, t._x2, t._y2);\n  }\n\n  function Sm(t, n) {\n    this._context = t, this._alpha = n;\n  }\n\n  Sm.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 2:\n          this._context.lineTo(this._x2, this._y2);\n\n          break;\n\n        case 3:\n          this.point(this._x2, this._y2);\n      }\n\n      (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n    },\n    point: function point(t, n) {\n      if (t = +t, n = +n, this._point) {\n        var e = this._x2 - t,\n            r = this._y2 - n;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e * e + r * r, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0:\n          this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3;\n\n        default:\n          Tm(this, t, n);\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;\n    }\n  };\n\n  var Em = function t(n) {\n    function e(t) {\n      return n ? new Sm(t, n) : new bm(t, 0);\n    }\n\n    return e.alpha = function (n) {\n      return t(+n);\n    }, e;\n  }(.5);\n\n  function km(t, n) {\n    this._context = t, this._alpha = n;\n  }\n\n  km.prototype = {\n    areaStart: sm,\n    areaEnd: sm,\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 1:\n          this._context.moveTo(this._x3, this._y3), this._context.closePath();\n          break;\n\n        case 2:\n          this._context.lineTo(this._x3, this._y3), this._context.closePath();\n          break;\n\n        case 3:\n          this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);\n      }\n    },\n    point: function point(t, n) {\n      if (t = +t, n = +n, this._point) {\n        var e = this._x2 - t,\n            r = this._y2 - n;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e * e + r * r, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0:\n          this._point = 1, this._x3 = t, this._y3 = n;\n          break;\n\n        case 1:\n          this._point = 2, this._context.moveTo(this._x4 = t, this._y4 = n);\n          break;\n\n        case 2:\n          this._point = 3, this._x5 = t, this._y5 = n;\n          break;\n\n        default:\n          Tm(this, t, n);\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;\n    }\n  };\n\n  var Nm = function t(n) {\n    function e(t) {\n      return n ? new km(t, n) : new xm(t, 0);\n    }\n\n    return e.alpha = function (n) {\n      return t(+n);\n    }, e;\n  }(.5);\n\n  function Cm(t, n) {\n    this._context = t, this._alpha = n;\n  }\n\n  Cm.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n    },\n    point: function point(t, n) {\n      if (t = +t, n = +n, this._point) {\n        var e = this._x2 - t,\n            r = this._y2 - n;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e * e + r * r, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);\n          break;\n\n        case 3:\n          this._point = 4;\n\n        default:\n          Tm(this, t, n);\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n;\n    }\n  };\n\n  var Pm = function t(n) {\n    function e(t) {\n      return n ? new Cm(t, n) : new Mm(t, 0);\n    }\n\n    return e.alpha = function (n) {\n      return t(+n);\n    }, e;\n  }(.5);\n\n  function zm(t) {\n    this._context = t;\n  }\n\n  function Dm(t) {\n    return t < 0 ? -1 : 1;\n  }\n\n  function qm(t, n, e) {\n    var r = t._x1 - t._x0,\n        i = n - t._x1,\n        o = (t._y1 - t._y0) / (r || i < 0 && -0),\n        a = (e - t._y1) / (i || r < 0 && -0),\n        u = (o * i + a * r) / (r + i);\n    return (Dm(o) + Dm(a)) * Math.min(Math.abs(o), Math.abs(a), .5 * Math.abs(u)) || 0;\n  }\n\n  function Rm(t, n) {\n    var e = t._x1 - t._x0;\n    return e ? (3 * (t._y1 - t._y0) / e - n) / 2 : n;\n  }\n\n  function Fm(t, n, e) {\n    var r = t._x0,\n        i = t._y0,\n        o = t._x1,\n        a = t._y1,\n        u = (o - r) / 3;\n\n    t._context.bezierCurveTo(r + u, i + u * n, o - u, a - u * e, o, a);\n  }\n\n  function Om(t) {\n    this._context = t;\n  }\n\n  function Um(t) {\n    this._context = new Im(t);\n  }\n\n  function Im(t) {\n    this._context = t;\n  }\n\n  function Bm(t) {\n    this._context = t;\n  }\n\n  function Ym(t) {\n    var n,\n        e,\n        r = t.length - 1,\n        i = new Array(r),\n        o = new Array(r),\n        a = new Array(r);\n\n    for (i[0] = 0, o[0] = 2, a[0] = t[0] + 2 * t[1], n = 1; n < r - 1; ++n) {\n      i[n] = 1, o[n] = 4, a[n] = 4 * t[n] + 2 * t[n + 1];\n    }\n\n    for (i[r - 1] = 2, o[r - 1] = 7, a[r - 1] = 8 * t[r - 1] + t[r], n = 1; n < r; ++n) {\n      e = i[n] / o[n - 1], o[n] -= e, a[n] -= e * a[n - 1];\n    }\n\n    for (i[r - 1] = a[r - 1] / o[r - 1], n = r - 2; n >= 0; --n) {\n      i[n] = (a[n] - i[n + 1]) / o[n];\n    }\n\n    for (o[r - 1] = (t[r] + i[r - 1]) / 2, n = 0; n < r - 1; ++n) {\n      o[n] = 2 * t[n + 1] - i[n + 1];\n    }\n\n    return [i, o];\n  }\n\n  function Lm(t, n) {\n    this._context = t, this._t = n;\n  }\n\n  function jm(t, n) {\n    if ((i = t.length) > 1) for (var e, r, i, o = 1, a = t[n[0]], u = a.length; o < i; ++o) {\n      for (r = a, a = t[n[o]], e = 0; e < u; ++e) {\n        a[e][1] += a[e][0] = isNaN(r[e][1]) ? r[e][0] : r[e][1];\n      }\n    }\n  }\n\n  function Hm(t) {\n    for (var n = t.length, e = new Array(n); --n >= 0;) {\n      e[n] = n;\n    }\n\n    return e;\n  }\n\n  function Xm(t, n) {\n    return t[n];\n  }\n\n  function Gm(t) {\n    var n = [];\n    return n.key = t, n;\n  }\n\n  function Vm(t) {\n    var n = t.map($m);\n    return Hm(t).sort(function (t, e) {\n      return n[t] - n[e];\n    });\n  }\n\n  function $m(t) {\n    for (var n, e = -1, r = 0, i = t.length, o = -1 / 0; ++e < i;) {\n      (n = +t[e][1]) > o && (o = n, r = e);\n    }\n\n    return r;\n  }\n\n  function Wm(t) {\n    var n = t.map(Zm);\n    return Hm(t).sort(function (t, e) {\n      return n[t] - n[e];\n    });\n  }\n\n  function Zm(t) {\n    for (var n, e = 0, r = -1, i = t.length; ++r < i;) {\n      (n = +t[r][1]) && (e += n);\n    }\n\n    return e;\n  }\n\n  zm.prototype = {\n    areaStart: sm,\n    areaEnd: sm,\n    lineStart: function lineStart() {\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      this._point && this._context.closePath();\n    },\n    point: function point(t, n) {\n      t = +t, n = +n, this._point ? this._context.lineTo(t, n) : (this._point = 1, this._context.moveTo(t, n));\n    }\n  }, Om.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN, this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 2:\n          this._context.lineTo(this._x1, this._y1);\n\n          break;\n\n        case 3:\n          Fm(this, this._t0, Rm(this, this._t0));\n      }\n\n      (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n    },\n    point: function point(t, n) {\n      var e = NaN;\n\n      if (n = +n, (t = +t) !== this._x1 || n !== this._y1) {\n        switch (this._point) {\n          case 0:\n            this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);\n            break;\n\n          case 1:\n            this._point = 2;\n            break;\n\n          case 2:\n            this._point = 3, Fm(this, Rm(this, e = qm(this, t, n)), e);\n            break;\n\n          default:\n            Fm(this, this._t0, e = qm(this, t, n));\n        }\n\n        this._x0 = this._x1, this._x1 = t, this._y0 = this._y1, this._y1 = n, this._t0 = e;\n      }\n    }\n  }, (Um.prototype = Object.create(Om.prototype)).point = function (t, n) {\n    Om.prototype.point.call(this, n, t);\n  }, Im.prototype = {\n    moveTo: function moveTo(t, n) {\n      this._context.moveTo(n, t);\n    },\n    closePath: function closePath() {\n      this._context.closePath();\n    },\n    lineTo: function lineTo(t, n) {\n      this._context.lineTo(n, t);\n    },\n    bezierCurveTo: function bezierCurveTo(t, n, e, r, i, o) {\n      this._context.bezierCurveTo(n, t, r, e, o, i);\n    }\n  }, Bm.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x = [], this._y = [];\n    },\n    lineEnd: function lineEnd() {\n      var t = this._x,\n          n = this._y,\n          e = t.length;\n      if (e) if (this._line ? this._context.lineTo(t[0], n[0]) : this._context.moveTo(t[0], n[0]), 2 === e) this._context.lineTo(t[1], n[1]);else for (var r = Ym(t), i = Ym(n), o = 0, a = 1; a < e; ++o, ++a) {\n        this._context.bezierCurveTo(r[0][o], i[0][o], r[1][o], i[1][o], t[a], n[a]);\n      }\n      (this._line || 0 !== this._line && 1 === e) && this._context.closePath(), this._line = 1 - this._line, this._x = this._y = null;\n    },\n    point: function point(t, n) {\n      this._x.push(+t), this._y.push(+n);\n    }\n  }, Lm.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x = this._y = NaN, this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      0 < this._t && this._t < 1 && 2 === this._point && this._context.lineTo(this._x, this._y), (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line >= 0 && (this._t = 1 - this._t, this._line = 1 - this._line);\n    },\n    point: function point(t, n) {\n      switch (t = +t, n = +n, this._point) {\n        case 0:\n          this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);\n          break;\n\n        case 1:\n          this._point = 2;\n\n        default:\n          if (this._t <= 0) this._context.lineTo(this._x, n), this._context.lineTo(t, n);else {\n            var e = this._x * (1 - this._t) + t * this._t;\n            this._context.lineTo(e, this._y), this._context.lineTo(e, n);\n          }\n      }\n\n      this._x = t, this._y = n;\n    }\n  };\n\n  var Km = function Km(t) {\n    return function () {\n      return t;\n    };\n  };\n\n  function Qm(t, _ref8) {\n    var n = _ref8.sourceEvent,\n        e = _ref8.target,\n        r = _ref8.transform,\n        i = _ref8.dispatch;\n    Object.defineProperties(this, {\n      type: {\n        value: t,\n        enumerable: !0,\n        configurable: !0\n      },\n      sourceEvent: {\n        value: n,\n        enumerable: !0,\n        configurable: !0\n      },\n      target: {\n        value: e,\n        enumerable: !0,\n        configurable: !0\n      },\n      transform: {\n        value: r,\n        enumerable: !0,\n        configurable: !0\n      },\n      _: {\n        value: i\n      }\n    });\n  }\n\n  function Jm(t, n, e) {\n    this.k = t, this.x = n, this.y = e;\n  }\n\n  Jm.prototype = {\n    constructor: Jm,\n    scale: function scale(t) {\n      return 1 === t ? this : new Jm(this.k * t, this.x, this.y);\n    },\n    translate: function translate(t, n) {\n      return 0 === t & 0 === n ? this : new Jm(this.k, this.x + this.k * t, this.y + this.k * n);\n    },\n    apply: function apply(t) {\n      return [t[0] * this.k + this.x, t[1] * this.k + this.y];\n    },\n    applyX: function applyX(t) {\n      return t * this.k + this.x;\n    },\n    applyY: function applyY(t) {\n      return t * this.k + this.y;\n    },\n    invert: function invert(t) {\n      return [(t[0] - this.x) / this.k, (t[1] - this.y) / this.k];\n    },\n    invertX: function invertX(t) {\n      return (t - this.x) / this.k;\n    },\n    invertY: function invertY(t) {\n      return (t - this.y) / this.k;\n    },\n    rescaleX: function rescaleX(t) {\n      return t.copy().domain(t.range().map(this.invertX, this).map(t.invert, t));\n    },\n    rescaleY: function rescaleY(t) {\n      return t.copy().domain(t.range().map(this.invertY, this).map(t.invert, t));\n    },\n    toString: function toString() {\n      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";\n    }\n  };\n  var tx = new Jm(1, 0, 0);\n\n  function nx(t) {\n    for (; !t.__zoom;) {\n      if (!(t = t.parentNode)) return tx;\n    }\n\n    return t.__zoom;\n  }\n\n  function ex(t) {\n    t.stopImmediatePropagation();\n  }\n\n  function rx(t) {\n    t.preventDefault(), t.stopImmediatePropagation();\n  }\n\n  function ix(t) {\n    return !(t.ctrlKey && "wheel" !== t.type || t.button);\n  }\n\n  function ox() {\n    var t = this;\n    return t instanceof SVGElement ? (t = t.ownerSVGElement || t).hasAttribute("viewBox") ? [[(t = t.viewBox.baseVal).x, t.y], [t.x + t.width, t.y + t.height]] : [[0, 0], [t.width.baseVal.value, t.height.baseVal.value]] : [[0, 0], [t.clientWidth, t.clientHeight]];\n  }\n\n  function ax() {\n    return this.__zoom || tx;\n  }\n\n  function ux(t) {\n    return -t.deltaY * (1 === t.deltaMode ? .05 : t.deltaMode ? 1 : .002) * (t.ctrlKey ? 10 : 1);\n  }\n\n  function cx() {\n    return navigator.maxTouchPoints || "ontouchstart" in this;\n  }\n\n  function fx(t, n, e) {\n    var r = t.invertX(n[0][0]) - e[0][0],\n        i = t.invertX(n[1][0]) - e[1][0],\n        o = t.invertY(n[0][1]) - e[0][1],\n        a = t.invertY(n[1][1]) - e[1][1];\n    return t.translate(i > r ? (r + i) / 2 : Math.min(0, r) || Math.max(0, i), a > o ? (o + a) / 2 : Math.min(0, o) || Math.max(0, a));\n  }\n\n  nx.prototype = Jm.prototype, t.Adder = g, t.Delaunay = nu, t.FormatSpecifier = uc, t.InternMap = y, t.InternSet = v, t.Voronoi = Wa, t.active = function (t, n) {\n    var e,\n        r,\n        i = t.__transition;\n    if (i) for (r in n = null == n ? null : n + "", i) {\n      if ((e = i[r]).state > 1 && e.name === n) return new ji([[t]], _o, n, +r);\n    }\n    return null;\n  }, t.arc = function () {\n    var t = yb,\n        n = vb,\n        e = eb(0),\n        r = null,\n        i = _b,\n        o = bb,\n        a = mb,\n        u = null;\n\n    function c() {\n      var c,\n          f,\n          s = +t.apply(this, arguments),\n          l = +n.apply(this, arguments),\n          h = i.apply(this, arguments) - hb,\n          d = o.apply(this, arguments) - hb,\n          p = rb(d - h),\n          g = d > h;\n      if (u || (u = c = fa()), l < s && (f = l, l = s, s = f), l > sb) {\n        if (p > db - sb) u.moveTo(l * ob(h), l * cb(h)), u.arc(0, 0, l, h, d, !g), s > sb && (u.moveTo(s * ob(d), s * cb(d)), u.arc(0, 0, s, d, h, g));else {\n          var y,\n              v,\n              _ = h,\n              b = d,\n              m = h,\n              x = d,\n              w = p,\n              M = p,\n              A = a.apply(this, arguments) / 2,\n              T = A > sb && (r ? +r.apply(this, arguments) : fb(s * s + l * l)),\n              S = ub(rb(l - s) / 2, +e.apply(this, arguments)),\n              E = S,\n              k = S;\n\n          if (T > sb) {\n            var N = gb(T / s * cb(A)),\n                C = gb(T / l * cb(A));\n            (w -= 2 * N) > sb ? (m += N *= g ? 1 : -1, x -= N) : (w = 0, m = x = (h + d) / 2), (M -= 2 * C) > sb ? (_ += C *= g ? 1 : -1, b -= C) : (M = 0, _ = b = (h + d) / 2);\n          }\n\n          var P = l * ob(_),\n              z = l * cb(_),\n              D = s * ob(x),\n              q = s * cb(x);\n\n          if (S > sb) {\n            var R,\n                F = l * ob(b),\n                O = l * cb(b),\n                U = s * ob(m),\n                I = s * cb(m);\n\n            if (p < lb && (R = xb(P, z, U, I, F, O, D, q))) {\n              var B = P - R[0],\n                  Y = z - R[1],\n                  L = F - R[0],\n                  j = O - R[1],\n                  H = 1 / cb(pb((B * L + Y * j) / (fb(B * B + Y * Y) * fb(L * L + j * j))) / 2),\n                  X = fb(R[0] * R[0] + R[1] * R[1]);\n              E = ub(S, (s - X) / (H - 1)), k = ub(S, (l - X) / (H + 1));\n            }\n          }\n\n          M > sb ? k > sb ? (y = wb(U, I, P, z, l, k, g), v = wb(F, O, D, q, l, k, g), u.moveTo(y.cx + y.x01, y.cy + y.y01), k < S ? u.arc(y.cx, y.cy, k, ib(y.y01, y.x01), ib(v.y01, v.x01), !g) : (u.arc(y.cx, y.cy, k, ib(y.y01, y.x01), ib(y.y11, y.x11), !g), u.arc(0, 0, l, ib(y.cy + y.y11, y.cx + y.x11), ib(v.cy + v.y11, v.cx + v.x11), !g), u.arc(v.cx, v.cy, k, ib(v.y11, v.x11), ib(v.y01, v.x01), !g))) : (u.moveTo(P, z), u.arc(0, 0, l, _, b, !g)) : u.moveTo(P, z), s > sb && w > sb ? E > sb ? (y = wb(D, q, F, O, s, -E, g), v = wb(P, z, U, I, s, -E, g), u.lineTo(y.cx + y.x01, y.cy + y.y01), E < S ? u.arc(y.cx, y.cy, E, ib(y.y01, y.x01), ib(v.y01, v.x01), !g) : (u.arc(y.cx, y.cy, E, ib(y.y01, y.x01), ib(y.y11, y.x11), !g), u.arc(0, 0, s, ib(y.cy + y.y11, y.cx + y.x11), ib(v.cy + v.y11, v.cx + v.x11), g), u.arc(v.cx, v.cy, E, ib(v.y11, v.x11), ib(v.y01, v.x01), !g))) : u.arc(0, 0, s, x, m, g) : u.lineTo(D, q);\n        }\n      } else u.moveTo(0, 0);\n      if (u.closePath(), c) return u = null, c + "" || null;\n    }\n\n    return c.centroid = function () {\n      var e = (+t.apply(this, arguments) + +n.apply(this, arguments)) / 2,\n          r = (+i.apply(this, arguments) + +o.apply(this, arguments)) / 2 - lb / 2;\n      return [ob(r) * e, cb(r) * e];\n    }, c.innerRadius = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : eb(+n), c) : t;\n    }, c.outerRadius = function (t) {\n      return arguments.length ? (n = "function" == typeof t ? t : eb(+t), c) : n;\n    }, c.cornerRadius = function (t) {\n      return arguments.length ? (e = "function" == typeof t ? t : eb(+t), c) : e;\n    }, c.padRadius = function (t) {\n      return arguments.length ? (r = null == t ? null : "function" == typeof t ? t : eb(+t), c) : r;\n    }, c.startAngle = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : eb(+t), c) : i;\n    }, c.endAngle = function (t) {\n      return arguments.length ? (o = "function" == typeof t ? t : eb(+t), c) : o;\n    }, c.padAngle = function (t) {\n      return arguments.length ? (a = "function" == typeof t ? t : eb(+t), c) : a;\n    }, c.context = function (t) {\n      return arguments.length ? (u = null == t ? null : t, c) : u;\n    }, c;\n  }, t.area = Cb, t.areaRadial = Ub, t.ascending = n, t.autoType = function (t) {\n    for (var n in t) {\n      var e,\n          r,\n          i = t[n].trim();\n      if (i) {\n        if ("true" === i) i = !0;else if ("false" === i) i = !1;else if ("NaN" === i) i = NaN;else if (isNaN(e = +i)) {\n          if (!(r = i.match(/^([-+]\\d{2})?\\d{4}(-\\d{2}(-\\d{2})?)?(T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{3})?)?(Z|[-+]\\d{2}:\\d{2})?)?$/))) continue;\n          Tu && r[4] && !r[7] && (i = i.replace(/-/g, "/").replace(/T/, " ")), i = new Date(i);\n        } else i = e;\n      } else i = null;\n      t[n] = i;\n    }\n\n    return t;\n  }, t.axisBottom = function (t) {\n    return ht(3, t);\n  }, t.axisLeft = function (t) {\n    return ht(4, t);\n  }, t.axisRight = function (t) {\n    return ht(2, t);\n  }, t.axisTop = function (t) {\n    return ht(1, t);\n  }, t.bin = I, t.bisect = o, t.bisectCenter = u, t.bisectLeft = a, t.bisectRight = o, t.bisector = e, t.blob = function (t, n) {\n    return fetch(t, n).then(Su);\n  }, t.brush = function () {\n    return Go(qo);\n  }, t.brushSelection = function (t) {\n    var n = t.__brush;\n    return n ? n.dim.output(n.selection) : null;\n  }, t.brushX = function () {\n    return Go(zo);\n  }, t.brushY = function () {\n    return Go(Do);\n  }, t.buffer = function (t, n) {\n    return fetch(t, n).then(Eu);\n  }, t.chord = function () {\n    return ra(!1, !1);\n  }, t.chordDirected = function () {\n    return ra(!0, !1);\n  }, t.chordTranspose = function () {\n    return ra(!1, !0);\n  }, t.cluster = function () {\n    var t = Yh,\n        n = 1,\n        e = 1,\n        r = !1;\n\n    function i(i) {\n      var o,\n          a = 0;\n      i.eachAfter(function (n) {\n        var e = n.children;\n        e ? (n.x = function (t) {\n          return t.reduce(Lh, 0) / t.length;\n        }(e), n.y = function (t) {\n          return 1 + t.reduce(jh, 0);\n        }(e)) : (n.x = o ? a += t(n, o) : 0, n.y = 0, o = n);\n      });\n\n      var u = function (t) {\n        for (var n; n = t.children;) {\n          t = n[0];\n        }\n\n        return t;\n      }(i),\n          c = function (t) {\n        for (var n; n = t.children;) {\n          t = n[n.length - 1];\n        }\n\n        return t;\n      }(i),\n          f = u.x - t(u, c) / 2,\n          s = c.x + t(c, u) / 2;\n\n      return i.eachAfter(r ? function (t) {\n        t.x = (t.x - i.x) * n, t.y = (i.y - t.y) * e;\n      } : function (t) {\n        t.x = (t.x - f) / (s - f) * n, t.y = (1 - (i.y ? t.y / i.y : 1)) * e;\n      });\n    }\n\n    return i.separation = function (n) {\n      return arguments.length ? (t = n, i) : t;\n    }, i.size = function (t) {\n      return arguments.length ? (r = !1, n = +t[0], e = +t[1], i) : r ? null : [n, e];\n    }, i.nodeSize = function (t) {\n      return arguments.length ? (r = !0, n = +t[0], e = +t[1], i) : r ? [n, e] : null;\n    }, i;\n  }, t.color = de, t.contourDensity = function () {\n    var t = Pa,\n        n = za,\n        e = Da,\n        r = 960,\n        i = 500,\n        o = 20,\n        a = 2,\n        u = 3 * o,\n        c = r + 2 * u >> a,\n        f = i + 2 * u >> a,\n        s = wa(20);\n\n    function l(r) {\n      var i = new Float32Array(c * f),\n          l = new Float32Array(c * f);\n      r.forEach(function (r, o, s) {\n        var l = +t(r, o, s) + u >> a,\n            h = +n(r, o, s) + u >> a,\n            d = +e(r, o, s);\n        l >= 0 && l < c && h >= 0 && h < f && (i[l + h * c] += d);\n      }), Na({\n        width: c,\n        height: f,\n        data: i\n      }, {\n        width: c,\n        height: f,\n        data: l\n      }, o >> a), Ca({\n        width: c,\n        height: f,\n        data: l\n      }, {\n        width: c,\n        height: f,\n        data: i\n      }, o >> a), Na({\n        width: c,\n        height: f,\n        data: i\n      }, {\n        width: c,\n        height: f,\n        data: l\n      }, o >> a), Ca({\n        width: c,\n        height: f,\n        data: l\n      }, {\n        width: c,\n        height: f,\n        data: i\n      }, o >> a), Na({\n        width: c,\n        height: f,\n        data: i\n      }, {\n        width: c,\n        height: f,\n        data: l\n      }, o >> a), Ca({\n        width: c,\n        height: f,\n        data: l\n      }, {\n        width: c,\n        height: f,\n        data: i\n      }, o >> a);\n      var d = s(i);\n\n      if (!Array.isArray(d)) {\n        var p = B(i);\n        d = F(0, p, d), (d = Z(0, Math.floor(p / d) * d, d)).shift();\n      }\n\n      return ka().thresholds(d).size([c, f])(i).map(h);\n    }\n\n    function h(t) {\n      return t.value *= Math.pow(2, -2 * a), t.coordinates.forEach(d), t;\n    }\n\n    function d(t) {\n      t.forEach(p);\n    }\n\n    function p(t) {\n      t.forEach(g);\n    }\n\n    function g(t) {\n      t[0] = t[0] * Math.pow(2, a) - u, t[1] = t[1] * Math.pow(2, a) - u;\n    }\n\n    function y() {\n      return c = r + 2 * (u = 3 * o) >> a, f = i + 2 * u >> a, l;\n    }\n\n    return l.x = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : wa(+n), l) : t;\n    }, l.y = function (t) {\n      return arguments.length ? (n = "function" == typeof t ? t : wa(+t), l) : n;\n    }, l.weight = function (t) {\n      return arguments.length ? (e = "function" == typeof t ? t : wa(+t), l) : e;\n    }, l.size = function (t) {\n      if (!arguments.length) return [r, i];\n      var n = +t[0],\n          e = +t[1];\n      if (!(n >= 0 && e >= 0)) throw new Error("invalid size");\n      return r = n, i = e, y();\n    }, l.cellSize = function (t) {\n      if (!arguments.length) return 1 << a;\n      if (!((t = +t) >= 1)) throw new Error("invalid cell size");\n      return a = Math.floor(Math.log(t) / Math.LN2), y();\n    }, l.thresholds = function (t) {\n      return arguments.length ? (s = "function" == typeof t ? t : Array.isArray(t) ? wa(ma.call(t)) : wa(t), l) : s;\n    }, l.bandwidth = function (t) {\n      if (!arguments.length) return Math.sqrt(o * (o + 1));\n      if (!((t = +t) >= 0)) throw new Error("invalid bandwidth");\n      return o = Math.round((Math.sqrt(4 * t * t + 1) - 1) / 2), y();\n    }, l;\n  }, t.contours = ka, t.count = c, t.create = function (t) {\n    return Dn(At(t).call(document.documentElement));\n  }, t.creator = At, t.cross = function () {\n    for (var _len4 = arguments.length, t = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      t[_key4] = arguments[_key4];\n    }\n\n    var n = "function" == typeof t[t.length - 1] && function (t) {\n      return function (n) {\n        return t.apply(void 0, _toConsumableArray(n));\n      };\n    }(t.pop()),\n        e = (t = t.map(l)).map(f),\n        r = t.length - 1,\n        i = new Array(r + 1).fill(0),\n        o = [];\n\n    if (r < 0 || e.some(s)) return o;\n\n    for (;;) {\n      o.push(i.map(function (n, e) {\n        return t[e][n];\n      }));\n      var _a19 = r;\n\n      for (; ++i[_a19] === e[_a19];) {\n        if (0 === _a19) return n ? o.map(n) : o;\n        i[_a19--] = 0;\n      }\n    }\n  }, t.csv = Pu, t.csvFormat = hu, t.csvFormatBody = du, t.csvFormatRow = gu, t.csvFormatRows = pu, t.csvFormatValue = yu, t.csvParse = su, t.csvParseRows = lu, t.cubehelix = tr, t.cumsum = function (t, n) {\n    var e = 0,\n        r = 0;\n    return Float64Array.from(t, void 0 === n ? function (t) {\n      return e += +t || 0;\n    } : function (i) {\n      return e += +n(i, r++, t) || 0;\n    });\n  }, t.curveBasis = function (t) {\n    return new hm(t);\n  }, t.curveBasisClosed = function (t) {\n    return new dm(t);\n  }, t.curveBasisOpen = function (t) {\n    return new pm(t);\n  }, t.curveBumpX = function (t) {\n    return new gm(t, !0);\n  }, t.curveBumpY = function (t) {\n    return new gm(t, !1);\n  }, t.curveBundle = vm, t.curveCardinal = mm, t.curveCardinalClosed = wm, t.curveCardinalOpen = Am, t.curveCatmullRom = Em, t.curveCatmullRomClosed = Nm, t.curveCatmullRomOpen = Pm, t.curveLinear = Sb, t.curveLinearClosed = function (t) {\n    return new zm(t);\n  }, t.curveMonotoneX = function (t) {\n    return new Om(t);\n  }, t.curveMonotoneY = function (t) {\n    return new Um(t);\n  }, t.curveNatural = function (t) {\n    return new Bm(t);\n  }, t.curveStep = function (t) {\n    return new Lm(t, .5);\n  }, t.curveStepAfter = function (t) {\n    return new Lm(t, 1);\n  }, t.curveStepBefore = function (t) {\n    return new Lm(t, 0);\n  }, t.descending = function (t, n) {\n    return n < t ? -1 : n > t ? 1 : n >= t ? 0 : NaN;\n  }, t.deviation = d, t.difference = function (t) {\n    t = new Set(t);\n\n    for (var _len5 = arguments.length, n = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      n[_key5 - 1] = arguments[_key5];\n    }\n\n    for (var _i25 = 0, _n59 = n; _i25 < _n59.length; _i25++) {\n      var _e35 = _n59[_i25];\n\n      var _iterator37 = _createForOfIteratorHelper(_e35),\n          _step37;\n\n      try {\n        for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {\n          var _n60 = _step37.value;\n          t["delete"](_n60);\n        }\n      } catch (err) {\n        _iterator37.e(err);\n      } finally {\n        _iterator37.f();\n      }\n    }\n\n    return t;\n  }, t.disjoint = function (t, n) {\n    var e = n[Symbol.iterator](),\n        r = new Set();\n\n    var _iterator38 = _createForOfIteratorHelper(t),\n        _step38;\n\n    try {\n      for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {\n        var _n61 = _step38.value;\n        if (r.has(_n61)) return !1;\n\n        var _t30 = void 0,\n            _i26 = void 0;\n\n        for (; (_e$next2 = e.next(), _t30 = _e$next2.value, _i26 = _e$next2.done, _e$next2) && !_i26;) {\n          var _e$next2;\n\n          if (Object.is(_n61, _t30)) return !1;\n          r.add(_t30);\n        }\n      }\n    } catch (err) {\n      _iterator38.e(err);\n    } finally {\n      _iterator38.f();\n    }\n\n    return !0;\n  }, t.dispatch = pt, t.drag = function () {\n    var t,\n        n,\n        e,\n        r,\n        i = Xn,\n        o = Gn,\n        a = Vn,\n        u = $n,\n        c = {},\n        f = pt("start", "drag", "end"),\n        s = 0,\n        l = 0;\n\n    function h(t) {\n      t.on("mousedown.drag", d).filter(u).on("touchstart.drag", y).on("touchmove.drag", v).on("touchend.drag touchcancel.drag", _).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");\n    }\n\n    function d(a, u) {\n      if (!r && i.call(this, a, u)) {\n        var c = b(this, o.call(this, a, u), a, u, "mouse");\n        c && (Dn(a.view).on("mousemove.drag", p, !0).on("mouseup.drag", g, !0), Yn(a.view), In(a), e = !1, t = a.clientX, n = a.clientY, c("start", a));\n      }\n    }\n\n    function p(r) {\n      if (Bn(r), !e) {\n        var i = r.clientX - t,\n            o = r.clientY - n;\n        e = i * i + o * o > l;\n      }\n\n      c.mouse("drag", r);\n    }\n\n    function g(t) {\n      Dn(t.view).on("mousemove.drag mouseup.drag", null), Ln(t.view, e), Bn(t), c.mouse("end", t);\n    }\n\n    function y(t, n) {\n      if (i.call(this, t, n)) {\n        var e,\n            r,\n            a = t.changedTouches,\n            u = o.call(this, t, n),\n            c = a.length;\n\n        for (e = 0; e < c; ++e) {\n          (r = b(this, u, t, n, a[e].identifier, a[e])) && (In(t), r("start", t, a[e]));\n        }\n      }\n    }\n\n    function v(t) {\n      var n,\n          e,\n          r = t.changedTouches,\n          i = r.length;\n\n      for (n = 0; n < i; ++n) {\n        (e = c[r[n].identifier]) && (Bn(t), e("drag", t, r[n]));\n      }\n    }\n\n    function _(t) {\n      var n,\n          e,\n          i = t.changedTouches,\n          o = i.length;\n\n      for (r && clearTimeout(r), r = setTimeout(function () {\n        r = null;\n      }, 500), n = 0; n < o; ++n) {\n        (e = c[i[n].identifier]) && (In(t), e("end", t, i[n]));\n      }\n    }\n\n    function b(t, n, e, r, i, o) {\n      var u,\n          l,\n          d,\n          p = f.copy(),\n          g = Un(o || e, n);\n      if (null != (d = a.call(t, new Hn("beforestart", {\n        sourceEvent: e,\n        target: h,\n        identifier: i,\n        active: s,\n        x: g[0],\n        y: g[1],\n        dx: 0,\n        dy: 0,\n        dispatch: p\n      }), r))) return u = d.x - g[0] || 0, l = d.y - g[1] || 0, function e(o, a, f) {\n        var y,\n            v = g;\n\n        switch (o) {\n          case "start":\n            c[i] = e, y = s++;\n            break;\n\n          case "end":\n            delete c[i], --s;\n\n          case "drag":\n            g = Un(f || a, n), y = s;\n        }\n\n        p.call(o, t, new Hn(o, {\n          sourceEvent: a,\n          subject: d,\n          target: h,\n          identifier: i,\n          active: y,\n          x: g[0] + u,\n          y: g[1] + l,\n          dx: g[0] - v[0],\n          dy: g[1] - v[1],\n          dispatch: p\n        }), r);\n      };\n    }\n\n    return h.filter = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : jn(!!t), h) : i;\n    }, h.container = function (t) {\n      return arguments.length ? (o = "function" == typeof t ? t : jn(t), h) : o;\n    }, h.subject = function (t) {\n      return arguments.length ? (a = "function" == typeof t ? t : jn(t), h) : a;\n    }, h.touchable = function (t) {\n      return arguments.length ? (u = "function" == typeof t ? t : jn(!!t), h) : u;\n    }, h.on = function () {\n      var t = f.on.apply(f, arguments);\n      return t === f ? h : t;\n    }, h.clickDistance = function (t) {\n      return arguments.length ? (l = (t = +t) * t, h) : Math.sqrt(l);\n    }, h;\n  }, t.dragDisable = Yn, t.dragEnable = Ln, t.dsv = function (t, n, e, r) {\n    3 === arguments.length && "function" == typeof e && (r = e, e = void 0);\n    var i = cu(t);\n    return Nu(n, e).then(function (t) {\n      return i.parse(t, r);\n    });\n  }, t.dsvFormat = cu, t.easeBack = so, t.easeBackIn = co, t.easeBackInOut = so, t.easeBackOut = fo, t.easeBounce = ao, t.easeBounceIn = function (t) {\n    return 1 - ao(1 - t);\n  }, t.easeBounceInOut = function (t) {\n    return ((t *= 2) <= 1 ? 1 - ao(1 - t) : ao(t - 1) + 1) / 2;\n  }, t.easeBounceOut = ao, t.easeCircle = ro, t.easeCircleIn = function (t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }, t.easeCircleInOut = ro, t.easeCircleOut = function (t) {\n    return Math.sqrt(1 - --t * t);\n  }, t.easeCubic = $i, t.easeCubicIn = function (t) {\n    return t * t * t;\n  }, t.easeCubicInOut = $i, t.easeCubicOut = function (t) {\n    return --t * t * t + 1;\n  }, t.easeElastic = po, t.easeElasticIn = ho, t.easeElasticInOut = go, t.easeElasticOut = po, t.easeExp = eo, t.easeExpIn = function (t) {\n    return no(1 - +t);\n  }, t.easeExpInOut = eo, t.easeExpOut = function (t) {\n    return 1 - no(t);\n  }, t.easeLinear = function (t) {\n    return +t;\n  }, t.easePoly = Ki, t.easePolyIn = Wi, t.easePolyInOut = Ki, t.easePolyOut = Zi, t.easeQuad = Vi, t.easeQuadIn = function (t) {\n    return t * t;\n  }, t.easeQuadInOut = Vi, t.easeQuadOut = function (t) {\n    return t * (2 - t);\n  }, t.easeSin = to, t.easeSinIn = function (t) {\n    return 1 == +t ? 1 : 1 - Math.cos(t * Ji);\n  }, t.easeSinInOut = to, t.easeSinOut = function (t) {\n    return Math.sin(t * Ji);\n  }, t.every = function (t, n) {\n    if ("function" != typeof n) throw new TypeError("test is not a function");\n    var e = -1;\n\n    var _iterator39 = _createForOfIteratorHelper(t),\n        _step39;\n\n    try {\n      for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {\n        var _r29 = _step39.value;\n        if (!n(_r29, ++e, t)) return !1;\n      }\n    } catch (err) {\n      _iterator39.e(err);\n    } finally {\n      _iterator39.f();\n    }\n\n    return !0;\n  }, t.extent = p, t.fcumsum = function (t, n) {\n    var e = new g();\n    var r = -1;\n    return Float64Array.from(t, void 0 === n ? function (t) {\n      return e.add(+t || 0);\n    } : function (i) {\n      return e.add(+n(i, ++r, t) || 0);\n    });\n  }, t.filter = function (t, n) {\n    if ("function" != typeof n) throw new TypeError("test is not a function");\n    var e = [];\n    var r = -1;\n\n    var _iterator40 = _createForOfIteratorHelper(t),\n        _step40;\n\n    try {\n      for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {\n        var _i27 = _step40.value;\n        n(_i27, ++r, t) && e.push(_i27);\n      }\n    } catch (err) {\n      _iterator40.e(err);\n    } finally {\n      _iterator40.f();\n    }\n\n    return e;\n  }, t.forceCenter = function (t, n) {\n    var e,\n        r = 1;\n\n    function i() {\n      var i,\n          o,\n          a = e.length,\n          u = 0,\n          c = 0;\n\n      for (i = 0; i < a; ++i) {\n        u += (o = e[i]).x, c += o.y;\n      }\n\n      for (u = (u / a - t) * r, c = (c / a - n) * r, i = 0; i < a; ++i) {\n        (o = e[i]).x -= u, o.y -= c;\n      }\n    }\n\n    return null == t && (t = 0), null == n && (n = 0), i.initialize = function (t) {\n      e = t;\n    }, i.x = function (n) {\n      return arguments.length ? (t = +n, i) : t;\n    }, i.y = function (t) {\n      return arguments.length ? (n = +t, i) : n;\n    }, i.strength = function (t) {\n      return arguments.length ? (r = +t, i) : r;\n    }, i;\n  }, t.forceCollide = function (t) {\n    var n,\n        e,\n        r,\n        i = 1,\n        o = 1;\n\n    function a() {\n      for (var t, a, c, f, s, l, h, d = n.length, p = 0; p < o; ++p) {\n        for (a = Lu(n, $u, Wu).visitAfter(u), t = 0; t < d; ++t) {\n          c = n[t], l = e[c.index], h = l * l, f = c.x + c.vx, s = c.y + c.vy, a.visit(g);\n        }\n      }\n\n      function g(t, n, e, o, a) {\n        var u = t.data,\n            d = t.r,\n            p = l + d;\n        if (!u) return n > f + p || o < f - p || e > s + p || a < s - p;\n\n        if (u.index > c.index) {\n          var g = f - u.x - u.vx,\n              y = s - u.y - u.vy,\n              v = g * g + y * y;\n          v < p * p && (0 === g && (v += (g = Vu(r)) * g), 0 === y && (v += (y = Vu(r)) * y), v = (p - (v = Math.sqrt(v))) / v * i, c.vx += (g *= v) * (p = (d *= d) / (h + d)), c.vy += (y *= v) * p, u.vx -= g * (p = 1 - p), u.vy -= y * p);\n        }\n      }\n    }\n\n    function u(t) {\n      if (t.data) return t.r = e[t.data.index];\n\n      for (var n = t.r = 0; n < 4; ++n) {\n        t[n] && t[n].r > t.r && (t.r = t[n].r);\n      }\n    }\n\n    function c() {\n      if (n) {\n        var r,\n            i,\n            o = n.length;\n\n        for (e = new Array(o), r = 0; r < o; ++r) {\n          i = n[r], e[i.index] = +t(i, r, n);\n        }\n      }\n    }\n\n    return "function" != typeof t && (t = Gu(null == t ? 1 : +t)), a.initialize = function (t, e) {\n      n = t, r = e, c();\n    }, a.iterations = function (t) {\n      return arguments.length ? (o = +t, a) : o;\n    }, a.strength = function (t) {\n      return arguments.length ? (i = +t, a) : i;\n    }, a.radius = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : Gu(+n), c(), a) : t;\n    }, a;\n  }, t.forceLink = function (t) {\n    var n,\n        e,\n        r,\n        i,\n        o,\n        a,\n        u = Zu,\n        c = function c(t) {\n      return 1 / Math.min(i[t.source.index], i[t.target.index]);\n    },\n        f = Gu(30),\n        s = 1;\n\n    function l(r) {\n      for (var i = 0, u = t.length; i < s; ++i) {\n        for (var c, f, l, h, d, p, g, y = 0; y < u; ++y) {\n          f = (c = t[y]).source, h = (l = c.target).x + l.vx - f.x - f.vx || Vu(a), d = l.y + l.vy - f.y - f.vy || Vu(a), h *= p = ((p = Math.sqrt(h * h + d * d)) - e[y]) / p * r * n[y], d *= p, l.vx -= h * (g = o[y]), l.vy -= d * g, f.vx += h * (g = 1 - g), f.vy += d * g;\n        }\n      }\n    }\n\n    function h() {\n      if (r) {\n        var a,\n            c,\n            f = r.length,\n            s = t.length,\n            l = new Map(r.map(function (t, n) {\n          return [u(t, n, r), t];\n        }));\n\n        for (a = 0, i = new Array(f); a < s; ++a) {\n          (c = t[a]).index = a, "object" != _typeof(c.source) && (c.source = Ku(l, c.source)), "object" != _typeof(c.target) && (c.target = Ku(l, c.target)), i[c.source.index] = (i[c.source.index] || 0) + 1, i[c.target.index] = (i[c.target.index] || 0) + 1;\n        }\n\n        for (a = 0, o = new Array(s); a < s; ++a) {\n          c = t[a], o[a] = i[c.source.index] / (i[c.source.index] + i[c.target.index]);\n        }\n\n        n = new Array(s), d(), e = new Array(s), p();\n      }\n    }\n\n    function d() {\n      if (r) for (var e = 0, i = t.length; e < i; ++e) {\n        n[e] = +c(t[e], e, t);\n      }\n    }\n\n    function p() {\n      if (r) for (var n = 0, i = t.length; n < i; ++n) {\n        e[n] = +f(t[n], n, t);\n      }\n    }\n\n    return null == t && (t = []), l.initialize = function (t, n) {\n      r = t, a = n, h();\n    }, l.links = function (n) {\n      return arguments.length ? (t = n, h(), l) : t;\n    }, l.id = function (t) {\n      return arguments.length ? (u = t, l) : u;\n    }, l.iterations = function (t) {\n      return arguments.length ? (s = +t, l) : s;\n    }, l.strength = function (t) {\n      return arguments.length ? (c = "function" == typeof t ? t : Gu(+t), d(), l) : c;\n    }, l.distance = function (t) {\n      return arguments.length ? (f = "function" == typeof t ? t : Gu(+t), p(), l) : f;\n    }, l;\n  }, t.forceManyBody = function () {\n    var t,\n        n,\n        e,\n        r,\n        i,\n        o = Gu(-30),\n        a = 1,\n        u = 1 / 0,\n        c = .81;\n\n    function f(e) {\n      var i,\n          o = t.length,\n          a = Lu(t, Ju, tc).visitAfter(l);\n\n      for (r = e, i = 0; i < o; ++i) {\n        n = t[i], a.visit(h);\n      }\n    }\n\n    function s() {\n      if (t) {\n        var n,\n            e,\n            r = t.length;\n\n        for (i = new Array(r), n = 0; n < r; ++n) {\n          e = t[n], i[e.index] = +o(e, n, t);\n        }\n      }\n    }\n\n    function l(t) {\n      var n,\n          e,\n          r,\n          o,\n          a,\n          u = 0,\n          c = 0;\n\n      if (t.length) {\n        for (r = o = a = 0; a < 4; ++a) {\n          (n = t[a]) && (e = Math.abs(n.value)) && (u += n.value, c += e, r += e * n.x, o += e * n.y);\n        }\n\n        t.x = r / c, t.y = o / c;\n      } else {\n        (n = t).x = n.data.x, n.y = n.data.y;\n\n        do {\n          u += i[n.data.index];\n        } while (n = n.next);\n      }\n\n      t.value = u;\n    }\n\n    function h(t, o, f, s) {\n      if (!t.value) return !0;\n      var l = t.x - n.x,\n          h = t.y - n.y,\n          d = s - o,\n          p = l * l + h * h;\n      if (d * d / c < p) return p < u && (0 === l && (p += (l = Vu(e)) * l), 0 === h && (p += (h = Vu(e)) * h), p < a && (p = Math.sqrt(a * p)), n.vx += l * t.value * r / p, n.vy += h * t.value * r / p), !0;\n\n      if (!(t.length || p >= u)) {\n        (t.data !== n || t.next) && (0 === l && (p += (l = Vu(e)) * l), 0 === h && (p += (h = Vu(e)) * h), p < a && (p = Math.sqrt(a * p)));\n\n        do {\n          t.data !== n && (d = i[t.data.index] * r / p, n.vx += l * d, n.vy += h * d);\n        } while (t = t.next);\n      }\n    }\n\n    return f.initialize = function (n, r) {\n      t = n, e = r, s();\n    }, f.strength = function (t) {\n      return arguments.length ? (o = "function" == typeof t ? t : Gu(+t), s(), f) : o;\n    }, f.distanceMin = function (t) {\n      return arguments.length ? (a = t * t, f) : Math.sqrt(a);\n    }, f.distanceMax = function (t) {\n      return arguments.length ? (u = t * t, f) : Math.sqrt(u);\n    }, f.theta = function (t) {\n      return arguments.length ? (c = t * t, f) : Math.sqrt(c);\n    }, f;\n  }, t.forceRadial = function (t, n, e) {\n    var r,\n        i,\n        o,\n        a = Gu(.1);\n\n    function u(t) {\n      for (var a = 0, u = r.length; a < u; ++a) {\n        var c = r[a],\n            f = c.x - n || 1e-6,\n            s = c.y - e || 1e-6,\n            l = Math.sqrt(f * f + s * s),\n            h = (o[a] - l) * i[a] * t / l;\n        c.vx += f * h, c.vy += s * h;\n      }\n    }\n\n    function c() {\n      if (r) {\n        var n,\n            e = r.length;\n\n        for (i = new Array(e), o = new Array(e), n = 0; n < e; ++n) {\n          o[n] = +t(r[n], n, r), i[n] = isNaN(o[n]) ? 0 : +a(r[n], n, r);\n        }\n      }\n    }\n\n    return "function" != typeof t && (t = Gu(+t)), null == n && (n = 0), null == e && (e = 0), u.initialize = function (t) {\n      r = t, c();\n    }, u.strength = function (t) {\n      return arguments.length ? (a = "function" == typeof t ? t : Gu(+t), c(), u) : a;\n    }, u.radius = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : Gu(+n), c(), u) : t;\n    }, u.x = function (t) {\n      return arguments.length ? (n = +t, u) : n;\n    }, u.y = function (t) {\n      return arguments.length ? (e = +t, u) : e;\n    }, u;\n  }, t.forceSimulation = function (t) {\n    var n,\n        e = 1,\n        r = .001,\n        i = 1 - Math.pow(r, 1 / 300),\n        o = 0,\n        a = .6,\n        u = new Map(),\n        c = ri(l),\n        f = pt("tick", "end"),\n        s = function () {\n      var t = 1;\n      return function () {\n        return (t = (1664525 * t + 1013904223) % Qu) / Qu;\n      };\n    }();\n\n    function l() {\n      h(), f.call("tick", n), e < r && (c.stop(), f.call("end", n));\n    }\n\n    function h(r) {\n      var c,\n          f,\n          s = t.length;\n      void 0 === r && (r = 1);\n\n      for (var l = 0; l < r; ++l) {\n        for (e += (o - e) * i, u.forEach(function (t) {\n          t(e);\n        }), c = 0; c < s; ++c) {\n          null == (f = t[c]).fx ? f.x += f.vx *= a : (f.x = f.fx, f.vx = 0), null == f.fy ? f.y += f.vy *= a : (f.y = f.fy, f.vy = 0);\n        }\n      }\n\n      return n;\n    }\n\n    function d() {\n      for (var n, e = 0, r = t.length; e < r; ++e) {\n        if ((n = t[e]).index = e, null != n.fx && (n.x = n.fx), null != n.fy && (n.y = n.fy), isNaN(n.x) || isNaN(n.y)) {\n          var i = 10 * Math.sqrt(.5 + e),\n              o = e * nc;\n          n.x = i * Math.cos(o), n.y = i * Math.sin(o);\n        }\n\n        (isNaN(n.vx) || isNaN(n.vy)) && (n.vx = n.vy = 0);\n      }\n    }\n\n    function p(n) {\n      return n.initialize && n.initialize(t, s), n;\n    }\n\n    return null == t && (t = []), d(), n = {\n      tick: h,\n      restart: function restart() {\n        return c.restart(l), n;\n      },\n      stop: function stop() {\n        return c.stop(), n;\n      },\n      nodes: function nodes(e) {\n        return arguments.length ? (t = e, d(), u.forEach(p), n) : t;\n      },\n      alpha: function alpha(t) {\n        return arguments.length ? (e = +t, n) : e;\n      },\n      alphaMin: function alphaMin(t) {\n        return arguments.length ? (r = +t, n) : r;\n      },\n      alphaDecay: function alphaDecay(t) {\n        return arguments.length ? (i = +t, n) : +i;\n      },\n      alphaTarget: function alphaTarget(t) {\n        return arguments.length ? (o = +t, n) : o;\n      },\n      velocityDecay: function velocityDecay(t) {\n        return arguments.length ? (a = 1 - t, n) : 1 - a;\n      },\n      randomSource: function randomSource(t) {\n        return arguments.length ? (s = t, u.forEach(p), n) : s;\n      },\n      force: function force(t, e) {\n        return arguments.length > 1 ? (null == e ? u["delete"](t) : u.set(t, p(e)), n) : u.get(t);\n      },\n      find: function find(n, e, r) {\n        var i,\n            o,\n            a,\n            u,\n            c,\n            f = 0,\n            s = t.length;\n\n        for (null == r ? r = 1 / 0 : r *= r, f = 0; f < s; ++f) {\n          (a = (i = n - (u = t[f]).x) * i + (o = e - u.y) * o) < r && (c = u, r = a);\n        }\n\n        return c;\n      },\n      on: function on(t, e) {\n        return arguments.length > 1 ? (f.on(t, e), n) : f.on(t);\n      }\n    };\n  }, t.forceX = function (t) {\n    var n,\n        e,\n        r,\n        i = Gu(.1);\n\n    function o(t) {\n      for (var i, o = 0, a = n.length; o < a; ++o) {\n        (i = n[o]).vx += (r[o] - i.x) * e[o] * t;\n      }\n    }\n\n    function a() {\n      if (n) {\n        var o,\n            a = n.length;\n\n        for (e = new Array(a), r = new Array(a), o = 0; o < a; ++o) {\n          e[o] = isNaN(r[o] = +t(n[o], o, n)) ? 0 : +i(n[o], o, n);\n        }\n      }\n    }\n\n    return "function" != typeof t && (t = Gu(null == t ? 0 : +t)), o.initialize = function (t) {\n      n = t, a();\n    }, o.strength = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : Gu(+t), a(), o) : i;\n    }, o.x = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : Gu(+n), a(), o) : t;\n    }, o;\n  }, t.forceY = function (t) {\n    var n,\n        e,\n        r,\n        i = Gu(.1);\n\n    function o(t) {\n      for (var i, o = 0, a = n.length; o < a; ++o) {\n        (i = n[o]).vy += (r[o] - i.y) * e[o] * t;\n      }\n    }\n\n    function a() {\n      if (n) {\n        var o,\n            a = n.length;\n\n        for (e = new Array(a), r = new Array(a), o = 0; o < a; ++o) {\n          e[o] = isNaN(r[o] = +t(n[o], o, n)) ? 0 : +i(n[o], o, n);\n        }\n      }\n    }\n\n    return "function" != typeof t && (t = Gu(null == t ? 0 : +t)), o.initialize = function (t) {\n      n = t, a();\n    }, o.strength = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : Gu(+t), a(), o) : i;\n    }, o.y = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : Gu(+n), a(), o) : t;\n    }, o;\n  }, t.formatDefaultLocale = gc, t.formatLocale = pc, t.formatSpecifier = ac, t.fsum = function (t, n) {\n    var e = new g();\n\n    if (void 0 === n) {\n      var _iterator41 = _createForOfIteratorHelper(t),\n          _step41;\n\n      try {\n        for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {\n          var _n62 = _step41.value;\n          (_n62 = +_n62) && e.add(_n62);\n        }\n      } catch (err) {\n        _iterator41.e(err);\n      } finally {\n        _iterator41.f();\n      }\n    } else {\n      var _r30 = -1;\n\n      var _iterator42 = _createForOfIteratorHelper(t),\n          _step42;\n\n      try {\n        for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {\n          var _i28 = _step42.value;\n          (_i28 = +n(_i28, ++_r30, t)) && e.add(_i28);\n        }\n      } catch (err) {\n        _iterator42.e(err);\n      } finally {\n        _iterator42.f();\n      }\n    }\n\n    return +e;\n  }, t.geoAlbers = bh, t.geoAlbersUsa = function () {\n    var t,\n        n,\n        e,\n        r,\n        i,\n        o,\n        a = bh(),\n        u = _h().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),\n        c = _h().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),\n        f = {\n      point: function point(t, n) {\n        o = [t, n];\n      }\n    };\n\n    function s(t) {\n      var n = t[0],\n          a = t[1];\n      return o = null, e.point(n, a), o || (r.point(n, a), o) || (i.point(n, a), o);\n    }\n\n    function l() {\n      return t = n = null, s;\n    }\n\n    return s.invert = function (t) {\n      var n = a.scale(),\n          e = a.translate(),\n          r = (t[0] - e[0]) / n,\n          i = (t[1] - e[1]) / n;\n      return (i >= .12 && i < .234 && r >= -.425 && r < -.214 ? u : i >= .166 && i < .234 && r >= -.214 && r < -.115 ? c : a).invert(t);\n    }, s.stream = function (e) {\n      return t && n === e ? t : (r = [a.stream(n = e), u.stream(e), c.stream(e)], i = r.length, t = {\n        point: function point(t, n) {\n          for (var e = -1; ++e < i;) {\n            r[e].point(t, n);\n          }\n        },\n        sphere: function sphere() {\n          for (var t = -1; ++t < i;) {\n            r[t].sphere();\n          }\n        },\n        lineStart: function lineStart() {\n          for (var t = -1; ++t < i;) {\n            r[t].lineStart();\n          }\n        },\n        lineEnd: function lineEnd() {\n          for (var t = -1; ++t < i;) {\n            r[t].lineEnd();\n          }\n        },\n        polygonStart: function polygonStart() {\n          for (var t = -1; ++t < i;) {\n            r[t].polygonStart();\n          }\n        },\n        polygonEnd: function polygonEnd() {\n          for (var t = -1; ++t < i;) {\n            r[t].polygonEnd();\n          }\n        }\n      });\n      var r, i;\n    }, s.precision = function (t) {\n      return arguments.length ? (a.precision(t), u.precision(t), c.precision(t), l()) : a.precision();\n    }, s.scale = function (t) {\n      return arguments.length ? (a.scale(t), u.scale(.35 * t), c.scale(t), s.translate(a.translate())) : a.scale();\n    }, s.translate = function (t) {\n      if (!arguments.length) return a.translate();\n      var n = a.scale(),\n          o = +t[0],\n          s = +t[1];\n      return e = a.translate(t).clipExtent([[o - .455 * n, s - .238 * n], [o + .455 * n, s + .238 * n]]).stream(f), r = u.translate([o - .307 * n, s + .201 * n]).clipExtent([[o - .425 * n + bc, s + .12 * n + bc], [o - .214 * n - bc, s + .234 * n - bc]]).stream(f), i = c.translate([o - .205 * n, s + .212 * n]).clipExtent([[o - .214 * n + bc, s + .166 * n + bc], [o - .115 * n - bc, s + .234 * n - bc]]).stream(f), l();\n    }, s.fitExtent = function (t, n) {\n      return ah(s, t, n);\n    }, s.fitSize = function (t, n) {\n      return uh(s, t, n);\n    }, s.fitWidth = function (t, n) {\n      return ch(s, t, n);\n    }, s.fitHeight = function (t, n) {\n      return fh(s, t, n);\n    }, s.scale(1070);\n  }, t.geoArea = function (t) {\n    return pf = new g(), Wc(t, gf), 2 * pf;\n  }, t.geoAzimuthalEqualArea = function () {\n    return ph(wh).scale(124.75).clipAngle(179.999);\n  }, t.geoAzimuthalEqualAreaRaw = wh, t.geoAzimuthalEquidistant = function () {\n    return ph(Mh).scale(79.4188).clipAngle(179.999);\n  }, t.geoAzimuthalEquidistantRaw = Mh, t.geoBounds = function (t) {\n    var n, e, r, i, o, a, u;\n\n    if (of = rf = -(nf = ef = 1 / 0), lf = [], Wc(t, jf), e = lf.length) {\n      for (lf.sort(Qf), n = 1, o = [r = lf[0]]; n < e; ++n) {\n        Jf(r, (i = lf[n])[0]) || Jf(r, i[1]) ? (Kf(r[0], i[1]) > Kf(r[0], r[1]) && (r[1] = i[1]), Kf(i[0], r[1]) > Kf(r[0], r[1]) && (r[0] = i[0])) : o.push(r = i);\n      }\n\n      for (a = -1 / 0, n = 0, r = o[e = o.length - 1]; n <= e; r = i, ++n) {\n        i = o[n], (u = Kf(r[1], i[0])) > a && (a = u, nf = i[0], rf = r[1]);\n      }\n    }\n\n    return lf = hf = null, nf === 1 / 0 || ef === 1 / 0 ? [[NaN, NaN], [NaN, NaN]] : [[nf, ef], [rf, of]];\n  }, t.geoCentroid = function (t) {\n    Ef = kf = Nf = Cf = Pf = zf = Df = qf = 0, Rf = new g(), Ff = new g(), Of = new g(), Wc(t, ts);\n    var n = +Rf,\n        e = +Ff,\n        r = +Of,\n        i = Dc(n, e, r);\n    return i < mc && (n = zf, e = Df, r = qf, kf < bc && (n = Nf, e = Cf, r = Pf), (i = Dc(n, e, r)) < mc) ? [NaN, NaN] : [Nc(e, n) * Tc, Yc(r / i) * Tc];\n  }, t.geoCircle = function () {\n    var t,\n        n,\n        e = ls([0, 0]),\n        r = ls(90),\n        i = ls(6),\n        o = {\n      point: function point(e, r) {\n        t.push(e = n(e, r)), e[0] *= Tc, e[1] *= Tc;\n      }\n    };\n\n    function a() {\n      var a = e.apply(this, arguments),\n          u = r.apply(this, arguments) * Sc,\n          c = i.apply(this, arguments) * Sc;\n      return t = [], n = ps(-a[0] * Sc, -a[1] * Sc, 0).invert, bs(o, u, c, 1), a = {\n        type: "Polygon",\n        coordinates: [t]\n      }, t = n = null, a;\n    }\n\n    return a.center = function (t) {\n      return arguments.length ? (e = "function" == typeof t ? t : ls([+t[0], +t[1]]), a) : e;\n    }, a.radius = function (t) {\n      return arguments.length ? (r = "function" == typeof t ? t : ls(+t), a) : r;\n    }, a.precision = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : ls(+t), a) : i;\n    }, a;\n  }, t.geoClipAntimeridian = Ps, t.geoClipCircle = zs, t.geoClipExtent = function () {\n    var t,\n        n,\n        e,\n        r = 0,\n        i = 0,\n        o = 960,\n        a = 500;\n    return e = {\n      stream: function stream(e) {\n        return t && n === e ? t : t = Is(r, i, o, a)(n = e);\n      },\n      extent: function extent(u) {\n        return arguments.length ? (r = +u[0][0], i = +u[0][1], o = +u[1][0], a = +u[1][1], t = n = null, e) : [[r, i], [o, a]];\n      }\n    };\n  }, t.geoClipRectangle = Is, t.geoConicConformal = function () {\n    return yh(Eh).scale(109.5).parallels([30, 30]);\n  }, t.geoConicConformalRaw = Eh, t.geoConicEqualArea = _h, t.geoConicEqualAreaRaw = vh, t.geoConicEquidistant = function () {\n    return yh(Nh).scale(131.154).center([0, 13.9389]);\n  }, t.geoConicEquidistantRaw = Nh, t.geoContains = function (t, n) {\n    return (t && $s.hasOwnProperty(t.type) ? $s[t.type] : Zs)(t, n);\n  }, t.geoDistance = Vs, t.geoEqualEarth = function () {\n    return ph(Rh).scale(177.158);\n  }, t.geoEqualEarthRaw = Rh, t.geoEquirectangular = function () {\n    return ph(kh).scale(152.63);\n  }, t.geoEquirectangularRaw = kh, t.geoGnomonic = function () {\n    return ph(Fh).scale(144.049).clipAngle(60);\n  }, t.geoGnomonicRaw = Fh, t.geoGraticule = il, t.geoGraticule10 = function () {\n    return il()();\n  }, t.geoIdentity = function () {\n    var t,\n        n,\n        e,\n        r,\n        i,\n        o,\n        a,\n        u = 1,\n        c = 0,\n        f = 0,\n        s = 1,\n        l = 1,\n        h = 0,\n        d = null,\n        p = 1,\n        g = 1,\n        y = rh({\n      point: function point(t, n) {\n        var e = b([t, n]);\n        this.stream.point(e[0], e[1]);\n      }\n    }),\n        v = fl;\n\n    function _() {\n      return p = u * s, g = u * l, o = a = null, b;\n    }\n\n    function b(e) {\n      var r = e[0] * p,\n          i = e[1] * g;\n\n      if (h) {\n        var o = i * t - r * n;\n        r = r * t + i * n, i = o;\n      }\n\n      return [r + c, i + f];\n    }\n\n    return b.invert = function (e) {\n      var r = e[0] - c,\n          i = e[1] - f;\n\n      if (h) {\n        var o = i * t + r * n;\n        r = r * t - i * n, i = o;\n      }\n\n      return [r / p, i / g];\n    }, b.stream = function (t) {\n      return o && a === t ? o : o = y(v(a = t));\n    }, b.postclip = function (t) {\n      return arguments.length ? (v = t, d = e = r = i = null, _()) : v;\n    }, b.clipExtent = function (t) {\n      return arguments.length ? (v = null == t ? (d = e = r = i = null, fl) : Is(d = +t[0][0], e = +t[0][1], r = +t[1][0], i = +t[1][1]), _()) : null == d ? null : [[d, e], [r, i]];\n    }, b.scale = function (t) {\n      return arguments.length ? (u = +t, _()) : u;\n    }, b.translate = function (t) {\n      return arguments.length ? (c = +t[0], f = +t[1], _()) : [c, f];\n    }, b.angle = function (e) {\n      return arguments.length ? (n = Fc(h = e % 360 * Sc), t = Cc(h), _()) : h * Tc;\n    }, b.reflectX = function (t) {\n      return arguments.length ? (s = t ? -1 : 1, _()) : s < 0;\n    }, b.reflectY = function (t) {\n      return arguments.length ? (l = t ? -1 : 1, _()) : l < 0;\n    }, b.fitExtent = function (t, n) {\n      return ah(b, t, n);\n    }, b.fitSize = function (t, n) {\n      return uh(b, t, n);\n    }, b.fitWidth = function (t, n) {\n      return ch(b, t, n);\n    }, b.fitHeight = function (t, n) {\n      return fh(b, t, n);\n    }, b;\n  }, t.geoInterpolate = function (t, n) {\n    var e = t[0] * Sc,\n        r = t[1] * Sc,\n        i = n[0] * Sc,\n        o = n[1] * Sc,\n        a = Cc(r),\n        u = Fc(r),\n        c = Cc(o),\n        f = Fc(o),\n        s = a * Cc(e),\n        l = a * Fc(e),\n        h = c * Cc(i),\n        d = c * Fc(i),\n        p = 2 * Yc(Uc(Lc(o - r) + a * c * Lc(i - e))),\n        g = Fc(p),\n        y = p ? function (t) {\n      var n = Fc(t *= p) / g,\n          e = Fc(p - t) / g,\n          r = e * s + n * h,\n          i = e * l + n * d,\n          o = e * u + n * f;\n      return [Nc(i, r) * Tc, Nc(o, Uc(r * r + i * i)) * Tc];\n    } : function () {\n      return [e * Tc, r * Tc];\n    };\n    return y.distance = p, y;\n  }, t.geoLength = Hs, t.geoMercator = function () {\n    return Th(Ah).scale(961 / Ac);\n  }, t.geoMercatorRaw = Ah, t.geoNaturalEarth1 = function () {\n    return ph(Oh).scale(175.295);\n  }, t.geoNaturalEarth1Raw = Oh, t.geoOrthographic = function () {\n    return ph(Uh).scale(249.5).clipAngle(90.000001);\n  }, t.geoOrthographicRaw = Uh, t.geoPath = function (t, n) {\n    var e,\n        r,\n        i = 4.5;\n\n    function o(t) {\n      return t && ("function" == typeof i && r.pointRadius(+i.apply(this, arguments)), Wc(t, e(r))), r.result();\n    }\n\n    return o.area = function (t) {\n      return Wc(t, e(hl)), hl.result();\n    }, o.measure = function (t) {\n      return Wc(t, e(Ql)), Ql.result();\n    }, o.bounds = function (t) {\n      return Wc(t, e(xl)), xl.result();\n    }, o.centroid = function (t) {\n      return Wc(t, e(Rl)), Rl.result();\n    }, o.projection = function (n) {\n      return arguments.length ? (e = null == n ? (t = null, fl) : (t = n).stream, o) : t;\n    }, o.context = function (t) {\n      return arguments.length ? (r = null == t ? (n = null, new nh()) : new Xl(n = t), "function" != typeof i && r.pointRadius(i), o) : n;\n    }, o.pointRadius = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : (r.pointRadius(+t), +t), o) : i;\n    }, o.projection(t).context(n);\n  }, t.geoProjection = ph, t.geoProjectionMutator = gh, t.geoRotation = _s, t.geoStereographic = function () {\n    return ph(Ih).scale(250).clipAngle(142);\n  }, t.geoStereographicRaw = Ih, t.geoStream = Wc, t.geoTransform = function (t) {\n    return {\n      stream: rh(t)\n    };\n  }, t.geoTransverseMercator = function () {\n    var t = Th(Bh),\n        n = t.center,\n        e = t.rotate;\n    return t.center = function (t) {\n      return arguments.length ? n([-t[1], t[0]]) : [(t = n())[1], -t[0]];\n    }, t.rotate = function (t) {\n      return arguments.length ? e([t[0], t[1], t.length > 2 ? t[2] + 90 : 90]) : [(t = e())[0], t[1], t[2] - 90];\n    }, e([0, 0, 90]).scale(159.155);\n  }, t.geoTransverseMercatorRaw = Bh, t.gray = function (t, n) {\n    return new Fe(t, 0, 0, null == n ? 1 : n);\n  }, t.greatest = function (t) {\n    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : n;\n    var r,\n        i = !1;\n\n    if (1 === e.length) {\n      var _o21;\n\n      var _iterator43 = _createForOfIteratorHelper(t),\n          _step43;\n\n      try {\n        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {\n          var _a20 = _step43.value;\n\n          var _t31 = e(_a20);\n\n          (i ? n(_t31, _o21) > 0 : 0 === n(_t31, _t31)) && (r = _a20, _o21 = _t31, i = !0);\n        }\n      } catch (err) {\n        _iterator43.e(err);\n      } finally {\n        _iterator43.f();\n      }\n    } else {\n      var _iterator44 = _createForOfIteratorHelper(t),\n          _step44;\n\n      try {\n        for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {\n          var _n63 = _step44.value;\n          (i ? e(_n63, r) > 0 : 0 === e(_n63, _n63)) && (r = _n63, i = !0);\n        }\n      } catch (err) {\n        _iterator44.e(err);\n      } finally {\n        _iterator44.f();\n      }\n    }\n\n    return r;\n  }, t.greatestIndex = function (t) {\n    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : n;\n    if (1 === e.length) return G(t, e);\n    var r,\n        i = -1,\n        o = -1;\n\n    var _iterator45 = _createForOfIteratorHelper(t),\n        _step45;\n\n    try {\n      for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {\n        var _n64 = _step45.value;\n        ++o, (i < 0 ? 0 === e(_n64, _n64) : e(_n64, r) > 0) && (r = _n64, i = o);\n      }\n    } catch (err) {\n      _iterator45.e(err);\n    } finally {\n      _iterator45.f();\n    }\n\n    return i;\n  }, t.group = M, t.groupSort = function (t, e, r) {\n    return (1 === e.length ? k(A(t, e, r), function (_ref9, _ref10) {\n      var _ref11 = _slicedToArray(_ref9, 2),\n          t = _ref11[0],\n          e = _ref11[1];\n\n      var _ref12 = _slicedToArray(_ref10, 2),\n          r = _ref12[0],\n          i = _ref12[1];\n\n      return n(e, i) || n(t, r);\n    }) : k(M(t, r), function (_ref13, _ref14) {\n      var _ref15 = _slicedToArray(_ref13, 2),\n          t = _ref15[0],\n          r = _ref15[1];\n\n      var _ref16 = _slicedToArray(_ref14, 2),\n          i = _ref16[0],\n          o = _ref16[1];\n\n      return e(r, o) || n(t, i);\n    })).map(function (_ref17) {\n      var _ref18 = _slicedToArray(_ref17, 1),\n          t = _ref18[0];\n\n      return t;\n    });\n  }, t.groups = function (t) {\n    for (var _len6 = arguments.length, n = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      n[_key6 - 1] = arguments[_key6];\n    }\n\n    return S(t, Array.from, w, n);\n  }, t.hcl = Le, t.hierarchy = Xh, t.histogram = I, t.hsl = Ae, t.html = Fu, t.image = function (t, n) {\n    return new Promise(function (e, r) {\n      var i = new Image();\n\n      for (var o in n) {\n        i[o] = n[o];\n      }\n\n      i.onerror = r, i.onload = function () {\n        e(i);\n      }, i.src = t;\n    });\n  }, t.index = function (t) {\n    for (var _len7 = arguments.length, n = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      n[_key7 - 1] = arguments[_key7];\n    }\n\n    return S(t, w, T, n);\n  }, t.indexes = function (t) {\n    for (var _len8 = arguments.length, n = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      n[_key8 - 1] = arguments[_key8];\n    }\n\n    return S(t, Array.from, T, n);\n  }, t.interpolate = Mr, t.interpolateArray = function (t, n) {\n    return (gr(n) ? pr : yr)(t, n);\n  }, t.interpolateBasis = rr, t.interpolateBasisClosed = ir, t.interpolateBlues = D_, t.interpolateBrBG = Xv, t.interpolateBuGn = f_, t.interpolateBuPu = l_, t.interpolateCividis = function (t) {\n    return t = Math.max(0, Math.min(1, t)), "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - 2710.57 * t))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - 67.37 * t))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - 2475.67 * t))))))) + ")";\n  }, t.interpolateCool = G_, t.interpolateCubehelix = Yr, t.interpolateCubehelixDefault = H_, t.interpolateCubehelixLong = Lr, t.interpolateDate = vr, t.interpolateDiscrete = function (t) {\n    var n = t.length;\n    return function (e) {\n      return t[Math.max(0, Math.min(n - 1, Math.floor(e * n)))];\n    };\n  }, t.interpolateGnBu = d_, t.interpolateGreens = R_, t.interpolateGreys = O_, t.interpolateHcl = Ur, t.interpolateHclLong = Ir, t.interpolateHsl = Rr, t.interpolateHslLong = Fr, t.interpolateHue = function (t, n) {\n    var e = ur(+t, +n);\n    return function (t) {\n      var n = e(t);\n      return n - 360 * Math.floor(n / 360);\n    };\n  }, t.interpolateInferno = tb, t.interpolateLab = function (t, n) {\n    var e = fr((t = Re(t)).l, (n = Re(n)).l),\n        r = fr(t.a, n.a),\n        i = fr(t.b, n.b),\n        o = fr(t.opacity, n.opacity);\n    return function (n) {\n      return t.l = e(n), t.a = r(n), t.b = i(n), t.opacity = o(n), t + "";\n    };\n  }, t.interpolateMagma = J_, t.interpolateNumber = _r, t.interpolateNumberArray = pr, t.interpolateObject = br, t.interpolateOrRd = g_, t.interpolateOranges = j_, t.interpolatePRGn = Vv, t.interpolatePiYG = Wv, t.interpolatePlasma = nb, t.interpolatePuBu = b_, t.interpolatePuBuGn = v_, t.interpolatePuOr = Kv, t.interpolatePuRd = x_, t.interpolatePurples = I_, t.interpolateRainbow = function (t) {\n    (t < 0 || t > 1) && (t -= Math.floor(t));\n    var n = Math.abs(t - .5);\n    return V_.h = 360 * t - 100, V_.s = 1.5 - 1.5 * n, V_.l = .8 - .9 * n, V_ + "";\n  }, t.interpolateRdBu = Jv, t.interpolateRdGy = n_, t.interpolateRdPu = M_, t.interpolateRdYlBu = r_, t.interpolateRdYlGn = o_, t.interpolateReds = Y_, t.interpolateRgb = sr, t.interpolateRgbBasis = hr, t.interpolateRgbBasisClosed = dr, t.interpolateRound = Ar, t.interpolateSinebow = function (t) {\n    var n;\n    return t = (.5 - t) * Math.PI, $_.r = 255 * (n = Math.sin(t)) * n, $_.g = 255 * (n = Math.sin(t + W_)) * n, $_.b = 255 * (n = Math.sin(t + Z_)) * n, $_ + "";\n  }, t.interpolateSpectral = u_, t.interpolateString = wr, t.interpolateTransformCss = Cr, t.interpolateTransformSvg = Pr, t.interpolateTurbo = function (t) {\n    return t = Math.max(0, Math.min(1, t)), "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - 14825.05 * t))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + 707.56 * t))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - 6838.66 * t))))))) + ")";\n  }, t.interpolateViridis = Q_, t.interpolateWarm = X_, t.interpolateYlGn = E_, t.interpolateYlGnBu = T_, t.interpolateYlOrBr = N_, t.interpolateYlOrRd = P_, t.interpolateZoom = Dr, t.interrupt = gi, t.intersection = function (t) {\n    for (var _len9 = arguments.length, n = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n      n[_key9 - 1] = arguments[_key9];\n    }\n\n    t = new Set(t), n = n.map(et);\n\n    var _iterator46 = _createForOfIteratorHelper(t),\n        _step46;\n\n    try {\n      t: for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {\n        var _e36 = _step46.value;\n\n        var _iterator47 = _createForOfIteratorHelper(n),\n            _step47;\n\n        try {\n          for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {\n            var _r31 = _step47.value;\n\n            if (!_r31.has(_e36)) {\n              t["delete"](_e36);\n              continue t;\n            }\n          }\n        } catch (err) {\n          _iterator47.e(err);\n        } finally {\n          _iterator47.f();\n        }\n      }\n    } catch (err) {\n      _iterator46.e(err);\n    } finally {\n      _iterator46.f();\n    }\n\n    return t;\n  }, t.interval = function (t, n, e) {\n    var r = new ei(),\n        i = n;\n    return null == n ? (r.restart(t, n, e), r) : (r._restart = r.restart, r.restart = function (t, n, e) {\n      n = +n, e = null == e ? ti() : +e, r._restart(function o(a) {\n        a += i, r._restart(o, i += n, e), t(a);\n      }, n, e);\n    }, r.restart(t, n, e), r);\n  }, t.isoFormat = yv, t.isoParse = vv, t.json = function (t, n) {\n    return fetch(t, n).then(Du);\n  }, t.lab = Re, t.lch = function (t, n, e, r) {\n    return 1 === arguments.length ? Ye(t) : new je(e, n, t, null == r ? 1 : r);\n  }, t.least = function (t) {\n    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : n;\n    var r,\n        i = !1;\n\n    if (1 === e.length) {\n      var _o22;\n\n      var _iterator48 = _createForOfIteratorHelper(t),\n          _step48;\n\n      try {\n        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {\n          var _a21 = _step48.value;\n\n          var _t32 = e(_a21);\n\n          (i ? n(_t32, _o22) < 0 : 0 === n(_t32, _t32)) && (r = _a21, _o22 = _t32, i = !0);\n        }\n      } catch (err) {\n        _iterator48.e(err);\n      } finally {\n        _iterator48.f();\n      }\n    } else {\n      var _iterator49 = _createForOfIteratorHelper(t),\n          _step49;\n\n      try {\n        for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {\n          var _n65 = _step49.value;\n          (i ? e(_n65, r) < 0 : 0 === e(_n65, _n65)) && (r = _n65, i = !0);\n        }\n      } catch (err) {\n        _iterator49.e(err);\n      } finally {\n        _iterator49.f();\n      }\n    }\n\n    return r;\n  }, t.leastIndex = K, t.line = Nb, t.lineRadial = Ob, t.linkHorizontal = function () {\n    return Lb(jb);\n  }, t.linkRadial = function () {\n    var t = Lb(Xb);\n    return t.angle = t.x, delete t.x, t.radius = t.y, delete t.y, t;\n  }, t.linkVertical = function () {\n    return Lb(Hb);\n  }, t.local = Rn, t.map = function (t, n) {\n    if ("function" != typeof t[Symbol.iterator]) throw new TypeError("values is not iterable");\n    if ("function" != typeof n) throw new TypeError("mapper is not a function");\n    return Array.from(t, function (e, r) {\n      return n(e, r, t);\n    });\n  }, t.matcher = Ct, t.max = B, t.maxIndex = G, t.mean = function (t, n) {\n    var e = 0,\n        r = 0;\n\n    if (void 0 === n) {\n      var _iterator50 = _createForOfIteratorHelper(t),\n          _step50;\n\n      try {\n        for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {\n          var _n66 = _step50.value;\n          null != _n66 && (_n66 = +_n66) >= _n66 && (++e, r += _n66);\n        }\n      } catch (err) {\n        _iterator50.e(err);\n      } finally {\n        _iterator50.f();\n      }\n    } else {\n      var _i29 = -1;\n\n      var _iterator51 = _createForOfIteratorHelper(t),\n          _step51;\n\n      try {\n        for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {\n          var _o23 = _step51.value;\n          null != (_o23 = n(_o23, ++_i29, t)) && (_o23 = +_o23) >= _o23 && (++e, r += _o23);\n        }\n      } catch (err) {\n        _iterator51.e(err);\n      } finally {\n        _iterator51.f();\n      }\n    }\n\n    if (e) return r / e;\n  }, t.median = function (t, n) {\n    return H(t, .5, n);\n  }, t.merge = V, t.min = Y, t.minIndex = $, t.namespace = xt, t.namespaces = mt, t.nice = O, t.now = ti, t.pack = function () {\n    var t = null,\n        n = 1,\n        e = 1,\n        r = hd;\n\n    function i(i) {\n      return i.x = n / 2, i.y = e / 2, t ? i.eachBefore(gd(t)).eachAfter(yd(r, .5)).eachBefore(vd(1)) : i.eachBefore(gd(pd)).eachAfter(yd(hd, 1)).eachAfter(yd(r, i.r / Math.min(n, e))).eachBefore(vd(Math.min(n, e) / (2 * i.r))), i;\n    }\n\n    return i.radius = function (n) {\n      return arguments.length ? (t = sd(n), i) : t;\n    }, i.size = function (t) {\n      return arguments.length ? (n = +t[0], e = +t[1], i) : [n, e];\n    }, i.padding = function (t) {\n      return arguments.length ? (r = "function" == typeof t ? t : dd(+t), i) : r;\n    }, i;\n  }, t.packEnclose = Kh, t.packSiblings = function (t) {\n    return fd(t), t;\n  }, t.pairs = function (t) {\n    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : W;\n    var e = [];\n    var r,\n        i = !1;\n\n    var _iterator52 = _createForOfIteratorHelper(t),\n        _step52;\n\n    try {\n      for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {\n        var _o24 = _step52.value;\n        i && e.push(n(r, _o24)), r = _o24, i = !0;\n      }\n    } catch (err) {\n      _iterator52.e(err);\n    } finally {\n      _iterator52.f();\n    }\n\n    return e;\n  }, t.partition = function () {\n    var t = 1,\n        n = 1,\n        e = 0,\n        r = !1;\n\n    function i(i) {\n      var o = i.height + 1;\n      return i.x0 = i.y0 = e, i.x1 = t, i.y1 = n / o, i.eachBefore(function (t, n) {\n        return function (r) {\n          r.children && bd(r, r.x0, t * (r.depth + 1) / n, r.x1, t * (r.depth + 2) / n);\n          var i = r.x0,\n              o = r.y0,\n              a = r.x1 - e,\n              u = r.y1 - e;\n          a < i && (i = a = (i + a) / 2), u < o && (o = u = (o + u) / 2), r.x0 = i, r.y0 = o, r.x1 = a, r.y1 = u;\n        };\n      }(n, o)), r && i.eachBefore(_d), i;\n    }\n\n    return i.round = function (t) {\n      return arguments.length ? (r = !!t, i) : r;\n    }, i.size = function (e) {\n      return arguments.length ? (t = +e[0], n = +e[1], i) : [t, n];\n    }, i.padding = function (t) {\n      return arguments.length ? (e = +t, i) : e;\n    }, i;\n  }, t.path = fa, t.permute = E, t.pie = function () {\n    var t = zb,\n        n = Pb,\n        e = null,\n        r = eb(0),\n        i = eb(db),\n        o = eb(0);\n\n    function a(a) {\n      var u,\n          c,\n          f,\n          s,\n          l,\n          h = (a = Ab(a)).length,\n          d = 0,\n          p = new Array(h),\n          g = new Array(h),\n          y = +r.apply(this, arguments),\n          v = Math.min(db, Math.max(-db, i.apply(this, arguments) - y)),\n          _ = Math.min(Math.abs(v) / h, o.apply(this, arguments)),\n          b = _ * (v < 0 ? -1 : 1);\n\n      for (u = 0; u < h; ++u) {\n        (l = g[p[u] = u] = +t(a[u], u, a)) > 0 && (d += l);\n      }\n\n      for (null != n ? p.sort(function (t, e) {\n        return n(g[t], g[e]);\n      }) : null != e && p.sort(function (t, n) {\n        return e(a[t], a[n]);\n      }), u = 0, f = d ? (v - h * b) / d : 0; u < h; ++u, y = s) {\n        c = p[u], s = y + ((l = g[c]) > 0 ? l * f : 0) + b, g[c] = {\n          data: a[c],\n          index: u,\n          value: l,\n          startAngle: y,\n          endAngle: s,\n          padAngle: _\n        };\n      }\n\n      return g;\n    }\n\n    return a.value = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : eb(+n), a) : t;\n    }, a.sortValues = function (t) {\n      return arguments.length ? (n = t, e = null, a) : n;\n    }, a.sort = function (t) {\n      return arguments.length ? (e = t, n = null, a) : e;\n    }, a.startAngle = function (t) {\n      return arguments.length ? (r = "function" == typeof t ? t : eb(+t), a) : r;\n    }, a.endAngle = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : eb(+t), a) : i;\n    }, a.padAngle = function (t) {\n      return arguments.length ? (o = "function" == typeof t ? t : eb(+t), a) : o;\n    }, a;\n  }, t.piecewise = jr, t.pointRadial = Ib, t.pointer = Un, t.pointers = function (t, n) {\n    return t.target && (t = On(t), void 0 === n && (n = t.currentTarget), t = t.touches || [t]), Array.from(t, function (t) {\n      return Un(t, n);\n    });\n  }, t.polygonArea = function (t) {\n    for (var n, e = -1, r = t.length, i = t[r - 1], o = 0; ++e < r;) {\n      n = i, i = t[e], o += n[1] * i[0] - n[0] * i[1];\n    }\n\n    return o / 2;\n  }, t.polygonCentroid = function (t) {\n    for (var n, e, r = -1, i = t.length, o = 0, a = 0, u = t[i - 1], c = 0; ++r < i;) {\n      n = u, u = t[r], c += e = n[0] * u[1] - u[0] * n[1], o += (n[0] + u[0]) * e, a += (n[1] + u[1]) * e;\n    }\n\n    return [o / (c *= 3), a / c];\n  }, t.polygonContains = function (t, n) {\n    for (var e, r, i = t.length, o = t[i - 1], a = n[0], u = n[1], c = o[0], f = o[1], s = !1, l = 0; l < i; ++l) {\n      e = (o = t[l])[0], (r = o[1]) > u != f > u && a < (c - e) * (u - r) / (f - r) + e && (s = !s), c = e, f = r;\n    }\n\n    return s;\n  }, t.polygonHull = function (t) {\n    if ((e = t.length) < 3) return null;\n    var n,\n        e,\n        r = new Array(e),\n        i = new Array(e);\n\n    for (n = 0; n < e; ++n) {\n      r[n] = [+t[n][0], +t[n][1], n];\n    }\n\n    for (r.sort(Fd), n = 0; n < e; ++n) {\n      i[n] = [r[n][0], -r[n][1]];\n    }\n\n    var o = Od(r),\n        a = Od(i),\n        u = a[0] === o[0],\n        c = a[a.length - 1] === o[o.length - 1],\n        f = [];\n\n    for (n = o.length - 1; n >= 0; --n) {\n      f.push(t[r[o[n]][2]]);\n    }\n\n    for (n = +u; n < a.length - c; ++n) {\n      f.push(t[r[a[n]][2]]);\n    }\n\n    return f;\n  }, t.polygonLength = function (t) {\n    for (var n, e, r = -1, i = t.length, o = t[i - 1], a = o[0], u = o[1], c = 0; ++r < i;) {\n      n = a, e = u, n -= a = (o = t[r])[0], e -= u = o[1], c += Math.hypot(n, e);\n    }\n\n    return c;\n  }, t.precisionFixed = yc, t.precisionPrefix = vc, t.precisionRound = _c, t.quadtree = Lu, t.quantile = H, t.quantileSorted = X, t.quantize = function (t, n) {\n    for (var e = new Array(n), r = 0; r < n; ++r) {\n      e[r] = t(r / (n - 1));\n    }\n\n    return e;\n  }, t.quickselect = L, t.radialArea = Ub, t.radialLine = Ob, t.randomBates = Hd, t.randomBernoulli = Vd, t.randomBeta = Zd, t.randomBinomial = Kd, t.randomCauchy = Jd, t.randomExponential = Xd, t.randomGamma = Wd, t.randomGeometric = $d, t.randomInt = Bd, t.randomIrwinHall = jd, t.randomLcg = function () {\n    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Math.random();\n    var n = 0 | (0 <= t && t < 1 ? t / ep : Math.abs(t));\n    return function () {\n      return n = 1664525 * n + 1013904223 | 0, ep * (n >>> 0);\n    };\n  }, t.randomLogNormal = Ld, t.randomLogistic = tp, t.randomNormal = Yd, t.randomPareto = Gd, t.randomPoisson = np, t.randomUniform = Id, t.randomWeibull = Qd, t.range = Z, t.reduce = function (t, n, e) {\n    if ("function" != typeof n) throw new TypeError("reducer is not a function");\n    var r = t[Symbol.iterator]();\n    var i,\n        o,\n        a = -1;\n\n    if (arguments.length < 3) {\n      var _r$next;\n\n      if ((_r$next = r.next(), i = _r$next.done, e = _r$next.value, _r$next), i) return;\n      ++a;\n    }\n\n    for (; (_r$next2 = r.next(), i = _r$next2.done, o = _r$next2.value, _r$next2), !i;) {\n      var _r$next2;\n\n      e = n(e, o, ++a, t);\n    }\n\n    return e;\n  }, t.reverse = function (t) {\n    if ("function" != typeof t[Symbol.iterator]) throw new TypeError("values is not iterable");\n    return Array.from(t).reverse();\n  }, t.rgb = ve, t.ribbon = function () {\n    return ba();\n  }, t.ribbonArrow = function () {\n    return ba(_a);\n  }, t.rollup = A, t.rollups = function (t, n) {\n    for (var _len10 = arguments.length, e = new Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {\n      e[_key10 - 2] = arguments[_key10];\n    }\n\n    return S(t, Array.from, n, e);\n  }, t.scaleBand = up, t.scaleDiverging = function t() {\n    var n = bp(Cv()(lp));\n    return n.copy = function () {\n      return kv(n, t());\n    }, ip.apply(n, arguments);\n  }, t.scaleDivergingLog = function t() {\n    var n = Ep(Cv()).domain([.1, 1, 10]);\n    return n.copy = function () {\n      return kv(n, t()).base(n.base());\n    }, ip.apply(n, arguments);\n  }, t.scaleDivergingPow = Pv, t.scaleDivergingSqrt = function () {\n    return Pv.apply(null, arguments).exponent(.5);\n  }, t.scaleDivergingSymlog = function t() {\n    var n = Cp(Cv());\n    return n.copy = function () {\n      return kv(n, t()).constant(n.constant());\n    }, ip.apply(n, arguments);\n  }, t.scaleIdentity = function t(n) {\n    var e;\n\n    function r(t) {\n      return isNaN(t = +t) ? e : t;\n    }\n\n    return r.invert = r, r.domain = r.range = function (t) {\n      return arguments.length ? (n = Array.from(t, fp), r) : n.slice();\n    }, r.unknown = function (t) {\n      return arguments.length ? (e = t, r) : e;\n    }, r.copy = function () {\n      return t(n).unknown(e);\n    }, n = arguments.length ? Array.from(n, fp) : [0, 1], bp(r);\n  }, t.scaleImplicit = op, t.scaleLinear = function t() {\n    var n = vp();\n    return n.copy = function () {\n      return gp(n, t());\n    }, rp.apply(n, arguments), bp(n);\n  }, t.scaleLog = function t() {\n    var n = Ep(yp()).domain([1, 10]);\n    return n.copy = function () {\n      return gp(n, t()).base(n.base());\n    }, rp.apply(n, arguments), n;\n  }, t.scaleOrdinal = ap, t.scalePoint = function () {\n    return cp(up.apply(null, arguments).paddingInner(1));\n  }, t.scalePow = Rp, t.scaleQuantile = function t() {\n    var e,\n        r = [],\n        i = [],\n        a = [];\n\n    function u() {\n      var t = 0,\n          n = Math.max(1, i.length);\n\n      for (a = new Array(n - 1); ++t < n;) {\n        a[t - 1] = X(r, t / n);\n      }\n\n      return c;\n    }\n\n    function c(t) {\n      return isNaN(t = +t) ? e : i[o(a, t)];\n    }\n\n    return c.invertExtent = function (t) {\n      var n = i.indexOf(t);\n      return n < 0 ? [NaN, NaN] : [n > 0 ? a[n - 1] : r[0], n < a.length ? a[n] : r[r.length - 1]];\n    }, c.domain = function (t) {\n      if (!arguments.length) return r.slice();\n      r = [];\n\n      var _iterator53 = _createForOfIteratorHelper(t),\n          _step53;\n\n      try {\n        for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {\n          var _n67 = _step53.value;\n          null == _n67 || isNaN(_n67 = +_n67) || r.push(_n67);\n        }\n      } catch (err) {\n        _iterator53.e(err);\n      } finally {\n        _iterator53.f();\n      }\n\n      return r.sort(n), u();\n    }, c.range = function (t) {\n      return arguments.length ? (i = Array.from(t), u()) : i.slice();\n    }, c.unknown = function (t) {\n      return arguments.length ? (e = t, c) : e;\n    }, c.quantiles = function () {\n      return a.slice();\n    }, c.copy = function () {\n      return t().domain(r).range(i).unknown(e);\n    }, rp.apply(c, arguments);\n  }, t.scaleQuantize = function t() {\n    var n,\n        e = 0,\n        r = 1,\n        i = 1,\n        a = [.5],\n        u = [0, 1];\n\n    function c(t) {\n      return t <= t ? u[o(a, t, 0, i)] : n;\n    }\n\n    function f() {\n      var t = -1;\n\n      for (a = new Array(i); ++t < i;) {\n        a[t] = ((t + 1) * r - (t - i) * e) / (i + 1);\n      }\n\n      return c;\n    }\n\n    return c.domain = function (t) {\n      var _t33, _t34;\n\n      return arguments.length ? ((_t33 = t, _t34 = _slicedToArray(_t33, 2), e = _t34[0], r = _t34[1], _t33), e = +e, r = +r, f()) : [e, r];\n    }, c.range = function (t) {\n      return arguments.length ? (i = (u = Array.from(t)).length - 1, f()) : u.slice();\n    }, c.invertExtent = function (t) {\n      var n = u.indexOf(t);\n      return n < 0 ? [NaN, NaN] : n < 1 ? [e, a[0]] : n >= i ? [a[i - 1], r] : [a[n - 1], a[n]];\n    }, c.unknown = function (t) {\n      return arguments.length ? (n = t, c) : c;\n    }, c.thresholds = function () {\n      return a.slice();\n    }, c.copy = function () {\n      return t().domain([e, r]).range(u).unknown(n);\n    }, rp.apply(bp(c), arguments);\n  }, t.scaleRadial = function t() {\n    var n,\n        e = vp(),\n        r = [0, 1],\n        i = !1;\n\n    function o(t) {\n      var r = Op(e(t));\n      return isNaN(r) ? n : i ? Math.round(r) : r;\n    }\n\n    return o.invert = function (t) {\n      return e.invert(Fp(t));\n    }, o.domain = function (t) {\n      return arguments.length ? (e.domain(t), o) : e.domain();\n    }, o.range = function (t) {\n      return arguments.length ? (e.range((r = Array.from(t, fp)).map(Fp)), o) : r.slice();\n    }, o.rangeRound = function (t) {\n      return o.range(t).round(!0);\n    }, o.round = function (t) {\n      return arguments.length ? (i = !!t, o) : i;\n    }, o.clamp = function (t) {\n      return arguments.length ? (e.clamp(t), o) : e.clamp();\n    }, o.unknown = function (t) {\n      return arguments.length ? (n = t, o) : n;\n    }, o.copy = function () {\n      return t(e.domain(), r).round(i).clamp(e.clamp()).unknown(n);\n    }, rp.apply(o, arguments), bp(o);\n  }, t.scaleSequential = function t() {\n    var n = bp(Ev()(lp));\n    return n.copy = function () {\n      return kv(n, t());\n    }, ip.apply(n, arguments);\n  }, t.scaleSequentialLog = function t() {\n    var n = Ep(Ev()).domain([1, 10]);\n    return n.copy = function () {\n      return kv(n, t()).base(n.base());\n    }, ip.apply(n, arguments);\n  }, t.scaleSequentialPow = Nv, t.scaleSequentialQuantile = function t() {\n    var e = [],\n        r = lp;\n\n    function i(t) {\n      if (!isNaN(t = +t)) return r((o(e, t, 1) - 1) / (e.length - 1));\n    }\n\n    return i.domain = function (t) {\n      if (!arguments.length) return e.slice();\n      e = [];\n\n      var _iterator54 = _createForOfIteratorHelper(t),\n          _step54;\n\n      try {\n        for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {\n          var _n68 = _step54.value;\n          null == _n68 || isNaN(_n68 = +_n68) || e.push(_n68);\n        }\n      } catch (err) {\n        _iterator54.e(err);\n      } finally {\n        _iterator54.f();\n      }\n\n      return e.sort(n), i;\n    }, i.interpolator = function (t) {\n      return arguments.length ? (r = t, i) : r;\n    }, i.range = function () {\n      return e.map(function (t, n) {\n        return r(n / (e.length - 1));\n      });\n    }, i.quantiles = function (t) {\n      return Array.from({\n        length: t + 1\n      }, function (n, r) {\n        return H(e, r / t);\n      });\n    }, i.copy = function () {\n      return t(r).domain(e);\n    }, ip.apply(i, arguments);\n  }, t.scaleSequentialSqrt = function () {\n    return Nv.apply(null, arguments).exponent(.5);\n  }, t.scaleSequentialSymlog = function t() {\n    var n = Cp(Ev());\n    return n.copy = function () {\n      return kv(n, t()).constant(n.constant());\n    }, ip.apply(n, arguments);\n  }, t.scaleSqrt = function () {\n    return Rp.apply(null, arguments).exponent(.5);\n  }, t.scaleSymlog = function t() {\n    var n = Cp(yp());\n    return n.copy = function () {\n      return gp(n, t()).constant(n.constant());\n    }, rp.apply(n, arguments);\n  }, t.scaleThreshold = function t() {\n    var n,\n        e = [.5],\n        r = [0, 1],\n        i = 1;\n\n    function a(t) {\n      return t <= t ? r[o(e, t, 0, i)] : n;\n    }\n\n    return a.domain = function (t) {\n      return arguments.length ? (e = Array.from(t), i = Math.min(e.length, r.length - 1), a) : e.slice();\n    }, a.range = function (t) {\n      return arguments.length ? (r = Array.from(t), i = Math.min(e.length, r.length - 1), a) : r.slice();\n    }, a.invertExtent = function (t) {\n      var n = r.indexOf(t);\n      return [e[n - 1], e[n]];\n    }, a.unknown = function (t) {\n      return arguments.length ? (n = t, a) : n;\n    }, a.copy = function () {\n      return t().domain(e).range(r).unknown(n);\n    }, rp.apply(a, arguments);\n  }, t.scaleTime = function () {\n    return rp.apply(Sv(bg, vg, rg, tg, Qp, Zp, $p, Yp, t.timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);\n  }, t.scaleUtc = function () {\n    return rp.apply(Sv(Hg, Lg, kg, Tg, Mg, xg, $p, Yp, t.utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);\n  }, t.scan = function (t, n) {\n    var e = K(t, n);\n    return e < 0 ? void 0 : e;\n  }, t.schemeAccent = qv, t.schemeBlues = z_, t.schemeBrBG = Hv, t.schemeBuGn = c_, t.schemeBuPu = s_, t.schemeCategory10 = Dv, t.schemeDark2 = Rv, t.schemeGnBu = h_, t.schemeGreens = q_, t.schemeGreys = F_, t.schemeOrRd = p_, t.schemeOranges = L_, t.schemePRGn = Gv, t.schemePaired = Fv, t.schemePastel1 = Ov, t.schemePastel2 = Uv, t.schemePiYG = $v, t.schemePuBu = __, t.schemePuBuGn = y_, t.schemePuOr = Zv, t.schemePuRd = m_, t.schemePurples = U_, t.schemeRdBu = Qv, t.schemeRdGy = t_, t.schemeRdPu = w_, t.schemeRdYlBu = e_, t.schemeRdYlGn = i_, t.schemeReds = B_, t.schemeSet1 = Iv, t.schemeSet2 = Bv, t.schemeSet3 = Yv, t.schemeSpectral = a_, t.schemeTableau10 = Lv, t.schemeYlGn = S_, t.schemeYlGnBu = A_, t.schemeYlOrBr = k_, t.schemeYlOrRd = C_, t.select = Dn, t.selectAll = function (t) {\n    return "string" == typeof t ? new Pn([document.querySelectorAll(t)], [document.documentElement]) : new Pn([null == t ? [] : Et(t)], Cn);\n  }, t.selection = zn, t.selector = St, t.selectorAll = Nt, t.shuffle = Q, t.shuffler = J, t.some = function (t, n) {\n    if ("function" != typeof n) throw new TypeError("test is not a function");\n    var e = -1;\n\n    var _iterator55 = _createForOfIteratorHelper(t),\n        _step55;\n\n    try {\n      for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {\n        var _r32 = _step55.value;\n        if (n(_r32, ++e, t)) return !0;\n      }\n    } catch (err) {\n      _iterator55.e(err);\n    } finally {\n      _iterator55.f();\n    }\n\n    return !1;\n  }, t.sort = k, t.stack = function () {\n    var t = eb([]),\n        n = Hm,\n        e = jm,\n        r = Xm;\n\n    function i(i) {\n      var o,\n          a,\n          u = Array.from(t.apply(this, arguments), Gm),\n          c = u.length,\n          f = -1;\n\n      var _iterator56 = _createForOfIteratorHelper(i),\n          _step56;\n\n      try {\n        for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {\n          var _t35 = _step56.value;\n\n          for (o = 0, ++f; o < c; ++o) {\n            (u[o][f] = [0, +r(_t35, u[o].key, f, i)]).data = _t35;\n          }\n        }\n      } catch (err) {\n        _iterator56.e(err);\n      } finally {\n        _iterator56.f();\n      }\n\n      for (o = 0, a = Ab(n(u)); o < c; ++o) {\n        u[a[o]].index = o;\n      }\n\n      return e(u, a), u;\n    }\n\n    return i.keys = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : eb(Array.from(n)), i) : t;\n    }, i.value = function (t) {\n      return arguments.length ? (r = "function" == typeof t ? t : eb(+t), i) : r;\n    }, i.order = function (t) {\n      return arguments.length ? (n = null == t ? Hm : "function" == typeof t ? t : eb(Array.from(t)), i) : n;\n    }, i.offset = function (t) {\n      return arguments.length ? (e = null == t ? jm : t, i) : e;\n    }, i;\n  }, t.stackOffsetDiverging = function (t, n) {\n    if ((u = t.length) > 0) for (var e, r, i, o, a, u, c = 0, f = t[n[0]].length; c < f; ++c) {\n      for (o = a = 0, e = 0; e < u; ++e) {\n        (i = (r = t[n[e]][c])[1] - r[0]) > 0 ? (r[0] = o, r[1] = o += i) : i < 0 ? (r[1] = a, r[0] = a += i) : (r[0] = 0, r[1] = i);\n      }\n    }\n  }, t.stackOffsetExpand = function (t, n) {\n    if ((r = t.length) > 0) {\n      for (var e, r, i, o = 0, a = t[0].length; o < a; ++o) {\n        for (i = e = 0; e < r; ++e) {\n          i += t[e][o][1] || 0;\n        }\n\n        if (i) for (e = 0; e < r; ++e) {\n          t[e][o][1] /= i;\n        }\n      }\n\n      jm(t, n);\n    }\n  }, t.stackOffsetNone = jm, t.stackOffsetSilhouette = function (t, n) {\n    if ((e = t.length) > 0) {\n      for (var e, r = 0, i = t[n[0]], o = i.length; r < o; ++r) {\n        for (var a = 0, u = 0; a < e; ++a) {\n          u += t[a][r][1] || 0;\n        }\n\n        i[r][1] += i[r][0] = -u / 2;\n      }\n\n      jm(t, n);\n    }\n  }, t.stackOffsetWiggle = function (t, n) {\n    if ((i = t.length) > 0 && (r = (e = t[n[0]]).length) > 0) {\n      for (var e, r, i, o = 0, a = 1; a < r; ++a) {\n        for (var u = 0, c = 0, f = 0; u < i; ++u) {\n          for (var s = t[n[u]], l = s[a][1] || 0, h = (l - (s[a - 1][1] || 0)) / 2, d = 0; d < u; ++d) {\n            var p = t[n[d]];\n            h += (p[a][1] || 0) - (p[a - 1][1] || 0);\n          }\n\n          c += l, f += h * l;\n        }\n\n        e[a - 1][1] += e[a - 1][0] = o, c && (o -= f / c);\n      }\n\n      e[a - 1][1] += e[a - 1][0] = o, jm(t, n);\n    }\n  }, t.stackOrderAppearance = Vm, t.stackOrderAscending = Wm, t.stackOrderDescending = function (t) {\n    return Wm(t).reverse();\n  }, t.stackOrderInsideOut = function (t) {\n    var n,\n        e,\n        r = t.length,\n        i = t.map(Zm),\n        o = Vm(t),\n        a = 0,\n        u = 0,\n        c = [],\n        f = [];\n\n    for (n = 0; n < r; ++n) {\n      e = o[n], a < u ? (a += i[e], c.push(e)) : (u += i[e], f.push(e));\n    }\n\n    return f.reverse().concat(c);\n  }, t.stackOrderNone = Hm, t.stackOrderReverse = function (t) {\n    return Hm(t).reverse();\n  }, t.stratify = function () {\n    var t = wd,\n        n = Md;\n\n    function e(e) {\n      var r,\n          i,\n          o,\n          a,\n          u,\n          c,\n          f,\n          s = Array.from(e),\n          l = s.length,\n          h = new Map();\n\n      for (i = 0; i < l; ++i) {\n        r = s[i], u = s[i] = new Zh(r), null != (c = t(r, i, e)) && (c += "") && (f = u.id = c, h.set(f, h.has(f) ? xd : u)), null != (c = n(r, i, e)) && (c += "") && (u.parent = c);\n      }\n\n      for (i = 0; i < l; ++i) {\n        if (c = (u = s[i]).parent) {\n          if (!(a = h.get(c))) throw new Error("missing: " + c);\n          if (a === xd) throw new Error("ambiguous: " + c);\n          a.children ? a.children.push(u) : a.children = [u], u.parent = a;\n        } else {\n          if (o) throw new Error("multiple roots");\n          o = u;\n        }\n      }\n\n      if (!o) throw new Error("no root");\n      if (o.parent = md, o.eachBefore(function (t) {\n        t.depth = t.parent.depth + 1, --l;\n      }).eachBefore(Wh), o.parent = null, l > 0) throw new Error("cycle");\n      return o;\n    }\n\n    return e.id = function (n) {\n      return arguments.length ? (t = ld(n), e) : t;\n    }, e.parentId = function (t) {\n      return arguments.length ? (n = ld(t), e) : n;\n    }, e;\n  }, t.style = Jt, t.subset = function (t, n) {\n    return rt(n, t);\n  }, t.sum = function (t, n) {\n    var e = 0;\n\n    if (void 0 === n) {\n      var _iterator57 = _createForOfIteratorHelper(t),\n          _step57;\n\n      try {\n        for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {\n          var _n69 = _step57.value;\n          (_n69 = +_n69) && (e += _n69);\n        }\n      } catch (err) {\n        _iterator57.e(err);\n      } finally {\n        _iterator57.f();\n      }\n    } else {\n      var _r33 = -1;\n\n      var _iterator58 = _createForOfIteratorHelper(t),\n          _step58;\n\n      try {\n        for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {\n          var _i30 = _step58.value;\n          (_i30 = +n(_i30, ++_r33, t)) && (e += _i30);\n        }\n      } catch (err) {\n        _iterator58.e(err);\n      } finally {\n        _iterator58.f();\n      }\n    }\n\n    return e;\n  }, t.superset = rt, t.svg = Ou, t.symbol = function (t, n) {\n    var e = null;\n\n    function r() {\n      var r;\n      if (e || (e = r = fa()), t.apply(this, arguments).draw(e, +n.apply(this, arguments)), r) return e = null, r + "" || null;\n    }\n\n    return t = "function" == typeof t ? t : eb(t || Gb), n = "function" == typeof n ? n : eb(void 0 === n ? 64 : +n), r.type = function (n) {\n      return arguments.length ? (t = "function" == typeof n ? n : eb(n), r) : t;\n    }, r.size = function (t) {\n      return arguments.length ? (n = "function" == typeof t ? t : eb(+t), r) : n;\n    }, r.context = function (t) {\n      return arguments.length ? (e = null == t ? null : t, r) : e;\n    }, r;\n  }, t.symbolCircle = Gb, t.symbolCross = Vb, t.symbolDiamond = Zb, t.symbolSquare = nm, t.symbolStar = tm, t.symbolTriangle = rm, t.symbolWye = cm, t.symbols = fm, t.text = Nu, t.thresholdFreedmanDiaconis = function (t, n, e) {\n    return Math.ceil((e - n) / (2 * (H(t, .75) - H(t, .25)) * Math.pow(c(t), -1 / 3)));\n  }, t.thresholdScott = function (t, n, e) {\n    return Math.ceil((e - n) / (3.5 * d(t) * Math.pow(c(t), -1 / 3)));\n  }, t.thresholdSturges = U, t.tickFormat = _p, t.tickIncrement = R, t.tickStep = F, t.ticks = q, t.timeDay = tg, t.timeDays = ng, t.timeFormatDefaultLocale = pv, t.timeFormatLocale = Wg, t.timeFriday = cg, t.timeFridays = gg, t.timeHour = Qp, t.timeHours = Jp, t.timeInterval = Bp, t.timeMillisecond = Yp, t.timeMilliseconds = Lp, t.timeMinute = Zp, t.timeMinutes = Kp, t.timeMonday = ig, t.timeMondays = lg, t.timeMonth = vg, t.timeMonths = _g, t.timeSaturday = fg, t.timeSaturdays = yg, t.timeSecond = $p, t.timeSeconds = Wp, t.timeSunday = rg, t.timeSundays = sg, t.timeThursday = ug, t.timeThursdays = pg, t.timeTuesday = og, t.timeTuesdays = hg, t.timeWednesday = ag, t.timeWednesdays = dg, t.timeWeek = rg, t.timeWeeks = sg, t.timeYear = bg, t.timeYears = mg, t.timeout = ci, t.timer = ri, t.timerFlush = ii, t.transition = Hi, t.transpose = tt, t.tree = function () {\n    var t = Ad,\n        n = 1,\n        e = 1,\n        r = null;\n\n    function i(i) {\n      var c = function (t) {\n        for (var n, e, r, i, o, a = new Nd(t, 0), u = [a]; n = u.pop();) {\n          if (r = n._.children) for (n.children = new Array(o = r.length), i = o - 1; i >= 0; --i) {\n            u.push(e = n.children[i] = new Nd(r[i], i)), e.parent = n;\n          }\n        }\n\n        return (a.parent = new Nd(null, 0)).children = [a], a;\n      }(i);\n\n      if (c.eachAfter(o), c.parent.m = -c.z, c.eachBefore(a), r) i.eachBefore(u);else {\n        var f = i,\n            s = i,\n            l = i;\n        i.eachBefore(function (t) {\n          t.x < f.x && (f = t), t.x > s.x && (s = t), t.depth > l.depth && (l = t);\n        });\n        var h = f === s ? 1 : t(f, s) / 2,\n            d = h - f.x,\n            p = n / (s.x + h + d),\n            g = e / (l.depth || 1);\n        i.eachBefore(function (t) {\n          t.x = (t.x + d) * p, t.y = t.depth * g;\n        });\n      }\n      return i;\n    }\n\n    function o(n) {\n      var e = n.children,\n          r = n.parent.children,\n          i = n.i ? r[n.i - 1] : null;\n\n      if (e) {\n        !function (t) {\n          for (var n, e = 0, r = 0, i = t.children, o = i.length; --o >= 0;) {\n            (n = i[o]).z += e, n.m += e, e += n.s + (r += n.c);\n          }\n        }(n);\n        var o = (e[0].z + e[e.length - 1].z) / 2;\n        i ? (n.z = i.z + t(n._, i._), n.m = n.z - o) : n.z = o;\n      } else i && (n.z = i.z + t(n._, i._));\n\n      n.parent.A = function (n, e, r) {\n        if (e) {\n          for (var i, o = n, a = n, u = e, c = o.parent.children[0], f = o.m, s = a.m, l = u.m, h = c.m; u = Sd(u), o = Td(o), u && o;) {\n            c = Td(c), (a = Sd(a)).a = n, (i = u.z + l - o.z - f + t(u._, o._)) > 0 && (Ed(kd(u, n, r), n, i), f += i, s += i), l += u.m, f += o.m, h += c.m, s += a.m;\n          }\n\n          u && !Sd(a) && (a.t = u, a.m += l - s), o && !Td(c) && (c.t = o, c.m += f - h, r = n);\n        }\n\n        return r;\n      }(n, i, n.parent.A || r[0]);\n    }\n\n    function a(t) {\n      t._.x = t.z + t.parent.m, t.m += t.parent.m;\n    }\n\n    function u(t) {\n      t.x *= n, t.y = t.depth * e;\n    }\n\n    return i.separation = function (n) {\n      return arguments.length ? (t = n, i) : t;\n    }, i.size = function (t) {\n      return arguments.length ? (r = !1, n = +t[0], e = +t[1], i) : r ? null : [n, e];\n    }, i.nodeSize = function (t) {\n      return arguments.length ? (r = !0, n = +t[0], e = +t[1], i) : r ? [n, e] : null;\n    }, i;\n  }, t.treemap = function () {\n    var t = Dd,\n        n = !1,\n        e = 1,\n        r = 1,\n        i = [0],\n        o = hd,\n        a = hd,\n        u = hd,\n        c = hd,\n        f = hd;\n\n    function s(t) {\n      return t.x0 = t.y0 = 0, t.x1 = e, t.y1 = r, t.eachBefore(l), i = [0], n && t.eachBefore(_d), t;\n    }\n\n    function l(n) {\n      var e = i[n.depth],\n          r = n.x0 + e,\n          s = n.y0 + e,\n          l = n.x1 - e,\n          h = n.y1 - e;\n      l < r && (r = l = (r + l) / 2), h < s && (s = h = (s + h) / 2), n.x0 = r, n.y0 = s, n.x1 = l, n.y1 = h, n.children && (e = i[n.depth + 1] = o(n) / 2, r += f(n) - e, s += a(n) - e, (l -= u(n) - e) < r && (r = l = (r + l) / 2), (h -= c(n) - e) < s && (s = h = (s + h) / 2), t(n, r, s, l, h));\n    }\n\n    return s.round = function (t) {\n      return arguments.length ? (n = !!t, s) : n;\n    }, s.size = function (t) {\n      return arguments.length ? (e = +t[0], r = +t[1], s) : [e, r];\n    }, s.tile = function (n) {\n      return arguments.length ? (t = ld(n), s) : t;\n    }, s.padding = function (t) {\n      return arguments.length ? s.paddingInner(t).paddingOuter(t) : s.paddingInner();\n    }, s.paddingInner = function (t) {\n      return arguments.length ? (o = "function" == typeof t ? t : dd(+t), s) : o;\n    }, s.paddingOuter = function (t) {\n      return arguments.length ? s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t) : s.paddingTop();\n    }, s.paddingTop = function (t) {\n      return arguments.length ? (a = "function" == typeof t ? t : dd(+t), s) : a;\n    }, s.paddingRight = function (t) {\n      return arguments.length ? (u = "function" == typeof t ? t : dd(+t), s) : u;\n    }, s.paddingBottom = function (t) {\n      return arguments.length ? (c = "function" == typeof t ? t : dd(+t), s) : c;\n    }, s.paddingLeft = function (t) {\n      return arguments.length ? (f = "function" == typeof t ? t : dd(+t), s) : f;\n    }, s;\n  }, t.treemapBinary = function (t, n, e, r, i) {\n    var o,\n        a,\n        u = t.children,\n        c = u.length,\n        f = new Array(c + 1);\n\n    for (f[0] = a = o = 0; o < c; ++o) {\n      f[o + 1] = a += u[o].value;\n    }\n\n    !function t(n, e, r, i, o, a, c) {\n      if (n >= e - 1) {\n        var s = u[n];\n        return s.x0 = i, s.y0 = o, s.x1 = a, void (s.y1 = c);\n      }\n\n      var l = f[n],\n          h = r / 2 + l,\n          d = n + 1,\n          p = e - 1;\n\n      for (; d < p;) {\n        var g = d + p >>> 1;\n        f[g] < h ? d = g + 1 : p = g;\n      }\n\n      h - f[d - 1] < f[d] - h && n + 1 < d && --d;\n      var y = f[d] - l,\n          v = r - y;\n\n      if (a - i > c - o) {\n        var _ = r ? (i * v + a * y) / r : a;\n\n        t(n, d, y, i, o, _, c), t(d, e, v, _, o, a, c);\n      } else {\n        var b = r ? (o * v + c * y) / r : c;\n        t(n, d, y, i, o, a, b), t(d, e, v, i, b, a, c);\n      }\n    }(0, c, t.value, n, e, r, i);\n  }, t.treemapDice = bd, t.treemapResquarify = qd, t.treemapSlice = Cd, t.treemapSliceDice = function (t, n, e, r, i) {\n    (1 & t.depth ? Cd : bd)(t, n, e, r, i);\n  }, t.treemapSquarify = Dd, t.tsv = zu, t.tsvFormat = mu, t.tsvFormatBody = xu, t.tsvFormatRow = Mu, t.tsvFormatRows = wu, t.tsvFormatValue = Au, t.tsvParse = _u, t.tsvParseRows = bu, t.union = function () {\n    var n = new Set();\n\n    for (var _len11 = arguments.length, t = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      t[_key11] = arguments[_key11];\n    }\n\n    for (var _i31 = 0, _t36 = t; _i31 < _t36.length; _i31++) {\n      var _e37 = _t36[_i31];\n\n      var _iterator59 = _createForOfIteratorHelper(_e37),\n          _step59;\n\n      try {\n        for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {\n          var _t37 = _step59.value;\n          n.add(_t37);\n        }\n      } catch (err) {\n        _iterator59.e(err);\n      } finally {\n        _iterator59.f();\n      }\n    }\n\n    return n;\n  }, t.utcDay = Tg, t.utcDays = Sg, t.utcFriday = Dg, t.utcFridays = Bg, t.utcHour = Mg, t.utcHours = Ag, t.utcMillisecond = Yp, t.utcMilliseconds = Lp, t.utcMinute = xg, t.utcMinutes = wg, t.utcMonday = Ng, t.utcMondays = Fg, t.utcMonth = Lg, t.utcMonths = jg, t.utcSaturday = qg, t.utcSaturdays = Yg, t.utcSecond = $p, t.utcSeconds = Wp, t.utcSunday = kg, t.utcSundays = Rg, t.utcThursday = zg, t.utcThursdays = Ig, t.utcTuesday = Cg, t.utcTuesdays = Og, t.utcWednesday = Pg, t.utcWednesdays = Ug, t.utcWeek = kg, t.utcWeeks = Rg, t.utcYear = Hg, t.utcYears = Xg, t.variance = h, t.version = "6.6.1", t.window = Wt, t.xml = Ru, t.zip = function () {\n    return tt(arguments);\n  }, t.zoom = function () {\n    var t,\n        n,\n        e,\n        r = ix,\n        i = ox,\n        o = fx,\n        a = ux,\n        u = cx,\n        c = [0, 1 / 0],\n        f = [[-1 / 0, -1 / 0], [1 / 0, 1 / 0]],\n        s = 250,\n        l = Dr,\n        h = pt("start", "zoom", "end"),\n        d = 500,\n        p = 0,\n        g = 10;\n\n    function y(t) {\n      t.property("__zoom", ax).on("wheel.zoom", M).on("mousedown.zoom", A).on("dblclick.zoom", T).filter(u).on("touchstart.zoom", S).on("touchmove.zoom", E).on("touchend.zoom touchcancel.zoom", k).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");\n    }\n\n    function v(t, n) {\n      return (n = Math.max(c[0], Math.min(c[1], n))) === t.k ? t : new Jm(n, t.x, t.y);\n    }\n\n    function _(t, n, e) {\n      var r = n[0] - e[0] * t.k,\n          i = n[1] - e[1] * t.k;\n      return r === t.x && i === t.y ? t : new Jm(t.k, r, i);\n    }\n\n    function b(t) {\n      return [(+t[0][0] + +t[1][0]) / 2, (+t[0][1] + +t[1][1]) / 2];\n    }\n\n    function m(t, n, e, r) {\n      t.on("start.zoom", function () {\n        x(this, arguments).event(r).start();\n      }).on("interrupt.zoom end.zoom", function () {\n        x(this, arguments).event(r).end();\n      }).tween("zoom", function () {\n        var t = this,\n            o = arguments,\n            a = x(t, o).event(r),\n            u = i.apply(t, o),\n            c = null == e ? b(u) : "function" == typeof e ? e.apply(t, o) : e,\n            f = Math.max(u[1][0] - u[0][0], u[1][1] - u[0][1]),\n            s = t.__zoom,\n            h = "function" == typeof n ? n.apply(t, o) : n,\n            d = l(s.invert(c).concat(f / s.k), h.invert(c).concat(f / h.k));\n        return function (t) {\n          if (1 === t) t = h;else {\n            var n = d(t),\n                e = f / n[2];\n            t = new Jm(e, c[0] - n[0] * e, c[1] - n[1] * e);\n          }\n          a.zoom(null, t);\n        };\n      });\n    }\n\n    function x(t, n, e) {\n      return !e && t.__zooming || new w(t, n);\n    }\n\n    function w(t, n) {\n      this.that = t, this.args = n, this.active = 0, this.sourceEvent = null, this.extent = i.apply(t, n), this.taps = 0;\n    }\n\n    function M(t) {\n      for (var _len12 = arguments.length, n = new Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {\n        n[_key12 - 1] = arguments[_key12];\n      }\n\n      if (r.apply(this, arguments)) {\n        var e = x(this, n).event(t),\n            i = this.__zoom,\n            u = Math.max(c[0], Math.min(c[1], i.k * Math.pow(2, a.apply(this, arguments)))),\n            s = Un(t);\n        if (e.wheel) e.mouse[0][0] === s[0] && e.mouse[0][1] === s[1] || (e.mouse[1] = i.invert(e.mouse[0] = s)), clearTimeout(e.wheel);else {\n          if (i.k === u) return;\n          e.mouse = [s, i.invert(s)], gi(this), e.start();\n        }\n        rx(t), e.wheel = setTimeout(l, 150), e.zoom("mouse", o(_(v(i, u), e.mouse[0], e.mouse[1]), e.extent, f));\n      }\n\n      function l() {\n        e.wheel = null, e.end();\n      }\n    }\n\n    function A(t) {\n      for (var _len13 = arguments.length, n = new Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {\n        n[_key13 - 1] = arguments[_key13];\n      }\n\n      if (!e && r.apply(this, arguments)) {\n        var i = x(this, n, !0).event(t),\n            a = Dn(t.view).on("mousemove.zoom", h, !0).on("mouseup.zoom", d, !0),\n            u = Un(t, c),\n            c = t.currentTarget,\n            s = t.clientX,\n            l = t.clientY;\n        Yn(t.view), ex(t), i.mouse = [u, this.__zoom.invert(u)], gi(this), i.start();\n      }\n\n      function h(t) {\n        if (rx(t), !i.moved) {\n          var n = t.clientX - s,\n              e = t.clientY - l;\n          i.moved = n * n + e * e > p;\n        }\n\n        i.event(t).zoom("mouse", o(_(i.that.__zoom, i.mouse[0] = Un(t, c), i.mouse[1]), i.extent, f));\n      }\n\n      function d(t) {\n        a.on("mousemove.zoom mouseup.zoom", null), Ln(t.view, i.moved), rx(t), i.event(t).end();\n      }\n    }\n\n    function T(t) {\n      for (var _len14 = arguments.length, n = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {\n        n[_key14 - 1] = arguments[_key14];\n      }\n\n      if (r.apply(this, arguments)) {\n        var e = this.__zoom,\n            a = Un(t.changedTouches ? t.changedTouches[0] : t, this),\n            u = e.invert(a),\n            c = e.k * (t.shiftKey ? .5 : 2),\n            l = o(_(v(e, c), a, u), i.apply(this, n), f);\n        rx(t), s > 0 ? Dn(this).transition().duration(s).call(m, l, a, t) : Dn(this).call(y.transform, l, a, t);\n      }\n    }\n\n    function S(e) {\n      for (var _len15 = arguments.length, i = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {\n        i[_key15 - 1] = arguments[_key15];\n      }\n\n      if (r.apply(this, arguments)) {\n        var o,\n            a,\n            u,\n            c,\n            f = e.touches,\n            s = f.length,\n            l = x(this, i, e.changedTouches.length === s).event(e);\n\n        for (ex(e), a = 0; a < s; ++a) {\n          c = [c = Un(u = f[a], this), this.__zoom.invert(c), u.identifier], l.touch0 ? l.touch1 || l.touch0[2] === c[2] || (l.touch1 = c, l.taps = 0) : (l.touch0 = c, o = !0, l.taps = 1 + !!t);\n        }\n\n        t && (t = clearTimeout(t)), o && (l.taps < 2 && (n = c[0], t = setTimeout(function () {\n          t = null;\n        }, d)), gi(this), l.start());\n      }\n    }\n\n    function E(t) {\n      if (this.__zooming) {\n        for (var _len16 = arguments.length, n = new Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {\n          n[_key16 - 1] = arguments[_key16];\n        }\n\n        var e,\n            r,\n            i,\n            a,\n            u = x(this, n).event(t),\n            c = t.changedTouches,\n            s = c.length;\n\n        for (rx(t), e = 0; e < s; ++e) {\n          i = Un(r = c[e], this), u.touch0 && u.touch0[2] === r.identifier ? u.touch0[0] = i : u.touch1 && u.touch1[2] === r.identifier && (u.touch1[0] = i);\n        }\n\n        if (r = u.that.__zoom, u.touch1) {\n          var l = u.touch0[0],\n              h = u.touch0[1],\n              d = u.touch1[0],\n              p = u.touch1[1],\n              g = (g = d[0] - l[0]) * g + (g = d[1] - l[1]) * g,\n              y = (y = p[0] - h[0]) * y + (y = p[1] - h[1]) * y;\n          r = v(r, Math.sqrt(g / y)), i = [(l[0] + d[0]) / 2, (l[1] + d[1]) / 2], a = [(h[0] + p[0]) / 2, (h[1] + p[1]) / 2];\n        } else {\n          if (!u.touch0) return;\n          i = u.touch0[0], a = u.touch0[1];\n        }\n\n        u.zoom("touch", o(_(r, i, a), u.extent, f));\n      }\n    }\n\n    function k(t) {\n      for (var _len17 = arguments.length, r = new Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++) {\n        r[_key17 - 1] = arguments[_key17];\n      }\n\n      if (this.__zooming) {\n        var i,\n            o,\n            a = x(this, r).event(t),\n            u = t.changedTouches,\n            c = u.length;\n\n        for (ex(t), e && clearTimeout(e), e = setTimeout(function () {\n          e = null;\n        }, d), i = 0; i < c; ++i) {\n          o = u[i], a.touch0 && a.touch0[2] === o.identifier ? delete a.touch0 : a.touch1 && a.touch1[2] === o.identifier && delete a.touch1;\n        }\n\n        if (a.touch1 && !a.touch0 && (a.touch0 = a.touch1, delete a.touch1), a.touch0) a.touch0[1] = this.__zoom.invert(a.touch0[0]);else if (a.end(), 2 === a.taps && (o = Un(o, this), Math.hypot(n[0] - o[0], n[1] - o[1]) < g)) {\n          var f = Dn(this).on("dblclick.zoom");\n          f && f.apply(this, arguments);\n        }\n      }\n    }\n\n    return y.transform = function (t, n, e, r) {\n      var i = t.selection ? t.selection() : t;\n      i.property("__zoom", ax), t !== i ? m(t, n, e, r) : i.interrupt().each(function () {\n        x(this, arguments).event(r).start().zoom(null, "function" == typeof n ? n.apply(this, arguments) : n).end();\n      });\n    }, y.scaleBy = function (t, n, e, r) {\n      y.scaleTo(t, function () {\n        var t = this.__zoom.k,\n            e = "function" == typeof n ? n.apply(this, arguments) : n;\n        return t * e;\n      }, e, r);\n    }, y.scaleTo = function (t, n, e, r) {\n      y.transform(t, function () {\n        var t = i.apply(this, arguments),\n            r = this.__zoom,\n            a = null == e ? b(t) : "function" == typeof e ? e.apply(this, arguments) : e,\n            u = r.invert(a),\n            c = "function" == typeof n ? n.apply(this, arguments) : n;\n        return o(_(v(r, c), a, u), t, f);\n      }, e, r);\n    }, y.translateBy = function (t, n, e, r) {\n      y.transform(t, function () {\n        return o(this.__zoom.translate("function" == typeof n ? n.apply(this, arguments) : n, "function" == typeof e ? e.apply(this, arguments) : e), i.apply(this, arguments), f);\n      }, null, r);\n    }, y.translateTo = function (t, n, e, r, a) {\n      y.transform(t, function () {\n        var t = i.apply(this, arguments),\n            a = this.__zoom,\n            u = null == r ? b(t) : "function" == typeof r ? r.apply(this, arguments) : r;\n        return o(tx.translate(u[0], u[1]).scale(a.k).translate("function" == typeof n ? -n.apply(this, arguments) : -n, "function" == typeof e ? -e.apply(this, arguments) : -e), t, f);\n      }, r, a);\n    }, w.prototype = {\n      event: function event(t) {\n        return t && (this.sourceEvent = t), this;\n      },\n      start: function start() {\n        return 1 == ++this.active && (this.that.__zooming = this, this.emit("start")), this;\n      },\n      zoom: function zoom(t, n) {\n        return this.mouse && "mouse" !== t && (this.mouse[1] = n.invert(this.mouse[0])), this.touch0 && "touch" !== t && (this.touch0[1] = n.invert(this.touch0[0])), this.touch1 && "touch" !== t && (this.touch1[1] = n.invert(this.touch1[0])), this.that.__zoom = n, this.emit("zoom"), this;\n      },\n      end: function end() {\n        return 0 == --this.active && (delete this.that.__zooming, this.emit("end")), this;\n      },\n      emit: function emit(t) {\n        var n = Dn(this.that).datum();\n        h.call(t, this.that, new Qm(t, {\n          sourceEvent: this.sourceEvent,\n          target: y,\n          type: t,\n          transform: this.that.__zoom,\n          dispatch: h\n        }), n);\n      }\n    }, y.wheelDelta = function (t) {\n      return arguments.length ? (a = "function" == typeof t ? t : Km(+t), y) : a;\n    }, y.filter = function (t) {\n      return arguments.length ? (r = "function" == typeof t ? t : Km(!!t), y) : r;\n    }, y.touchable = function (t) {\n      return arguments.length ? (u = "function" == typeof t ? t : Km(!!t), y) : u;\n    }, y.extent = function (t) {\n      return arguments.length ? (i = "function" == typeof t ? t : Km([[+t[0][0], +t[0][1]], [+t[1][0], +t[1][1]]]), y) : i;\n    }, y.scaleExtent = function (t) {\n      return arguments.length ? (c[0] = +t[0], c[1] = +t[1], y) : [c[0], c[1]];\n    }, y.translateExtent = function (t) {\n      return arguments.length ? (f[0][0] = +t[0][0], f[1][0] = +t[1][0], f[0][1] = +t[0][1], f[1][1] = +t[1][1], y) : [[f[0][0], f[0][1]], [f[1][0], f[1][1]]];\n    }, y.constrain = function (t) {\n      return arguments.length ? (o = t, y) : o;\n    }, y.duration = function (t) {\n      return arguments.length ? (s = +t, y) : s;\n    }, y.interpolate = function (t) {\n      return arguments.length ? (l = t, y) : l;\n    }, y.on = function () {\n      var t = h.on.apply(h, arguments);\n      return t === h ? y : t;\n    }, y.clickDistance = function (t) {\n      return arguments.length ? (p = (t = +t) * t, y) : Math.sqrt(p);\n    }, y.tapDistance = function (t) {\n      return arguments.length ? (g = +t, y) : g;\n    }, y;\n  }, t.zoomIdentity = tx, t.zoomTransform = nx, Object.defineProperty(t, "__esModule", {\n    value: !0\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///980\n')},666:module=>{eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, "");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    "GeneratorFunction"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, "GeneratorFunction");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, "Generator");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function("r", "regeneratorRuntime = r")(runtime);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///666\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.amdO={},__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F);var __webpack_exports__=__webpack_require__(980)})();